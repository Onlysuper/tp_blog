((typeof self !== 'undefined' ? self : this)["webpackJsonp"] = (typeof self !== 'undefined' ? self : this)["webpackJsonp"] || []).push([["user-menu"],{

/***/ "./node_modules/@babel/runtime-corejs2/core-js/symbol.js":
/*!***************************************************************!*\
  !*** ./node_modules/@babel/runtime-corejs2/core-js/symbol.js ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! core-js/library/fn/symbol */ \"./node_modules/core-js/library/fn/symbol/index.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3N5bWJvbC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvc3ltYm9sLmpzPzY3YmIiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbFwiKTsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime-corejs2/core-js/symbol.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js":
/*!************************************************************************!*\
  !*** ./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! core-js/library/fn/symbol/iterator */ \"./node_modules/core-js/library/fn/symbol/iterator.js\");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9jb3JlLWpzL3N5bWJvbC9pdGVyYXRvci5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS1jb3JlanMyL2NvcmUtanMvc3ltYm9sL2l0ZXJhdG9yLmpzPzVkNTgiXSwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiY29yZS1qcy9saWJyYXJ5L2ZuL3N5bWJvbC9pdGVyYXRvclwiKTsiXSwibWFwcGluZ3MiOiJBQUFBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js\n");

/***/ }),

/***/ "./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return _typeof; });\n/* harmony import */ var _core_js_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../core-js/symbol/iterator */ \"./node_modules/@babel/runtime-corejs2/core-js/symbol/iterator.js\");\n/* harmony import */ var _core_js_symbol_iterator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_core_js_symbol_iterator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _core_js_symbol__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../core-js/symbol */ \"./node_modules/@babel/runtime-corejs2/core-js/symbol.js\");\n/* harmony import */ var _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_core_js_symbol__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nfunction _typeof2(obj) { if (typeof _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a === \"function\" && typeof _core_js_symbol_iterator__WEBPACK_IMPORTED_MODULE_0___default.a === \"symbol\") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a === \"function\" && obj.constructor === _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a && obj !== _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a.prototype ? \"symbol\" : typeof obj; }; } return _typeof2(obj); }\n\nfunction _typeof(obj) {\n  if (typeof _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a === \"function\" && _typeof2(_core_js_symbol_iterator__WEBPACK_IMPORTED_MODULE_0___default.a) === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return _typeof2(obj);\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a === \"function\" && obj.constructor === _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a && obj !== _core_js_symbol__WEBPACK_IMPORTED_MODULE_1___default.a.prototype ? \"symbol\" : _typeof2(obj);\n    };\n  }\n\n  return _typeof(obj);\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS90eXBlb2YuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUtY29yZWpzMi9oZWxwZXJzL2VzbS90eXBlb2YuanM/NzYxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgX1N5bWJvbCRpdGVyYXRvciBmcm9tIFwiLi4vLi4vY29yZS1qcy9zeW1ib2wvaXRlcmF0b3JcIjtcbmltcG9ydCBfU3ltYm9sIGZyb20gXCIuLi8uLi9jb3JlLWpzL3N5bWJvbFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBfU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIF9TeW1ib2wkaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIF9TeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IF9TeW1ib2wgJiYgb2JqICE9PSBfU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgX1N5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKF9TeW1ib2wkaXRlcmF0b3IpID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgX1N5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gX1N5bWJvbCAmJiBvYmogIT09IF9TeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js\n");

/***/ }),

/***/ "./node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true&":

  !*** ./node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!./node_modules/css-loader??ref--8-oneOf-1-1!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src??ref--8-oneOf-1-2!./node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true& ***!

/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// extracted by mini-css-extract-plugin\n    if(true) {\n      // 1572857640607\n      var cssReload = __webpack_require__(/*! ./node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js */ \"./node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/hmr/hotModuleReplacement.js\")(module.i, {\"hmr\":true,\"publicPath\":\"../../\",\"locals\":false});\n      module.hot.dispose(cssReload);\n      module.hot.accept(undefined, cssReload);\n    }\n  //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHZ1ZS9jbGktc2VydmljZS9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanM/IS4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanM/IS4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8hLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/IS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL3ZpZXdzL2FkbWluL3VzZXJNZW51LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJlZGUwM2I4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdmlld3MvYWRtaW4vdXNlck1lbnUudnVlP2NlNTMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG4gICAgaWYobW9kdWxlLmhvdCkge1xuICAgICAgLy8gMTU3Mjg1NzY0MDYwN1xuICAgICAgdmFyIGNzc1JlbG9hZCA9IHJlcXVpcmUoXCIvVXNlcnMvYXBwbGUvV09SS19TUEFDRS8yMDE5MDcyNHVzZXItc2VydmUtcGVyZ2UvdXNlci1zZXJ2ZXItcGFnZS9ub2RlX21vZHVsZXMvQHZ1ZS9jbGktc2VydmljZS9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9obXIvaG90TW9kdWxlUmVwbGFjZW1lbnQuanNcIikobW9kdWxlLmlkLCB7XCJobXJcIjp0cnVlLFwicHVibGljUGF0aFwiOlwiLi4vLi4vXCIsXCJsb2NhbHNcIjpmYWxzZX0pO1xuICAgICAgbW9kdWxlLmhvdC5kaXNwb3NlKGNzc1JlbG9hZCk7XG4gICAgICBtb2R1bGUuaG90LmFjY2VwdCh1bmRlZmluZWQsIGNzc1JlbG9hZCk7XG4gICAgfVxuICAiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true&\n");

/***/ }),

/***/ "./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=script&lang=js&":
/*!******************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js??ref--12-0!./node_modules/babel-loader/lib!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/admin/userMenu.vue?vue&type=script&lang=js& ***!
  \******************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _src_common_zTree_js_jquery_ztree_all_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @src/common/zTree/js/jquery.ztree.all.js */ \"./src/common/zTree/js/jquery.ztree.all.js\");\n/* harmony import */ var _src_components_DataPage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @src/components/DataPage */ \"./src/components/DataPage/index.vue\");\n/* harmony import */ var _src_common_mixinsPc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @src/common/mixinsPc */ \"./src/common/mixinsPc.js\");\n/* harmony import */ var _src_components_DataPage_dataPage__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @src/components/DataPage/dataPage */ \"./src/components/DataPage/dataPage.js\");\n/* harmony import */ var _src_apis__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @src/apis */ \"./src/apis/index.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: \"userMenu\",\n  components: {\n    \"myp-data-page\": _src_components_DataPage__WEBPACK_IMPORTED_MODULE_1__[\"default\"] // 数据列表组件\n\n  },\n  mixins: [_src_components_DataPage_dataPage__WEBPACK_IMPORTED_MODULE_3__[\"mixinDataTable\"], _src_common_mixinsPc__WEBPACK_IMPORTED_MODULE_2__[\"mixinsPc\"]],\n  data: function data() {\n    var _this = this;\n\n    var httpMethodOptions = [{\n      value: \"GET\",\n      label: \"GET\"\n    }, {\n      value: \"POST\",\n      label: \"POST\"\n    }, {\n      value: \"PATCH\",\n      label: \"PATCH\"\n    }, {\n      value: \"DELETE\",\n      label: \"DELETE\"\n    }, {\n      value: \"PUT\",\n      label: \"PUT\"\n    }, {\n      value: \"HEADN\",\n      label: \"HEADN\"\n    }, {\n      value: \"OPTIONS\",\n      label: \"OPTIONS\"\n    }];\n    return {\n      setting: {},\n      dataList: [],\n      tableVisible: false,\n      editFuncFormVisible: false,\n      httpMethodOptions: httpMethodOptions,\n      editFuncForm: {},\n      functionMenu: {},\n      treeNodeObj: \"\",\n      treeId: \"rootTreeNenu\",\n      zTreeObj: \"\",\n      addFuncFormVisible: false,\n      addFuncFormRules: {},\n      addFuncForm: {\n        menuName: \"\",\n        functionName: \"\",\n        url: \"\",\n        httpMethod: \"\",\n        functionCode: \"\",\n        // 功能类型\n        typeOptions: [{\n          value: \"add\",\n          label: \"新增\"\n        }, {\n          value: \"edit\",\n          label: \"修改\"\n        }, {\n          value: \"page\",\n          label: \"分页查询\"\n        }, {\n          value: \"delete\",\n          label: \"删除\"\n        }] // 请求方法\n\n      },\n      menuFunctionParentNode: \"\",\n      addFormVisible: false,\n      addForm: {\n        addOptions: [{\n          value: true,\n          label: \"是\"\n        }, {\n          value: false,\n          label: \"否\"\n        }]\n      },\n      editFormVisible: false,\n      editForm: {\n        editOptions: [{\n          value: true,\n          label: \"是\"\n        }, {\n          value: false,\n          label: \"否\"\n        }]\n      },\n      editOptionsResult: [{\n        value: true,\n        label: \"是\"\n      }, {\n        value: false,\n        label: \"否\"\n      }],\n      addFormRules: {},\n      formLabelWidth: \"100px\",\n      // 列表数据\n      actionUrl: _src_apis__WEBPACK_IMPORTED_MODULE_4__[\"getMenuTreePage\"],\n      searchConditionDefault: {\n        menuCode: \"\",\n        page: 1,\n        limit: 10\n      },\n      searchCondition: {\n        menuCode: \"\",\n        page: 1,\n        limit: 10\n      },\n      tableData: {\n        // getDataUrl: {\n        //   url: getMenuTreePage // 初始化数据\n        // },\n        dataHeader: [// table列信息 key=>表头标题，word=>表内容信息\n        {\n          key: \"功能\",\n          width: \"130px\",\n          sortable: true,\n          word: \"functionName\"\n        }, {\n          key: \"功能编号\",\n          width: \"\",\n          word: \"functionCode\"\n        }, {\n          key: \"url\",\n          word: \"url\",\n          width: \"\"\n        }, {\n          key: \"请求方法\",\n          width: \"\",\n          word: \"httpMethod\"\n        }],\n        operation: {\n          width: \"120px\",\n          options: [// 操作按钮\n          {\n            text: \"编辑\",\n            color: \"#1890ff\",\n            visibleFn: function visibleFn() {\n              return _this.adminFilter(\"menu_function_edit\");\n            },\n            cb: function cb(rowdata) {\n              _this.editFuncForm = rowdata;\n              _this.editFuncForm.menuName = _this.functionMenu.menuName;\n              _this.editFuncFormVisible = true;\n            }\n          }, {\n            text: \"删除\",\n            visibleFn: function visibleFn() {\n              return _this.adminFilter(\"menu_function_delete\");\n            },\n            cb: function cb(rowdata) {\n              _this.$confirm(\"此操作将永久删除该功能, 是否继续?\", \"提示\", {\n                confirmButtonText: \"确定\",\n                cancelButtonText: \"取消\",\n                type: \"warning\"\n              }).then(function () {\n                Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"deleteMenuFunction\"])()(rowdata.functionCode).then(function (data) {\n                  if (data.code == \"00\") {\n                    _this.Message_pc({\n                      type: \"success\",\n                      message: \"删除成功!\"\n                    }); // 更新数据\n\n\n                    _this.searchCondition = {\n                      menuCode: _this.functionMenu.menuCode,\n                      page: 1,\n                      limit: 10\n                    };\n\n                    _this.seachstartHandle();\n                  } else {\n                    _this.Message_pc({\n                      type: \"warning\",\n                      message: data.msg\n                    });\n                  }\n                });\n              });\n            }\n          }]\n        }\n      },\n      dataTreeProps: {\n        label: \"menuName\",\n        isLeaf: \"isParent\"\n      }\n    };\n  },\n  methods: {\n    // 新增功能弹出显示\n    addFuncDialog: function addFuncDialog() {\n      this.addFuncForm.httpMethod = \"\";\n      this.addFuncForm.functiontype = \"\";\n      this.addFuncForm.functionName = \"\";\n      this.addFuncForm.url = \"\";\n      this.addFuncForm.functionCode = \"\";\n      this.addFuncForm.httpMethod = \"GET\";\n      var functionMenu = this.functionMenu;\n      var addFuncForm = this.addFuncForm;\n      this.addFuncForm.menuName = functionMenu.menuName;\n      this.addFuncFormVisible = true;\n    },\n    editFuncSave: function editFuncSave() {\n      var _this2 = this;\n\n      // 修改功能保存\n      this.saveLoading = true;\n      var editFuncForm = this.editFuncForm;\n      Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"patchEditMenuFunction\"])()({\n        menuCode: this.functionMenu.menuCode,\n        menuName: editFuncForm.menuName,\n        functionName: editFuncForm.functionName,\n        url: editFuncForm.url,\n        httpMethod: editFuncForm.httpMethod,\n        functionCode: editFuncForm.functionCode // ...this.editFuncForm\n\n      }).then(function (data) {\n        if (data.code == \"00\") {\n          _this2.Message_pc({\n            type: \"success\",\n            message: \"恭喜您，功能更改成功!\"\n          }); // 更新数据\n\n\n          _this2.searchCondition = {\n            // 查询条件\n            menuCode: _this2.functionMenu.menuCode,\n            page: 1,\n            limit: 10\n          };\n\n          _this2.seachstartHandle();\n\n          _this2.editFuncFormVisible = false;\n        } else {\n          _this2.Message_pc({\n            type: \"warning\",\n            message: data.msg\n          });\n        }\n\n        _this2.saveLoading = false;\n      });\n    },\n    // 新增菜单功能类型改变\n    functionTypeChange: function functionTypeChange(data) {\n      if (data.value == \"\") {\n        return false;\n      }\n\n      var menuCode = this.functionMenu.menuCode;\n      var functionName = \"\";\n      var url = \"/\" + menuCode;\n\n      if (data == \"add\") {\n        this.addFuncForm.httpMethod = \"POST\";\n        functionName = \"新增\";\n      } else if (data == \"edit\") {\n        functionName = \"修改\";\n        this.addFuncForm.httpMethod = \"PATCH\";\n      } else if (data == \"page\") {\n        functionName = \"分页查询\";\n        this.addFuncForm.httpMethod = \"GET\";\n        url += \"/page\";\n      } else if (data == \"delete\") {\n        functionName = \"删除\";\n        this.addFuncForm.httpMethod = \"DELETE\";\n        url += \"/delete/*\";\n      }\n\n      this.addFuncForm.functionName = functionName;\n      this.addFuncForm.url = url;\n      this.addFuncForm.functionCode = menuCode + \"_\" + data;\n    },\n    // 保存新增功能\n    addFuncSave: function addFuncSave() {\n      var _this3 = this;\n\n      this.saveLoading = true;\n      Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"postAddMenuFunction\"])()({\n        menuCode: this.functionMenu.menuCode,\n        menuName: this.addFuncForm.menuName,\n        \"function-type\": this.addFuncForm.functiontype,\n        functionName: this.addFuncForm.functionName,\n        url: this.addFuncForm.url,\n        httpMethod: this.addFuncForm.httpMethod,\n        functionCode: this.addFuncForm.functionCode\n      }).then(function (data) {\n        if (data.code == \"00\") {\n          _this3.Message_pc({\n            type: \"success\",\n            message: \"恭喜您，添加功能成功!\"\n          }); // 更新数据\n\n\n          _this3.searchCondition = {\n            menuCode: _this3.functionMenu.menuCode,\n            page: 1,\n            limit: 10\n          };\n\n          _this3.seachstartHandle();\n\n          _this3.addFuncFormVisible = false;\n        } else {\n          _this3.Message_pc({\n            type: \"warning\",\n            message: data.msg\n          });\n        }\n\n        _this3.saveLoading = false;\n      });\n    },\n    removeHoverDom: function removeHoverDom(treeId, treeNode) {\n      $(\"#addBtn_\" + treeNode.tId).unbind().remove();\n    },\n    addHoverDom: function addHoverDom(treeId, treeNode) {\n      var _this4 = this;\n\n      this.treeNodeObj = treeNode;\n      var sObj = $(\"#\" + treeNode.tId + \"_span\");\n\n      if (!treeNode.isParent || treeNode.editNameFlag || $(\"#addBtn_\" + treeNode.tId).length > 0) {\n        return;\n      }\n\n      var addStr = \"<span class='button add' id='addBtn_\" + treeNode.tId + \"' title='添加菜单' onfocus='this.blur();'></span>\";\n      sObj.after(addStr);\n      var btn = $(\"#addBtn_\" + treeNode.tId);\n\n      if (btn) {\n        btn.bind(\"click\", function () {\n          // 点击新增按钮\n          // treeNode.menuCode\n          _this4.addForm.parentCode = treeNode.menuCode;\n          _this4.addFormVisible = true;\n          return false;\n        });\n      }\n    },\n    addSave: function addSave() {\n      var _this5 = this;\n\n      // 保存新增信息\n      this.saveLoading = true;\n      var addForm = this.addForm;\n      Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"patchAddMenuTree\"])()({\n        menuName: addForm.menuName,\n        parentCode: addForm.parentCode,\n        menuCode: addForm.menuCode,\n        isParent: addForm.isParent,\n        url: addForm.url\n      }).then(function (data) {\n        if (data.code == \"00\") {\n          _this5.Message_pc({\n            type: \"success\",\n            message: \"恭喜您，新增菜单成功!\"\n          });\n\n          _this5.zTreeObj.reAsyncChildNodes(_this5.treeNodeObj, \"refresh\");\n\n          _this5.zTreeObj.expandNode(_this5.treeNodeObj, null, null, null);\n\n          _this5.addFormVisible = false;\n        } else {\n          _this5.Message_pc({\n            type: \"warning\",\n            message: data.msg\n          });\n        }\n\n        _this5.saveLoading = false;\n      });\n    },\n    // 树加载成功之后展开根节点\n    zTreeOnAsyncSuccess: function zTreeOnAsyncSuccess(event, treeId, treeNode, msg) {\n      var _this6 = this;\n\n      this.$nextTick(function () {\n        var treeObj = $.fn.zTree.getZTreeObj(_this6.treeId);\n        var nodes = treeObj.getNodes();\n\n        for (var i = 0; i < nodes.length; i++) {\n          treeObj.expandNode(nodes[i], true);\n        }\n      });\n    },\n    // 点击编辑按钮\n    beforeEditName: function beforeEditName(treeId, treeNode) {\n      // this.resetForm(\"editForm\");\n      this.editForm = {};\n      this.treeNodeObj = treeNode.getParentNode();\n      this.editForm = treeNode; // editForm.isParent = false;\n\n      if (treeNode.isParent) {\n        this.editForm.editOptions = [{\n          value: true,\n          label: \"是\"\n        }, {\n          value: false,\n          label: \"否\"\n        }];\n      } else {\n        this.editForm.editOptions = [{\n          value: false,\n          label: \"是\"\n        }, {\n          value: true,\n          label: \"否\"\n        }];\n      }\n\n      this.editFormVisible = true;\n    },\n    editSave: function editSave() {\n      var _this7 = this;\n\n      this.saveLoading = true;\n      var editForm = this.editForm;\n      Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"patchEditMenuTree\"])()({\n        menuName: editForm.menuName,\n        menuCode: editForm.menuCode,\n        isParent: editForm.isParent,\n        url: editForm.url\n      }).then(function (data) {\n        if (data.code == \"00\") {\n          _this7.Message_pc({\n            type: \"success\",\n            message: \"恭喜您，更改成功!\"\n          });\n\n          _this7.zTreeObj.reAsyncChildNodes(_this7.treeNodeObj, \"refresh\");\n\n          _this7.zTreeObj.expandNode(_this7.treeNodeObj, null, null, null);\n\n          _this7.editFormVisible = false;\n        } else {\n          _this7.Message_pc({\n            type: \"warning\",\n            message: data.msg\n          });\n        }\n\n        _this7.saveLoading = false;\n      });\n    },\n    // 点击删除按钮\n    beforeRemove: function beforeRemove(treeId, treeNode) {\n      var _this8 = this;\n\n      if (treeNode.isParent && treeNode.children != null && treeNode.children.length != 0) {\n        this.Message_pc({\n          message: \"操作失败: 请先删除该菜单下的子菜单\",\n          type: \"warning\"\n        });\n        return false;\n      } // return false;\n\n\n      this.$confirm(\"确定删除吗？\", \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n        type: \"warning\"\n      }).then(function () {\n        Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"deleteMenuTree\"])()(treeNode.menuCode).then(function (data) {\n          if (data.code == \"00\") {\n            _this8.Message_pc({\n              type: \"success\",\n              message: \"删除成功!\"\n            });\n\n            _this8.zTreeObj.removeNode(treeNode, false);\n          } else {\n            _this8.Message_pc({\n              type: \"warning\",\n              message: data.msg\n            });\n          }\n        });\n      }).catch(function () {\n        _this8.Message_pc({\n          type: \"info\",\n          message: \"已取消删除\"\n        });\n      });\n      return false;\n    },\n    zTreeOnClick: function zTreeOnClick(event, treeId, treeNode) {\n      if (treeNode.isParent) {\n        this.zTreeObj.expandNode(treeNode, null, null, null);\n      } else {\n        this.functionMenu = treeNode; // 同步当前所点击的菜单menuCode\n\n        this.menuFunctionParentNode = treeNode; // 更新数据\n\n        this.$set(this.searchCondition, \"menuCode\", treeNode.menuCode);\n        this.seachstartHandle(); // 显示表格\n\n        this.tableVisible = true;\n      }\n\n      return false;\n    },\n    // 加载树列表\n    rootTreeload: function rootTreeload(node, resolve) {\n      Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"getMenuTrees\"])()({\n        _: new Date() * 1\n      }).then(function (data) {});\n    },\n\n    /**移动知识节点前处理*/\n    zTreeBeforeDrag: function zTreeBeforeDrag(treeId, treeNodes) {// console.log('前------------');\n      // console.log(treeId)\n    },\n\n    /**拖拽释放之后结束前执行  */\n    zTreeBeforeDrop: function zTreeBeforeDrop(treeId, treeNodes, targetNode, moveType_) {\n      var _this9 = this;\n\n      var menuParentCode = treeNodes[0].parentCode;\n      var targetParentCode = targetNode.parentCode;\n      var menuCode = treeNodes[0].menuCode;\n      var menuName = treeNodes[0].menuName;\n      var targetCode = targetNode.menuCode;\n      var moveType = moveType_;\n\n      if (treeNodes[0].level != targetNode.level || moveType == \"inner\" || menuParentCode != targetParentCode) {\n        return false;\n      } else {\n        Object(_src_apis__WEBPACK_IMPORTED_MODULE_4__[\"dropMenuTree\"])()({\n          menuCode: menuCode,\n          targetCode: targetCode,\n          moveType: moveType\n        }).then(function (res) {\n          if (res.code == \"00\") {\n            _this9.Message_pc({\n              message: \"\\u83DC\\u5355'\".concat(menuName, \"'\\u4F4D\\u7F6E\\u79FB\\u52A8\\u6210\\u529F\"),\n              type: \"success\",\n              center: true\n            });\n          }\n        });\n      }\n    },\n    initFn: function initFn() {\n      var _this10 = this;\n\n      // 配置ztree初始化属性，异步加载路径\n      this.setting = {\n        async: {\n          enable: true,\n          url: this.oaIp + \"/menu/tree\",\n          type: \"get\",\n          dataType: \"json\",\n          autoParam: [\"menuCode\"]\n        },\n        view: {\n          addHoverDom: this.addHoverDom,\n          removeHoverDom: this.removeHoverDom,\n          selectedMulti: false\n        },\n        check: {\n          enable: true\n        },\n        data: {\n          simpleData: {\n            enable: true,\n            idKey: \"menuCode\",\n            pIdKey: \"parentCode\"\n          },\n          keep: {\n            leaf: false,\n            parent: true\n          },\n          key: {\n            name: \"menuName\"\n          }\n        },\n        edit: {\n          enable: true\n        },\n        callback: {\n          onAsyncSuccess: this.zTreeOnAsyncSuccess,\n          beforeEditName: this.beforeEditName,\n          beforeRemove: this.beforeRemove,\n          onClick: this.zTreeOnClick,\n          beforeDrag: this.zTreeBeforeDrag,\n          beforeDrop: this.zTreeBeforeDrop\n        }\n      };\n      this.$nextTick(function () {\n        _this10.zTreeObj = $.fn.zTree.init($(\"#rootTreeNenu\"), _this10.setting);\n      });\n    }\n  },\n  computed: {\n    oaIp: function oaIp() {\n      // nginx配置的路由\n      return this.$store.state.Base.oaIp;\n    }\n  },\n  mounted: function mounted() {\n    this.initFn();\n  }\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPyEuL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8hLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/IS4vc3JjL3ZpZXdzL2FkbWluL3VzZXJNZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyYuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vdXNlck1lbnUudnVlPzAwYzgiXSwic291cmNlc0NvbnRlbnQiOlsiPHRlbXBsYXRlPlxuICA8ZGl2IGNsYXNzPVwiYWRtaW4tcGFnZVwiPlxuICAgIDxkaXYgY2xhc3M9XCJhZG1pbi1tYWluLWJveCB0cmVlLXRhYmxlLWJveFwiPlxuICAgICAgPGRpdiBjbGFzcz1cInRyZWUtYm94XCI+XG4gICAgICAgIDwhLS0gPGVsLXRyZWUgOnByb3BzPVwiZGF0YVRyZWVQcm9wc1wiIHJlbmRlci1hZnRlci1leHBhbmQ9XCJ0cnVlXCIgQG5vZGUtY2xpY2s9XCJ0cmVlQ2xpY2tcIiA6bG9hZD1cInJvb3RUcmVlbG9hZFwiIGxhenkgc2hvdy1jaGVja2JveD4gLS0+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ6VHJlZURlbW9CYWNrZ3JvdW5kIGxlZnRcIj5cbiAgICAgICAgICA8dWwgaWQ9XCJyb290VHJlZU5lbnVcIiBjbGFzcz1cInp0cmVlXCI+PC91bD5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1ib3hcIiB2LXNob3c9XCJ0YWJsZVZpc2libGVcIj5cbiAgICAgICAgPGVsLWJ1dHRvbi1ncm91cCBjbGFzcz1cImJ1dHRvbi1ncm91cFwiPlxuICAgICAgICAgIDxlbC1idXR0b24gY2xhc3M9XCJteWJ1dHRvblwiIEBjbGljaz1cImFkZEZ1bmNEaWFsb2dcIiBzaXplPVwic21hbGxcIiB0eXBlPVwicHJpbWFyeVwiIGljb249XCJlbC1pY29uLXBsdXNcIj7mlrDlop48L2VsLWJ1dHRvbj5cbiAgICAgICAgPC9lbC1idXR0b24tZ3JvdXA+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJ0YWJsZS1jb250YWluZXJcIj5cbiAgICAgICAgPG15cC1kYXRhLXBhZ2UgOmFjdGlvblVybD1cImFjdGlvblVybFwiIEBwYWdlY291bnQ9XCJwYWdlY291bnRIYW5kbGVcIiBAcGFnZWxpbWl0PVwicGFnZWxpbWl0SGFuZGxlXCIgQG9wZXJhdGlvbj1cIm9wZXJhdGlvbkhhbmRsZVwiIHJlZj1cImRhdGFUYWJsZVwiIDp0YWJsZURhdGFJbml0PVwidGFibGVEYXRhXCIgOmRhdGFMaXN0PVwiZGF0YUxpc3RcIiA6cGFnZT1cInBvc3RQYWdlXCIgOmxpbWl0PVwicG9zdExpbWl0XCIgOnNlYXJjaD1cInNlYXJjaENvbmRpdGlvblwiIDpkYXRhQ291bnQ9XCJkYXRhQ291bnRcIiA6bG9hZGluZz1cInRhYmxlTGFkaW5nXCI+PC9teXAtZGF0YS1wYWdlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICAgIDwhLS0g5paw5aKe5Yqf6IO9IHN0YXJ0IC0tPlxuICAgIDxlbC1kaWFsb2cgdi1kaWFsb2dEcmFnIHRpdGxlPVwi5paw5aKe5Yqf6IO9XCIgY2VudGVyIDp2aXNpYmxlLnN5bmM9XCJhZGRGdW5jRm9ybVZpc2libGVcIiB3aWR0aD1cIjUwMHB4XCI+XG4gICAgICA8ZWwtZm9ybSBzaXplPVwic21hbGxcIiA6bW9kZWw9XCJhZGRGdW5jRm9ybVwiIHJlZj1cImFkZEZ1bmNGb3JtXCIgOnJ1bGVzPVwiYWRkRnVuY0Zvcm1SdWxlc1wiPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5b2S5bGe6I+c5Y2VXCIgcHJvcD1cIm1lbnVOYW1lXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgOmRpc2FibGVkPVwidHJ1ZVwiIHYtbW9kZWw9XCJhZGRGdW5jRm9ybS5tZW51TmFtZVwiIGF1dG8tY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuWKn+iDveexu+Wei1wiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLXNlbGVjdCBAY2hhbmdlPVwiZnVuY3Rpb25UeXBlQ2hhbmdlXCIgcHJvcD1cImZ1bmN0aW9udHlwZVwiIHYtbW9kZWw9XCJhZGRGdW5jRm9ybS5mdW5jdGlvbnR5cGVcIiBwbGFjZWhvbGRlcj1cIuWKn+iDveexu+Wei1wiPlxuICAgICAgICAgICAgPGVsLW9wdGlvbiB2LWZvcj1cIml0ZW0gaW4gYWRkRnVuY0Zvcm0udHlwZU9wdGlvbnNcIiA6a2V5PVwiaXRlbS52YWx1ZVwiIDpsYWJlbD1cIml0ZW0ubGFiZWxcIiA6dmFsdWU9XCJpdGVtLnZhbHVlXCI+PC9lbC1vcHRpb24+XG4gICAgICAgICAgPC9lbC1zZWxlY3Q+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5Yqf6IO95ZCN56ewXCIgcHJvcD1cImZ1bmN0aW9uTmFtZVwiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9XCJhZGRGdW5jRm9ybS5mdW5jdGlvbk5hbWVcIiBhdXRvLWNvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLlip/og711cmxcIiBwcm9wPVwidXJsXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD1cImFkZEZ1bmNGb3JtLnVybFwiIGF1dG8tY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuivt+axguaWueazlVwiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLXNlbGVjdCBwcm9wPVwiaHR0cE1ldGhvZFwiIHYtbW9kZWw9XCJhZGRGdW5jRm9ybS5odHRwTWV0aG9kXCIgcGxhY2Vob2xkZXI9XCLor7fmsYLmlrnms5VcIj5cbiAgICAgICAgICAgIDxlbC1vcHRpb24gdi1mb3I9XCJpdGVtIGluIGh0dHBNZXRob2RPcHRpb25zXCIgOmtleT1cIml0ZW0udmFsdWVcIiA6bGFiZWw9XCJpdGVtLmxhYmVsXCIgOnZhbHVlPVwiaXRlbS52YWx1ZVwiPjwvZWwtb3B0aW9uPlxuICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuWKn+iDvee8luWPt1wiIHByb3A9XCJmdW5jdGlvbkNvZGVcIiA6bGFiZWwtd2lkdGg9XCJmb3JtTGFiZWxXaWR0aFwiPlxuICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPVwiYWRkRnVuY0Zvcm0uZnVuY3Rpb25Db2RlXCIgYXV0by1jb21wbGV0ZT1cIm9mZlwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgPC9lbC1mb3JtPlxuICAgICAgPGRpdiBzbG90PVwiZm9vdGVyXCIgY2xhc3M9XCJkaWFsb2ctZm9vdGVyXCI+XG4gICAgICAgIDxlbC1idXR0b24gQGNsaWNrPVwiYWRkRnVuY0Zvcm1WaXNpYmxlID0gZmFsc2VcIj7lj5Yg5raIPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gOmxvYWRpbmc9XCJzYXZlTG9hZGluZ1wiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwiYWRkRnVuY1NhdmUoJ2FkZEZ1bmNGb3JtJylcIj7noa4g5a6aPC9lbC1idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2VsLWRpYWxvZz5cbiAgICA8IS0tIOaWsOWinuWKn+iDvSBlbmQgLS0+XG4gICAgPCEtLSDlip/og73nvJbovpEgc3RhcnQgLS0+XG4gICAgPGVsLWRpYWxvZyB2LWRpYWxvZ0RyYWcgdGl0bGU9XCLkv67mlLnlip/og71cIiBjZW50ZXIgOnZpc2libGUuc3luYz1cImVkaXRGdW5jRm9ybVZpc2libGVcIiB3aWR0aD1cIjUwMHB4XCI+XG4gICAgICA8ZWwtZm9ybSBzaXplPVwic21hbGxcIiA6bW9kZWw9XCJlZGl0RnVuY0Zvcm1cIiByZWY9XCJlZGl0RnVuY0Zvcm1cIiA6cnVsZXM9XCJhZGRGb3JtUnVsZXNcIj5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuW9kuWxnuiPnOWNlVwiIHByb3A9XCJtZW51TmFtZVwiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLWlucHV0IDpkaXNhYmxlZD1cInRydWVcIiB2LW1vZGVsPVwiZWRpdEZ1bmNGb3JtLm1lbnVOYW1lXCIgYXV0by1jb21wbGV0ZT1cIm9mZlwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5Yqf6IO95ZCN56ewXCIgcHJvcD1cImZ1bmN0aW9uTmFtZVwiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9XCJlZGl0RnVuY0Zvcm0uZnVuY3Rpb25OYW1lXCIgYXV0by1jb21wbGV0ZT1cIm9mZlwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi5Yqf6IO9dXJsXCIgcHJvcD1cInVybFwiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9XCJlZGl0RnVuY0Zvcm0udXJsXCIgYXV0by1jb21wbGV0ZT1cIm9mZlwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi6K+35rGC5pa55rOVXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtc2VsZWN0IHByb3A9XCJodHRwTWV0aG9kXCIgdi1tb2RlbD1cImVkaXRGdW5jRm9ybS5odHRwTWV0aG9kXCIgcGxhY2Vob2xkZXI9XCLmmK/lkKbmnInkuIvnuqfoj5zljZVcIj5cbiAgICAgICAgICAgIDxlbC1vcHRpb24gdi1mb3I9XCJpdGVtIGluIGh0dHBNZXRob2RPcHRpb25zXCIgOmtleT1cIml0ZW0udmFsdWVcIiA6bGFiZWw9XCJpdGVtLmxhYmVsXCIgOnZhbHVlPVwiaXRlbS52YWx1ZVwiPjwvZWwtb3B0aW9uPlxuICAgICAgICAgIDwvZWwtc2VsZWN0PlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuWKn+iDvee8luWPt1wiIHByb3A9XCJmdW5jdGlvbkNvZGVcIiA6bGFiZWwtd2lkdGg9XCJmb3JtTGFiZWxXaWR0aFwiPlxuICAgICAgICAgIDxlbC1pbnB1dCA6ZGlzYWJsZWQ9XCJ0cnVlXCIgdi1tb2RlbD1cImVkaXRGdW5jRm9ybS5mdW5jdGlvbkNvZGVcIiBhdXRvLWNvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8L2VsLWZvcm0+XG4gICAgICA8ZGl2IHNsb3Q9XCJmb290ZXJcIiBjbGFzcz1cImRpYWxvZy1mb290ZXJcIj5cbiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJlZGl0RnVuY0Zvcm1WaXNpYmxlID0gZmFsc2VcIj7lj5Yg5raIPC9lbC1idXR0b24+XG4gICAgICAgIDxlbC1idXR0b24gOmxvYWRpbmc9XCJzYXZlTG9hZGluZ1wiIHR5cGU9XCJwcmltYXJ5XCIgQGNsaWNrPVwiZWRpdEZ1bmNTYXZlKCdlZGl0RnVuY0Zvcm1WaXNpYmxlJylcIj7noa4g5a6aPC9lbC1idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICA8L2VsLWRpYWxvZz5cbiAgICA8IS0tIOWKn+iDvee8lui+kSBlbmQgLS0+XG4gICAgPCEtLSDmlrDlop7oj5zljZUgc3RhcnQgLS0+XG4gICAgPGVsLWRpYWxvZyB2LWRpYWxvZ0RyYWcgdGl0bGU9XCLmlrDlop7oj5zljZVcIiBjZW50ZXIgOnZpc2libGUuc3luYz1cImFkZEZvcm1WaXNpYmxlXCIgd2lkdGg9XCI1MDBweFwiPlxuICAgICAgPGVsLWZvcm0gc2l6ZT1cInNtYWxsXCIgOm1vZGVsPVwiYWRkRm9ybVwiIHJlZj1cImFkZEZvcm1cIiA6cnVsZXM9XCJhZGRGb3JtUnVsZXNcIj5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuiPnOWNleWQjeensFwiIHByb3A9XCJtZW51TmFtZVwiIDpsYWJlbC13aWR0aD1cImZvcm1MYWJlbFdpZHRoXCI+XG4gICAgICAgICAgPGVsLWlucHV0IHYtbW9kZWw9XCJhZGRGb3JtLm1lbnVOYW1lXCIgYXV0by1jb21wbGV0ZT1cIm9mZlwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi6I+c5Y2V57yW5Y+3XCIgcHJvcD1cIm1lbnVDb2RlXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD1cImFkZEZvcm0ubWVudUNvZGVcIiBhdXRvLWNvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1mb3JtLWl0ZW0gbGFiZWw9XCLmmK/lkKbmnInkuIvnuqfoj5zljZVcIj5cbiAgICAgICAgICA8ZWwtc3dpdGNoIHYtbW9kZWw9XCJhZGRGb3JtLmlzUGFyZW50XCIgYWN0aXZlLXZhbHVlPVwiVFJVRVwiIGluYWN0aXZlLXZhbHVlPVwiRkFMU0VcIiBhY3RpdmUtdGV4dD1cIuaYr1wiIGluYWN0aXZlLXRleHQ9XCLlkKZcIj48L2VsLXN3aXRjaD5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICAgIDxlbC1mb3JtLWl0ZW0gdi1pZj1cIihhZGRGb3JtLmlzUGFyZW50PT0nVFJVRSc/ZmFsc2U6dHJ1ZSlcIiBsYWJlbD1cIuiPnOWNlXVybFwiIHByb3A9XCJ1cmxcIiA6bGFiZWwtd2lkdGg9XCJmb3JtTGFiZWxXaWR0aFwiPlxuICAgICAgICAgIDxlbC1pbnB1dCB2LW1vZGVsPVwiYWRkRm9ybS51cmxcIiBhdXRvLWNvbXBsZXRlPVwib2ZmXCI+PC9lbC1pbnB1dD5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8L2VsLWZvcm0+XG4gICAgICA8ZGl2IHNsb3Q9XCJmb290ZXJcIiBjbGFzcz1cImRpYWxvZy1mb290ZXJcIj5cbiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJhZGRGb3JtVmlzaWJsZSA9IGZhbHNlXCI+5Y+WIOa2iDwvZWwtYnV0dG9uPlxuICAgICAgICA8ZWwtYnV0dG9uIDpsb2FkaW5nPVwic2F2ZUxvYWRpbmdcIiB0eXBlPVwicHJpbWFyeVwiIEBjbGljaz1cImFkZFNhdmUoJ2FkZEZvcm0nKVwiPuehriDlrpo8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZWwtZGlhbG9nPlxuICAgIDwhLS0g5paw5aKe6I+c5Y2VIGVuZCAtLT5cbiAgICA8IS0tIOe8lui+kSBzdGFydCAtLT5cbiAgICA8ZWwtZGlhbG9nIHYtZGlhbG9nRHJhZyB0aXRsZT1cIuS/ruaUueiPnOWNlVwiIGNlbnRlciA6dmlzaWJsZS5zeW5jPVwiZWRpdEZvcm1WaXNpYmxlXCIgd2lkdGg9XCI1MDBweFwiPlxuICAgICAgPGVsLWZvcm0gc2l6ZT1cInNtYWxsXCIgOm1vZGVsPVwiZWRpdEZvcm1cIiByZWY9XCJlZGl0Rm9ybVwiIDpydWxlcz1cImFkZEZvcm1SdWxlc1wiPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi6I+c5Y2V5ZCN56ewXCIgcHJvcD1cIm1lbnVOYW1lXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD1cImVkaXRGb3JtLm1lbnVOYW1lXCIgYXV0by1jb21wbGV0ZT1cIm9mZlwiPjwvZWwtaW5wdXQ+XG4gICAgICAgIDwvZWwtZm9ybS1pdGVtPlxuICAgICAgICA8ZWwtZm9ybS1pdGVtIGxhYmVsPVwi6I+c5Y2V57yW5Y+3XCIgcHJvcD1cIm1lbnVDb2RlXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgOmRpc2FibGVkPVwidHJ1ZVwiIHYtbW9kZWw9XCJlZGl0Rm9ybS5tZW51Q29kZVwiIGF1dG8tY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSB2LWlmPVwiIWVkaXRGb3JtLmlzUGFyZW50XCIgbGFiZWw9XCLoj5zljZV1cmxcIiBwcm9wPVwidXJsXCIgOmxhYmVsLXdpZHRoPVwiZm9ybUxhYmVsV2lkdGhcIj5cbiAgICAgICAgICA8ZWwtaW5wdXQgdi1tb2RlbD1cImVkaXRGb3JtLnVybFwiIGF1dG8tY29tcGxldGU9XCJvZmZcIj48L2VsLWlucHV0PlxuICAgICAgICA8L2VsLWZvcm0taXRlbT5cbiAgICAgICAgPGVsLWZvcm0taXRlbSBsYWJlbD1cIuaYr+WQpuacieS4i+e6p+iPnOWNlVwiPlxuICAgICAgICAgIDwhLS0ge3tlZGl0Rm9ybS5pc1BhcmVudH19XG4gICAgICAgICAgPGVsLXN3aXRjaCB2LW1vZGVsPVwiZWRpdEZvcm0uaXNQYXJlbnRcIiBhY3RpdmUtdmFsdWU9XCJ0cnVlXCIgaW5hY3RpdmUtdmFsdWU9XCJmYWxzZVwiIGFjdGl2ZS10ZXh0PVwi5pivXCIgaW5hY3RpdmUtdGV4dD1cIuWQplwiPlxuICAgICAgICAgIDwvZWwtc3dpdGNoPi0tPlxuICAgICAgICAgIDxlbC1zZWxlY3QgOmRpc2FibGVkPVwidHJ1ZVwiIHByb3A9XCJpc1BhcmVudFwiIHYtbW9kZWw9XCJlZGl0Rm9ybS5pc1BhcmVudFwiIHBsYWNlaG9sZGVyPVwi5piv5ZCm5pyJ5LiL57qn6I+c5Y2VXCI+XG4gICAgICAgICAgICA8ZWwtb3B0aW9uIHYtZm9yPVwiaXRlbSBpbiBlZGl0T3B0aW9uc1Jlc3VsdFwiIDprZXk9XCJpdGVtLnZhbHVlXCIgOmxhYmVsPVwiaXRlbS5sYWJlbFwiIDp2YWx1ZT1cIml0ZW0udmFsdWVcIj48L2VsLW9wdGlvbj5cbiAgICAgICAgICA8L2VsLXNlbGVjdD5cbiAgICAgICAgPC9lbC1mb3JtLWl0ZW0+XG4gICAgICA8L2VsLWZvcm0+XG4gICAgICA8ZGl2IHNsb3Q9XCJmb290ZXJcIiBjbGFzcz1cImRpYWxvZy1mb290ZXJcIj5cbiAgICAgICAgPGVsLWJ1dHRvbiBAY2xpY2s9XCJlZGl0Rm9ybVZpc2libGUgPSBmYWxzZVwiPuWPliDmtog8L2VsLWJ1dHRvbj5cbiAgICAgICAgPGVsLWJ1dHRvbiA6bG9hZGluZz1cInNhdmVMb2FkaW5nXCIgdHlwZT1cInByaW1hcnlcIiBAY2xpY2s9XCJlZGl0U2F2ZSgnZWRpdEZvcm0nKVwiPuehriDlrpo8L2VsLWJ1dHRvbj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZWwtZGlhbG9nPlxuICAgIDwhLS0g57yW6L6RIGVuZCAtLT5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPCEtLSBBZGQgXCJzY29wZWRcIiBhdHRyaWJ1dGUgdG8gbGltaXQgQ1NTIHRvIHRoaXMgY29tcG9uZW50IG9ubHkgLS0+XG5cbjxzdHlsZSBsYW5nPSdzY3NzJyBzY29wZWQ+XG5AaW1wb3J0IFwiLi4vLi4vY29tbW9uL3pUcmVlL2Nzcy9tZXRyb1N0eWxlL21ldHJvU3R5bGUuY3NzXCI7XG4udHJlZS10YWJsZS1ib3gge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAudHJlZS1ib3gge1xuICAgIGZsZXgtc2hyaW5rOiAwO1xuICAgIG92ZXJmbG93OiBhdXRvO1xuICAgIGZsZXg6MCAwIDI1MHB4O1xuICB9XG4gIC50YWJsZS1ib3gge1xuICAgIHBvc2l0aW9uOnJlbGF0aXZlO1xuICAgIHdpZHRoOjEwMCU7XG4gICAgcGFkZGluZzogMTBweCAwO1xuICAgIC50YWJsZS1jb250YWluZXJ7XG4gICAgICBmbGV4OjE7XG4gICAgICBwb3NpdGlvbjphYnNvbHV0ZTtcbiAgICAgIGJvdHRvbTowO1xuICAgICAgbGVmdDowO1xuICAgICAgcmlnaHQ6MDtcbiAgICAgIHRvcDogNjBweDtcbiAgICB9XG4gIH1cbn1cbjwvc3R5bGU+XG48c2NyaXB0PlxuaW1wb3J0IFwiQHNyYy9jb21tb24velRyZWUvanMvanF1ZXJ5Lnp0cmVlLmFsbC5qc1wiO1xuaW1wb3J0IERhdGFQYWdlIGZyb20gXCJAc3JjL2NvbXBvbmVudHMvRGF0YVBhZ2VcIjtcbmltcG9ydCB7IG1peGluc1BjIH0gZnJvbSBcIkBzcmMvY29tbW9uL21peGluc1BjXCI7XG5pbXBvcnQgeyBtaXhpbkRhdGFUYWJsZSB9IGZyb20gXCJAc3JjL2NvbXBvbmVudHMvRGF0YVBhZ2UvZGF0YVBhZ2VcIjtcbmltcG9ydCB7XG4gIGdldE1lbnVUcmVlcyxcbiAgZHJvcE1lbnVUcmVlLFxuICBnZXRNZW51VHJlZVBhZ2UsXG4gIHBhdGNoRWRpdE1lbnVUcmVlLFxuICBwYXRjaEFkZE1lbnVUcmVlLFxuICBkZWxldGVNZW51VHJlZSxcbiAgcG9zdEFkZE1lbnVGdW5jdGlvbixcbiAgcGF0Y2hFZGl0TWVudUZ1bmN0aW9uLFxuICBkZWxldGVNZW51RnVuY3Rpb25cbn0gZnJvbSBcIkBzcmMvYXBpc1wiO1xuZXhwb3J0IGRlZmF1bHQge1xuICBuYW1lOiBcInVzZXJNZW51XCIsXG4gIGNvbXBvbmVudHM6IHtcbiAgICBcIm15cC1kYXRhLXBhZ2VcIjogRGF0YVBhZ2UgLy8g5pWw5o2u5YiX6KGo57uE5Lu2XG4gIH0sXG4gIG1peGluczogW21peGluRGF0YVRhYmxlLCBtaXhpbnNQY10sXG4gIGRhdGEoKSB7XG4gICAgdmFyIGh0dHBNZXRob2RPcHRpb25zID0gW1xuICAgICAge1xuICAgICAgICB2YWx1ZTogXCJHRVRcIixcbiAgICAgICAgbGFiZWw6IFwiR0VUXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiBcIlBPU1RcIixcbiAgICAgICAgbGFiZWw6IFwiUE9TVFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB2YWx1ZTogXCJQQVRDSFwiLFxuICAgICAgICBsYWJlbDogXCJQQVRDSFwiXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICB2YWx1ZTogXCJERUxFVEVcIixcbiAgICAgICAgbGFiZWw6IFwiREVMRVRFXCJcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHZhbHVlOiBcIlBVVFwiLFxuICAgICAgICBsYWJlbDogXCJQVVRcIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IFwiSEVBRE5cIixcbiAgICAgICAgbGFiZWw6IFwiSEVBRE5cIlxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgdmFsdWU6IFwiT1BUSU9OU1wiLFxuICAgICAgICBsYWJlbDogXCJPUFRJT05TXCJcbiAgICAgIH1cbiAgICBdO1xuICAgIHJldHVybiB7XG4gICAgICBzZXR0aW5nOiB7fSxcbiAgICAgIGRhdGFMaXN0OiBbXSxcbiAgICAgIHRhYmxlVmlzaWJsZTogZmFsc2UsXG4gICAgICBlZGl0RnVuY0Zvcm1WaXNpYmxlOiBmYWxzZSxcbiAgICAgIGh0dHBNZXRob2RPcHRpb25zOiBodHRwTWV0aG9kT3B0aW9ucyxcbiAgICAgIGVkaXRGdW5jRm9ybToge30sXG4gICAgICBmdW5jdGlvbk1lbnU6IHt9LFxuICAgICAgdHJlZU5vZGVPYmo6IFwiXCIsXG4gICAgICB0cmVlSWQ6IFwicm9vdFRyZWVOZW51XCIsXG4gICAgICB6VHJlZU9iajogXCJcIixcbiAgICAgIGFkZEZ1bmNGb3JtVmlzaWJsZTogZmFsc2UsXG4gICAgICBhZGRGdW5jRm9ybVJ1bGVzOiB7fSxcbiAgICAgIGFkZEZ1bmNGb3JtOiB7XG4gICAgICAgIG1lbnVOYW1lOiBcIlwiLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IFwiXCIsXG4gICAgICAgIHVybDogXCJcIixcbiAgICAgICAgaHR0cE1ldGhvZDogXCJcIixcbiAgICAgICAgZnVuY3Rpb25Db2RlOiBcIlwiLFxuICAgICAgICAvLyDlip/og73nsbvlnotcbiAgICAgICAgdHlwZU9wdGlvbnM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZTogXCJhZGRcIixcbiAgICAgICAgICAgIGxhYmVsOiBcIuaWsOWinlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZTogXCJlZGl0XCIsXG4gICAgICAgICAgICBsYWJlbDogXCLkv67mlLlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IFwicGFnZVwiLFxuICAgICAgICAgICAgbGFiZWw6IFwi5YiG6aG15p+l6K+iXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBcImRlbGV0ZVwiLFxuICAgICAgICAgICAgbGFiZWw6IFwi5Yig6ZmkXCJcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgICAgLy8g6K+35rGC5pa55rOVXG4gICAgICB9LFxuICAgICAgbWVudUZ1bmN0aW9uUGFyZW50Tm9kZTogXCJcIixcbiAgICAgIGFkZEZvcm1WaXNpYmxlOiBmYWxzZSxcbiAgICAgIGFkZEZvcm06IHtcbiAgICAgICAgYWRkT3B0aW9uczogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiB0cnVlLFxuICAgICAgICAgICAgbGFiZWw6IFwi5pivXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgIGxhYmVsOiBcIuWQplwiXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9LFxuICAgICAgZWRpdEZvcm1WaXNpYmxlOiBmYWxzZSxcbiAgICAgIGVkaXRGb3JtOiB7XG4gICAgICAgIGVkaXRPcHRpb25zOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICBsYWJlbDogXCLmmK9cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWw6IFwi5ZCmXCJcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBlZGl0T3B0aW9uc1Jlc3VsdDogW1xuICAgICAgICB7XG4gICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgbGFiZWw6IFwi5pivXCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICBsYWJlbDogXCLlkKZcIlxuICAgICAgICB9XG4gICAgICBdLFxuXG4gICAgICBhZGRGb3JtUnVsZXM6IHt9LFxuICAgICAgZm9ybUxhYmVsV2lkdGg6IFwiMTAwcHhcIixcbiAgICAgIC8vIOWIl+ihqOaVsOaNrlxuICAgICAgYWN0aW9uVXJsOiBnZXRNZW51VHJlZVBhZ2UsXG4gICAgICBzZWFyY2hDb25kaXRpb25EZWZhdWx0OiB7XG4gICAgICAgIG1lbnVDb2RlOiBcIlwiLFxuICAgICAgICBwYWdlOiAxLFxuICAgICAgICBsaW1pdDogMTBcbiAgICAgIH0sXG4gICAgICBzZWFyY2hDb25kaXRpb246IHtcbiAgICAgICAgbWVudUNvZGU6IFwiXCIsXG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxpbWl0OiAxMFxuICAgICAgfSxcbiAgICAgIHRhYmxlRGF0YToge1xuICAgICAgICAvLyBnZXREYXRhVXJsOiB7XG4gICAgICAgIC8vICAgdXJsOiBnZXRNZW51VHJlZVBhZ2UgLy8g5Yid5aeL5YyW5pWw5o2uXG4gICAgICAgIC8vIH0sXG4gICAgICAgIGRhdGFIZWFkZXI6IFtcbiAgICAgICAgICAvLyB0YWJsZeWIl+S/oeaBryBrZXk9PuihqOWktOagh+mimO+8jHdvcmQ9PuihqOWGheWuueS/oeaBr1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCLlip/og71cIixcbiAgICAgICAgICAgIHdpZHRoOiBcIjEzMHB4XCIsXG4gICAgICAgICAgICBzb3J0YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIHdvcmQ6IFwiZnVuY3Rpb25OYW1lXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIGtleTogXCLlip/og73nvJblj7dcIixcbiAgICAgICAgICAgIHdpZHRoOiBcIlwiLFxuICAgICAgICAgICAgd29yZDogXCJmdW5jdGlvbkNvZGVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAga2V5OiBcInVybFwiLFxuICAgICAgICAgICAgd29yZDogXCJ1cmxcIixcbiAgICAgICAgICAgIHdpZHRoOiBcIlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBrZXk6IFwi6K+35rGC5pa55rOVXCIsXG4gICAgICAgICAgICB3aWR0aDogXCJcIixcbiAgICAgICAgICAgIHdvcmQ6IFwiaHR0cE1ldGhvZFwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBvcGVyYXRpb246IHtcbiAgICAgICAgICB3aWR0aDogXCIxMjBweFwiLFxuICAgICAgICAgIG9wdGlvbnM6IFtcbiAgICAgICAgICAgIC8vIOaTjeS9nOaMiemSrlxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICB0ZXh0OiBcIue8lui+kVwiLFxuICAgICAgICAgICAgICBjb2xvcjogXCIjMTg5MGZmXCIsXG4gICAgICAgICAgICAgIHZpc2libGVGbjogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkbWluRmlsdGVyKFwibWVudV9mdW5jdGlvbl9lZGl0XCIpO1xuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICBjYjogcm93ZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0RnVuY0Zvcm0gPSByb3dkYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZWRpdEZ1bmNGb3JtLm1lbnVOYW1lID0gdGhpcy5mdW5jdGlvbk1lbnUubWVudU5hbWU7XG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0RnVuY0Zvcm1WaXNpYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgdGV4dDogXCLliKDpmaRcIixcbiAgICAgICAgICAgICAgdmlzaWJsZUZuOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRtaW5GaWx0ZXIoXCJtZW51X2Z1bmN0aW9uX2RlbGV0ZVwiKTtcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgY2I6IHJvd2RhdGEgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuJGNvbmZpcm0oXCLmraTmk43kvZzlsIbmsLjkuYXliKDpmaTor6Xlip/og70sIOaYr+WQpue7p+e7rT9cIiwgXCLmj5DnpLpcIiwge1xuICAgICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi56Gu5a6aXCIsXG4gICAgICAgICAgICAgICAgICBjYW5jZWxCdXR0b25UZXh0OiBcIuWPlua2iFwiLFxuICAgICAgICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCJcbiAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgIGRlbGV0ZU1lbnVGdW5jdGlvbigpKHJvd2RhdGEuZnVuY3Rpb25Db2RlKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5jb2RlID09IFwiMDBcIikge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogXCLliKDpmaTmiJDlip8hXCJcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyDmm7TmlrDmlbDmja5cbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlYXJjaENvbmRpdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbnVDb2RlOiB0aGlzLmZ1bmN0aW9uTWVudS5tZW51Q29kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2U6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW1pdDogMTBcbiAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VhY2hzdGFydEhhbmRsZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tc2dcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBkYXRhVHJlZVByb3BzOiB7XG4gICAgICAgIGxhYmVsOiBcIm1lbnVOYW1lXCIsXG4gICAgICAgIGlzTGVhZjogXCJpc1BhcmVudFwiXG4gICAgICB9XG4gICAgfTtcbiAgfSxcbiAgbWV0aG9kczoge1xuICAgIC8vIOaWsOWinuWKn+iDveW8ueWHuuaYvuekulxuICAgIGFkZEZ1bmNEaWFsb2coKSB7XG4gICAgICB0aGlzLmFkZEZ1bmNGb3JtLmh0dHBNZXRob2QgPSBcIlwiO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybS5mdW5jdGlvbnR5cGUgPSBcIlwiO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybS5mdW5jdGlvbk5hbWUgPSBcIlwiO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybS51cmwgPSBcIlwiO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybS5mdW5jdGlvbkNvZGUgPSBcIlwiO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybS5odHRwTWV0aG9kID0gXCJHRVRcIjtcbiAgICAgIHZhciBmdW5jdGlvbk1lbnUgPSB0aGlzLmZ1bmN0aW9uTWVudTtcbiAgICAgIHZhciBhZGRGdW5jRm9ybSA9IHRoaXMuYWRkRnVuY0Zvcm07XG4gICAgICB0aGlzLmFkZEZ1bmNGb3JtLm1lbnVOYW1lID0gZnVuY3Rpb25NZW51Lm1lbnVOYW1lO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybVZpc2libGUgPSB0cnVlO1xuICAgIH0sXG4gICAgZWRpdEZ1bmNTYXZlKCkge1xuICAgICAgLy8g5L+u5pS55Yqf6IO95L+d5a2YXG4gICAgICB0aGlzLnNhdmVMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIHZhciBlZGl0RnVuY0Zvcm0gPSB0aGlzLmVkaXRGdW5jRm9ybTtcbiAgICAgIHBhdGNoRWRpdE1lbnVGdW5jdGlvbigpKHtcbiAgICAgICAgbWVudUNvZGU6IHRoaXMuZnVuY3Rpb25NZW51Lm1lbnVDb2RlLFxuICAgICAgICBtZW51TmFtZTogZWRpdEZ1bmNGb3JtLm1lbnVOYW1lLFxuICAgICAgICBmdW5jdGlvbk5hbWU6IGVkaXRGdW5jRm9ybS5mdW5jdGlvbk5hbWUsXG4gICAgICAgIHVybDogZWRpdEZ1bmNGb3JtLnVybCxcbiAgICAgICAgaHR0cE1ldGhvZDogZWRpdEZ1bmNGb3JtLmh0dHBNZXRob2QsXG4gICAgICAgIGZ1bmN0aW9uQ29kZTogZWRpdEZ1bmNGb3JtLmZ1bmN0aW9uQ29kZVxuICAgICAgICAvLyAuLi50aGlzLmVkaXRGdW5jRm9ybVxuICAgICAgfSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgaWYgKGRhdGEuY29kZSA9PSBcIjAwXCIpIHtcbiAgICAgICAgIHRoaXMuTWVzc2FnZV9wYyh7XG4gICAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwi5oGt5Zac5oKo77yM5Yqf6IO95pu05pS55oiQ5YqfIVwiXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8g5pu05paw5pWw5o2uXG4gICAgICAgICAgdGhpcy5zZWFyY2hDb25kaXRpb24gPSB7XG4gICAgICAgICAgICAvLyDmn6Xor6LmnaHku7ZcbiAgICAgICAgICAgIG1lbnVDb2RlOiB0aGlzLmZ1bmN0aW9uTWVudS5tZW51Q29kZSxcbiAgICAgICAgICAgIHBhZ2U6IDEsXG4gICAgICAgICAgICBsaW1pdDogMTBcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuc2VhY2hzdGFydEhhbmRsZSgpO1xuICAgICAgICAgIHRoaXMuZWRpdEZ1bmNGb3JtVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tc2dcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNhdmVMb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8vIOaWsOWinuiPnOWNleWKn+iDveexu+Wei+aUueWPmFxuICAgIGZ1bmN0aW9uVHlwZUNoYW5nZShkYXRhKSB7XG4gICAgICBpZiAoZGF0YS52YWx1ZSA9PSBcIlwiKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGxldCBtZW51Q29kZSA9IHRoaXMuZnVuY3Rpb25NZW51Lm1lbnVDb2RlO1xuICAgICAgbGV0IGZ1bmN0aW9uTmFtZSA9IFwiXCI7XG4gICAgICBsZXQgdXJsID0gXCIvXCIgKyBtZW51Q29kZTtcbiAgICAgIGlmIChkYXRhID09IFwiYWRkXCIpIHtcbiAgICAgICAgdGhpcy5hZGRGdW5jRm9ybS5odHRwTWV0aG9kID0gXCJQT1NUXCI7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IFwi5paw5aKeXCI7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEgPT0gXCJlZGl0XCIpIHtcbiAgICAgICAgZnVuY3Rpb25OYW1lID0gXCLkv67mlLlcIjtcbiAgICAgICAgdGhpcy5hZGRGdW5jRm9ybS5odHRwTWV0aG9kID0gXCJQQVRDSFwiO1xuICAgICAgfSBlbHNlIGlmIChkYXRhID09IFwicGFnZVwiKSB7XG4gICAgICAgIGZ1bmN0aW9uTmFtZSA9IFwi5YiG6aG15p+l6K+iXCI7XG4gICAgICAgIHRoaXMuYWRkRnVuY0Zvcm0uaHR0cE1ldGhvZCA9IFwiR0VUXCI7XG4gICAgICAgIHVybCArPSBcIi9wYWdlXCI7XG4gICAgICB9IGVsc2UgaWYgKGRhdGEgPT0gXCJkZWxldGVcIikge1xuICAgICAgICBmdW5jdGlvbk5hbWUgPSBcIuWIoOmZpFwiO1xuICAgICAgICB0aGlzLmFkZEZ1bmNGb3JtLmh0dHBNZXRob2QgPSBcIkRFTEVURVwiO1xuICAgICAgICB1cmwgKz0gXCIvZGVsZXRlLypcIjtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWRkRnVuY0Zvcm0uZnVuY3Rpb25OYW1lID0gZnVuY3Rpb25OYW1lO1xuICAgICAgdGhpcy5hZGRGdW5jRm9ybS51cmwgPSB1cmw7XG4gICAgICB0aGlzLmFkZEZ1bmNGb3JtLmZ1bmN0aW9uQ29kZSA9IG1lbnVDb2RlICsgXCJfXCIgKyBkYXRhO1xuICAgIH0sXG4gICAgLy8g5L+d5a2Y5paw5aKe5Yqf6IO9XG4gICAgYWRkRnVuY1NhdmUoKSB7XG4gICAgICB0aGlzLnNhdmVMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIHBvc3RBZGRNZW51RnVuY3Rpb24oKSh7XG4gICAgICAgIG1lbnVDb2RlOiB0aGlzLmZ1bmN0aW9uTWVudS5tZW51Q29kZSxcbiAgICAgICAgbWVudU5hbWU6IHRoaXMuYWRkRnVuY0Zvcm0ubWVudU5hbWUsXG4gICAgICAgIFwiZnVuY3Rpb24tdHlwZVwiOiB0aGlzLmFkZEZ1bmNGb3JtLmZ1bmN0aW9udHlwZSxcbiAgICAgICAgZnVuY3Rpb25OYW1lOiB0aGlzLmFkZEZ1bmNGb3JtLmZ1bmN0aW9uTmFtZSxcbiAgICAgICAgdXJsOiB0aGlzLmFkZEZ1bmNGb3JtLnVybCxcbiAgICAgICAgaHR0cE1ldGhvZDogdGhpcy5hZGRGdW5jRm9ybS5odHRwTWV0aG9kLFxuICAgICAgICBmdW5jdGlvbkNvZGU6IHRoaXMuYWRkRnVuY0Zvcm0uZnVuY3Rpb25Db2RlXG4gICAgICB9KS50aGVuKGRhdGEgPT4ge1xuICAgICAgICBpZiAoZGF0YS5jb2RlID09IFwiMDBcIikge1xuICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgIHR5cGU6IFwic3VjY2Vzc1wiLFxuICAgICAgICAgICAgbWVzc2FnZTogXCLmga3llpzmgqjvvIzmt7vliqDlip/og73miJDlip8hXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyDmm7TmlrDmlbDmja5cbiAgICAgICAgICB0aGlzLnNlYXJjaENvbmRpdGlvbiA9IHtcbiAgICAgICAgICAgIG1lbnVDb2RlOiB0aGlzLmZ1bmN0aW9uTWVudS5tZW51Q29kZSxcbiAgICAgICAgICAgIHBhZ2U6IDEsXG4gICAgICAgICAgICBsaW1pdDogMTBcbiAgICAgICAgICB9O1xuICAgICAgICAgIHRoaXMuc2VhY2hzdGFydEhhbmRsZSgpO1xuICAgICAgICAgIHRoaXMuYWRkRnVuY0Zvcm1WaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICB0aGlzLk1lc3NhZ2VfcGMoe1xuICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1zZ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2F2ZUxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgcmVtb3ZlSG92ZXJEb20odHJlZUlkLCB0cmVlTm9kZSkge1xuICAgICAgJChcIiNhZGRCdG5fXCIgKyB0cmVlTm9kZS50SWQpXG4gICAgICAgIC51bmJpbmQoKVxuICAgICAgICAucmVtb3ZlKCk7XG4gICAgfSxcbiAgICBhZGRIb3ZlckRvbSh0cmVlSWQsIHRyZWVOb2RlKSB7XG4gICAgICB0aGlzLnRyZWVOb2RlT2JqID0gdHJlZU5vZGU7XG4gICAgICB2YXIgc09iaiA9ICQoXCIjXCIgKyB0cmVlTm9kZS50SWQgKyBcIl9zcGFuXCIpO1xuICAgICAgaWYgKFxuICAgICAgICAhdHJlZU5vZGUuaXNQYXJlbnQgfHxcbiAgICAgICAgdHJlZU5vZGUuZWRpdE5hbWVGbGFnIHx8XG4gICAgICAgICQoXCIjYWRkQnRuX1wiICsgdHJlZU5vZGUudElkKS5sZW5ndGggPiAwXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgdmFyIGFkZFN0ciA9XG4gICAgICAgIFwiPHNwYW4gY2xhc3M9J2J1dHRvbiBhZGQnIGlkPSdhZGRCdG5fXCIgK1xuICAgICAgICB0cmVlTm9kZS50SWQgK1xuICAgICAgICBcIicgdGl0bGU9J+a3u+WKoOiPnOWNlScgb25mb2N1cz0ndGhpcy5ibHVyKCk7Jz48L3NwYW4+XCI7XG4gICAgICBzT2JqLmFmdGVyKGFkZFN0cik7XG4gICAgICB2YXIgYnRuID0gJChcIiNhZGRCdG5fXCIgKyB0cmVlTm9kZS50SWQpO1xuICAgICAgaWYgKGJ0bikge1xuICAgICAgICBidG4uYmluZChcImNsaWNrXCIsICgpID0+IHtcbiAgICAgICAgICAvLyDngrnlh7vmlrDlop7mjInpkq5cbiAgICAgICAgICAvLyB0cmVlTm9kZS5tZW51Q29kZVxuICAgICAgICAgIHRoaXMuYWRkRm9ybS5wYXJlbnRDb2RlID0gdHJlZU5vZGUubWVudUNvZGU7XG4gICAgICAgICAgdGhpcy5hZGRGb3JtVmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGFkZFNhdmUoKSB7XG4gICAgICAvLyDkv53lrZjmlrDlop7kv6Hmga9cbiAgICAgIHRoaXMuc2F2ZUxvYWRpbmcgPSB0cnVlO1xuICAgICAgdmFyIGFkZEZvcm0gPSB0aGlzLmFkZEZvcm07XG4gICAgICBwYXRjaEFkZE1lbnVUcmVlKCkoe1xuICAgICAgICBtZW51TmFtZTogYWRkRm9ybS5tZW51TmFtZSxcbiAgICAgICAgcGFyZW50Q29kZTogYWRkRm9ybS5wYXJlbnRDb2RlLFxuICAgICAgICBtZW51Q29kZTogYWRkRm9ybS5tZW51Q29kZSxcbiAgICAgICAgaXNQYXJlbnQ6IGFkZEZvcm0uaXNQYXJlbnQsXG4gICAgICAgIHVybDogYWRkRm9ybS51cmxcbiAgICAgIH0pLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIGlmIChkYXRhLmNvZGUgPT0gXCIwMFwiKSB7XG4gICAgICAgICB0aGlzLk1lc3NhZ2VfcGMoe1xuICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIuaBreWWnOaCqO+8jOaWsOWinuiPnOWNleaIkOWKnyFcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuelRyZWVPYmoucmVBc3luY0NoaWxkTm9kZXModGhpcy50cmVlTm9kZU9iaiwgXCJyZWZyZXNoXCIpO1xuICAgICAgICAgIHRoaXMuelRyZWVPYmouZXhwYW5kTm9kZSh0aGlzLnRyZWVOb2RlT2JqLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICB0aGlzLmFkZEZvcm1WaXNpYmxlID0gZmFsc2U7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICB0aGlzLk1lc3NhZ2VfcGMoe1xuICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBkYXRhLm1zZ1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2F2ZUxvYWRpbmcgPSBmYWxzZTtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8g5qCR5Yqg6L295oiQ5Yqf5LmL5ZCO5bGV5byA5qC56IqC54K5XG4gICAgelRyZWVPbkFzeW5jU3VjY2VzcyhldmVudCwgdHJlZUlkLCB0cmVlTm9kZSwgbXNnKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHZhciB0cmVlT2JqID0gJC5mbi56VHJlZS5nZXRaVHJlZU9iaih0aGlzLnRyZWVJZCk7XG4gICAgICAgIHZhciBub2RlcyA9IHRyZWVPYmouZ2V0Tm9kZXMoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIHRyZWVPYmouZXhwYW5kTm9kZShub2Rlc1tpXSwgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgLy8g54K55Ye757yW6L6R5oyJ6ZKuXG4gICAgYmVmb3JlRWRpdE5hbWUodHJlZUlkLCB0cmVlTm9kZSkge1xuICAgICAgLy8gdGhpcy5yZXNldEZvcm0oXCJlZGl0Rm9ybVwiKTtcbiAgICAgIHRoaXMuZWRpdEZvcm0gPSB7fTtcbiAgICAgIHRoaXMudHJlZU5vZGVPYmogPSB0cmVlTm9kZS5nZXRQYXJlbnROb2RlKCk7XG4gICAgICB0aGlzLmVkaXRGb3JtID0gdHJlZU5vZGU7XG4gICAgICAvLyBlZGl0Rm9ybS5pc1BhcmVudCA9IGZhbHNlO1xuICAgICAgaWYgKHRyZWVOb2RlLmlzUGFyZW50KSB7XG4gICAgICAgIHRoaXMuZWRpdEZvcm0uZWRpdE9wdGlvbnMgPSBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgICAgICAgICBsYWJlbDogXCLmmK9cIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmFsdWU6IGZhbHNlLFxuICAgICAgICAgICAgbGFiZWw6IFwi5ZCmXCJcbiAgICAgICAgICB9XG4gICAgICAgIF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmVkaXRGb3JtLmVkaXRPcHRpb25zID0gW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHZhbHVlOiBmYWxzZSxcbiAgICAgICAgICAgIGxhYmVsOiBcIuaYr1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgICAgICAgIGxhYmVsOiBcIuWQplwiXG4gICAgICAgICAgfVxuICAgICAgICBdO1xuICAgICAgfVxuICAgICAgdGhpcy5lZGl0Rm9ybVZpc2libGUgPSB0cnVlO1xuICAgIH0sXG4gICAgZWRpdFNhdmUoKSB7XG4gICAgICB0aGlzLnNhdmVMb2FkaW5nID0gdHJ1ZTtcbiAgICAgIGxldCBlZGl0Rm9ybSA9IHRoaXMuZWRpdEZvcm07XG4gICAgICBwYXRjaEVkaXRNZW51VHJlZSgpKHtcbiAgICAgICAgbWVudU5hbWU6IGVkaXRGb3JtLm1lbnVOYW1lLFxuICAgICAgICBtZW51Q29kZTogZWRpdEZvcm0ubWVudUNvZGUsXG4gICAgICAgIGlzUGFyZW50OiBlZGl0Rm9ybS5pc1BhcmVudCxcbiAgICAgICAgdXJsOiBlZGl0Rm9ybS51cmxcbiAgICAgIH0pLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgIGlmIChkYXRhLmNvZGUgPT0gXCIwMFwiKSB7XG4gICAgICAgICB0aGlzLk1lc3NhZ2VfcGMoe1xuICAgICAgICAgICAgdHlwZTogXCJzdWNjZXNzXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIuaBreWWnOaCqO+8jOabtOaUueaIkOWKnyFcIlxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHRoaXMuelRyZWVPYmoucmVBc3luY0NoaWxkTm9kZXModGhpcy50cmVlTm9kZU9iaiwgXCJyZWZyZXNoXCIpO1xuICAgICAgICAgIHRoaXMuelRyZWVPYmouZXhwYW5kTm9kZSh0aGlzLnRyZWVOb2RlT2JqLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgICAgICB0aGlzLmVkaXRGb3JtVmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tc2dcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNhdmVMb2FkaW5nID0gZmFsc2U7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIC8vIOeCueWHu+WIoOmZpOaMiemSrlxuICAgIGJlZm9yZVJlbW92ZSh0cmVlSWQsIHRyZWVOb2RlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRyZWVOb2RlLmlzUGFyZW50ICYmXG4gICAgICAgIHRyZWVOb2RlLmNoaWxkcmVuICE9IG51bGwgJiZcbiAgICAgICAgdHJlZU5vZGUuY2hpbGRyZW4ubGVuZ3RoICE9IDBcbiAgICAgICkge1xuICAgICAgIHRoaXMuTWVzc2FnZV9wYyh7XG4gICAgICAgICAgbWVzc2FnZTogXCLmk43kvZzlpLHotKU6IOivt+WFiOWIoOmZpOivpeiPnOWNleS4i+eahOWtkOiPnOWNlVwiLFxuICAgICAgICAgIHR5cGU6IFwid2FybmluZ1wiXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyByZXR1cm4gZmFsc2U7XG4gICAgICB0aGlzLiRjb25maXJtKFwi56Gu5a6a5Yig6Zmk5ZCX77yfXCIsIFwi5o+Q56S6XCIsIHtcbiAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwi56Gu5a6aXCIsXG4gICAgICAgIGNhbmNlbEJ1dHRvblRleHQ6IFwi5Y+W5raIXCIsXG4gICAgICAgIHR5cGU6IFwid2FybmluZ1wiXG4gICAgICB9KVxuICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgZGVsZXRlTWVudVRyZWUoKSh0cmVlTm9kZS5tZW51Q29kZSkudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgIGlmIChkYXRhLmNvZGUgPT0gXCIwMFwiKSB7XG4gICAgICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIuWIoOmZpOaIkOWKnyFcIlxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgdGhpcy56VHJlZU9iai5yZW1vdmVOb2RlKHRyZWVOb2RlLCBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgIHRoaXMuTWVzc2FnZV9wYyh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogZGF0YS5tc2dcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pXG4gICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICB0aGlzLk1lc3NhZ2VfcGMoe1xuICAgICAgICAgICAgdHlwZTogXCJpbmZvXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIuW3suWPlua2iOWIoOmZpFwiXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgelRyZWVPbkNsaWNrKGV2ZW50LCB0cmVlSWQsIHRyZWVOb2RlKSB7XG4gICAgICBpZiAodHJlZU5vZGUuaXNQYXJlbnQpIHtcbiAgICAgICAgdGhpcy56VHJlZU9iai5leHBhbmROb2RlKHRyZWVOb2RlLCBudWxsLCBudWxsLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZnVuY3Rpb25NZW51ID0gdHJlZU5vZGU7IC8vIOWQjOatpeW9k+WJjeaJgOeCueWHu+eahOiPnOWNlW1lbnVDb2RlXG4gICAgICAgIHRoaXMubWVudUZ1bmN0aW9uUGFyZW50Tm9kZSA9IHRyZWVOb2RlO1xuICAgICAgICAvLyDmm7TmlrDmlbDmja5cbiAgICAgICAgdGhpcy4kc2V0KHRoaXMuc2VhcmNoQ29uZGl0aW9uLCBcIm1lbnVDb2RlXCIsIHRyZWVOb2RlLm1lbnVDb2RlKTtcbiAgICAgICAgdGhpcy5zZWFjaHN0YXJ0SGFuZGxlKCk7XG4gICAgICAgIC8vIOaYvuekuuihqOagvFxuICAgICAgICB0aGlzLnRhYmxlVmlzaWJsZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICAvLyDliqDovb3moJHliJfooahcbiAgICByb290VHJlZWxvYWQobm9kZSwgcmVzb2x2ZSkge1xuICAgICAgZ2V0TWVudVRyZWVzKCkoe1xuICAgICAgICBfOiBuZXcgRGF0ZSgpICogMVxuICAgICAgfSkudGhlbihkYXRhID0+IHsgfSk7XG4gICAgfSxcbiAgICAvKirnp7vliqjnn6Xor4boioLngrnliY3lpITnkIYqL1xuICAgIHpUcmVlQmVmb3JlRHJhZyh0cmVlSWQsIHRyZWVOb2Rlcykge1xuICAgICAgLy8gY29uc29sZS5sb2coJ+WJjS0tLS0tLS0tLS0tLScpO1xuICAgICAgLy8gY29uc29sZS5sb2codHJlZUlkKVxuICAgIH0sXG4gICAgLyoq5ouW5ou96YeK5pS+5LmL5ZCO57uT5p2f5YmN5omn6KGMICAqL1xuICAgIHpUcmVlQmVmb3JlRHJvcCh0cmVlSWQsIHRyZWVOb2RlcywgdGFyZ2V0Tm9kZSwgbW92ZVR5cGVfKSB7XG4gICAgICBsZXQgbWVudVBhcmVudENvZGUgPSB0cmVlTm9kZXNbMF0ucGFyZW50Q29kZTtcbiAgICAgIGxldCB0YXJnZXRQYXJlbnRDb2RlID0gdGFyZ2V0Tm9kZS5wYXJlbnRDb2RlO1xuICAgICAgbGV0IG1lbnVDb2RlID0gdHJlZU5vZGVzWzBdLm1lbnVDb2RlO1xuICAgICAgbGV0IG1lbnVOYW1lID0gdHJlZU5vZGVzWzBdLm1lbnVOYW1lO1xuICAgICAgbGV0IHRhcmdldENvZGUgPSB0YXJnZXROb2RlLm1lbnVDb2RlO1xuICAgICAgbGV0IG1vdmVUeXBlID0gbW92ZVR5cGVfO1xuICAgICAgaWYgKFxuICAgICAgICB0cmVlTm9kZXNbMF0ubGV2ZWwgIT0gdGFyZ2V0Tm9kZS5sZXZlbCB8fFxuICAgICAgICBtb3ZlVHlwZSA9PSBcImlubmVyXCIgfHxcbiAgICAgICAgbWVudVBhcmVudENvZGUgIT0gdGFyZ2V0UGFyZW50Q29kZVxuICAgICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRyb3BNZW51VHJlZSgpKHtcbiAgICAgICAgICBtZW51Q29kZTogbWVudUNvZGUsXG4gICAgICAgICAgdGFyZ2V0Q29kZTogdGFyZ2V0Q29kZSxcbiAgICAgICAgICBtb3ZlVHlwZTogbW92ZVR5cGVcbiAgICAgICAgfSkudGhlbihyZXMgPT4ge1xuICAgICAgICAgIGlmIChyZXMuY29kZSA9PSBcIjAwXCIpIHtcbiAgICAgICAgICAgdGhpcy5NZXNzYWdlX3BjKHtcbiAgICAgICAgICAgICAgbWVzc2FnZTogYOiPnOWNlScke21lbnVOYW1lfSfkvY3nva7np7vliqjmiJDlip9gLFxuICAgICAgICAgICAgICB0eXBlOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgICAgICAgY2VudGVyOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgaW5pdEZuKCkge1xuICAgICAgLy8g6YWN572uenRyZWXliJ3lp4vljJblsZ7mgKfvvIzlvILmraXliqDovb3ot6/lvoRcbiAgICAgIHRoaXMuc2V0dGluZyA9IHtcbiAgICAgICAgYXN5bmM6IHtcbiAgICAgICAgICBlbmFibGU6IHRydWUsXG4gICAgICAgICAgdXJsOiB0aGlzLm9hSXAgKyBcIi9tZW51L3RyZWVcIixcbiAgICAgICAgICB0eXBlOiBcImdldFwiLFxuICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgICAgICBhdXRvUGFyYW06IFtcIm1lbnVDb2RlXCJdXG4gICAgICAgIH0sXG4gICAgICAgIHZpZXc6IHtcbiAgICAgICAgICBhZGRIb3ZlckRvbTogdGhpcy5hZGRIb3ZlckRvbSxcbiAgICAgICAgICByZW1vdmVIb3ZlckRvbTogdGhpcy5yZW1vdmVIb3ZlckRvbSxcbiAgICAgICAgICBzZWxlY3RlZE11bHRpOiBmYWxzZVxuICAgICAgICB9LFxuICAgICAgICBjaGVjazoge1xuICAgICAgICAgIGVuYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgc2ltcGxlRGF0YToge1xuICAgICAgICAgICAgZW5hYmxlOiB0cnVlLFxuICAgICAgICAgICAgaWRLZXk6IFwibWVudUNvZGVcIixcbiAgICAgICAgICAgIHBJZEtleTogXCJwYXJlbnRDb2RlXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIGtlZXA6IHtcbiAgICAgICAgICAgIGxlYWY6IGZhbHNlLFxuICAgICAgICAgICAgcGFyZW50OiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICBrZXk6IHtcbiAgICAgICAgICAgIG5hbWU6IFwibWVudU5hbWVcIlxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZWRpdDoge1xuICAgICAgICAgIGVuYWJsZTogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICBjYWxsYmFjazoge1xuICAgICAgICAgIG9uQXN5bmNTdWNjZXNzOiB0aGlzLnpUcmVlT25Bc3luY1N1Y2Nlc3MsXG4gICAgICAgICAgYmVmb3JlRWRpdE5hbWU6IHRoaXMuYmVmb3JlRWRpdE5hbWUsXG4gICAgICAgICAgYmVmb3JlUmVtb3ZlOiB0aGlzLmJlZm9yZVJlbW92ZSxcbiAgICAgICAgICBvbkNsaWNrOiB0aGlzLnpUcmVlT25DbGljayxcbiAgICAgICAgICBiZWZvcmVEcmFnOiB0aGlzLnpUcmVlQmVmb3JlRHJhZyxcbiAgICAgICAgICBiZWZvcmVEcm9wOiB0aGlzLnpUcmVlQmVmb3JlRHJvcFxuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICB0aGlzLnpUcmVlT2JqID0gJC5mbi56VHJlZS5pbml0KCQoXCIjcm9vdFRyZWVOZW51XCIpLCB0aGlzLnNldHRpbmcpO1xuICAgICAgfSk7XG4gICAgfVxuICB9LFxuICBjb21wdXRlZDoge1xuICAgIG9hSXAoKSB7XG4gICAgICAvLyBuZ2lueOmFjee9rueahOi3r+eUsVxuICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLnN0YXRlLkJhc2Uub2FJcDtcbiAgICB9XG4gIH0sXG4gIG1vdW50ZWQoKSB7XG4gICAgdGhpcy5pbml0Rm4oKTtcbiAgfVxufTtcbjwvc2NyaXB0PiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUE0SkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFFQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFLQTtBQUNBO0FBRkE7QUFDQTtBQXJCQTtBQTJCQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFGQTtBQU5BO0FBWUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUZBO0FBTkE7QUFZQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFGQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBT0E7QUFDQTtBQUNBO0FBSEE7QUFNQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUhBO0FBTUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVZBO0FBYUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSEE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFoQ0E7QUFoQkE7QUE1QkE7QUFpRkE7QUFDQTtBQUNBO0FBRkE7QUE3S0E7QUFrTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBBO0FBU0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFDQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQUNBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUFBO0FBSUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUZBO0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFGQTtBQUtBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFKQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFDQTtBQUdBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFLQTtBQUNBO0FBQ0E7QUFGQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFIQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFGQTtBQUNBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUZBO0FBSUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBREE7QUFHQTtBQUNBO0FBQUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUFBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTEE7QUFPQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQURBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUhBO0FBS0E7QUFDQTtBQUNBO0FBRkE7QUFJQTtBQUNBO0FBREE7QUFWQTtBQWNBO0FBQ0E7QUFEQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkE7QUFqQ0E7QUEwQ0E7QUFDQTtBQUNBO0FBQ0E7QUEvWEE7QUFpWUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUpBO0FBTUE7QUFDQTtBQUNBO0FBam1CQTtBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"5354fe5c-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&":
/*!**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/cache-loader/dist/cjs.js?{"cacheDirectory":"node_modules/.cache/vue-loader","cacheIdentifier":"5354fe5c-vue-loader-template"}!./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/cache-loader/dist/cjs.js??ref--0-0!./node_modules/vue-loader/lib??vue-loader-options!./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true& ***!
  \**************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return render; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return staticRenderFns; });\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"admin-page\" },\n    [\n      _c(\"div\", { staticClass: \"admin-main-box tree-table-box\" }, [\n        _vm._m(0),\n        _c(\n          \"div\",\n          {\n            directives: [\n              {\n                name: \"show\",\n                rawName: \"v-show\",\n                value: _vm.tableVisible,\n                expression: \"tableVisible\"\n              }\n            ],\n            staticClass: \"table-box\"\n          },\n          [\n            _c(\n              \"el-button-group\",\n              { staticClass: \"button-group\" },\n              [\n                _c(\n                  \"el-button\",\n                  {\n                    staticClass: \"mybutton\",\n                    attrs: {\n                      size: \"small\",\n                      type: \"primary\",\n                      icon: \"el-icon-plus\"\n                    },\n                    on: { click: _vm.addFuncDialog }\n                  },\n                  [_vm._v(\"新增\")]\n                )\n              ],\n              1\n            ),\n            _c(\n              \"div\",\n              { staticClass: \"table-container\" },\n              [\n                _c(\"myp-data-page\", {\n                  ref: \"dataTable\",\n                  attrs: {\n                    actionUrl: _vm.actionUrl,\n                    tableDataInit: _vm.tableData,\n                    dataList: _vm.dataList,\n                    page: _vm.postPage,\n                    limit: _vm.postLimit,\n                    search: _vm.searchCondition,\n                    dataCount: _vm.dataCount,\n                    loading: _vm.tableLading\n                  },\n                  on: {\n                    pagecount: _vm.pagecountHandle,\n                    pagelimit: _vm.pagelimitHandle,\n                    operation: _vm.operationHandle\n                  }\n                })\n              ],\n              1\n            )\n          ],\n          1\n        )\n      ]),\n      _c(\n        \"el-dialog\",\n        {\n          directives: [{ name: \"dialogDrag\", rawName: \"v-dialogDrag\" }],\n          attrs: {\n            title: \"新增功能\",\n            center: \"\",\n            visible: _vm.addFuncFormVisible,\n            width: \"500px\"\n          },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.addFuncFormVisible = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              ref: \"addFuncForm\",\n              attrs: {\n                size: \"small\",\n                model: _vm.addFuncForm,\n                rules: _vm.addFuncFormRules\n              }\n            },\n            [\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"归属菜单\",\n                    prop: \"menuName\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { disabled: true, \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.addFuncForm.menuName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addFuncForm, \"menuName\", $$v)\n                      },\n                      expression: \"addFuncForm.menuName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能类型\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\n                    \"el-select\",\n                    {\n                      attrs: { prop: \"functiontype\", placeholder: \"功能类型\" },\n                      on: { change: _vm.functionTypeChange },\n                      model: {\n                        value: _vm.addFuncForm.functiontype,\n                        callback: function($$v) {\n                          _vm.$set(_vm.addFuncForm, \"functiontype\", $$v)\n                        },\n                        expression: \"addFuncForm.functiontype\"\n                      }\n                    },\n                    _vm._l(_vm.addFuncForm.typeOptions, function(item) {\n                      return _c(\"el-option\", {\n                        key: item.value,\n                        attrs: { label: item.label, value: item.value }\n                      })\n                    }),\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能名称\",\n                    prop: \"functionName\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.addFuncForm.functionName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addFuncForm, \"functionName\", $$v)\n                      },\n                      expression: \"addFuncForm.functionName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能url\",\n                    prop: \"url\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.addFuncForm.url,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addFuncForm, \"url\", $$v)\n                      },\n                      expression: \"addFuncForm.url\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"请求方法\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\n                    \"el-select\",\n                    {\n                      attrs: { prop: \"httpMethod\", placeholder: \"请求方法\" },\n                      model: {\n                        value: _vm.addFuncForm.httpMethod,\n                        callback: function($$v) {\n                          _vm.$set(_vm.addFuncForm, \"httpMethod\", $$v)\n                        },\n                        expression: \"addFuncForm.httpMethod\"\n                      }\n                    },\n                    _vm._l(_vm.httpMethodOptions, function(item) {\n                      return _c(\"el-option\", {\n                        key: item.value,\n                        attrs: { label: item.label, value: item.value }\n                      })\n                    }),\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能编号\",\n                    prop: \"functionCode\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.addFuncForm.functionCode,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addFuncForm, \"functionCode\", $$v)\n                      },\n                      expression: \"addFuncForm.functionCode\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  on: {\n                    click: function($event) {\n                      _vm.addFuncFormVisible = false\n                    }\n                  }\n                },\n                [_vm._v(\"取 消\")]\n              ),\n              _c(\n                \"el-button\",\n                {\n                  attrs: { loading: _vm.saveLoading, type: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.addFuncSave(\"addFuncForm\")\n                    }\n                  }\n                },\n                [_vm._v(\"确 定\")]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          directives: [{ name: \"dialogDrag\", rawName: \"v-dialogDrag\" }],\n          attrs: {\n            title: \"修改功能\",\n            center: \"\",\n            visible: _vm.editFuncFormVisible,\n            width: \"500px\"\n          },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.editFuncFormVisible = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              ref: \"editFuncForm\",\n              attrs: {\n                size: \"small\",\n                model: _vm.editFuncForm,\n                rules: _vm.addFormRules\n              }\n            },\n            [\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"归属菜单\",\n                    prop: \"menuName\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { disabled: true, \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.editFuncForm.menuName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.editFuncForm, \"menuName\", $$v)\n                      },\n                      expression: \"editFuncForm.menuName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能名称\",\n                    prop: \"functionName\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.editFuncForm.functionName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.editFuncForm, \"functionName\", $$v)\n                      },\n                      expression: \"editFuncForm.functionName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能url\",\n                    prop: \"url\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.editFuncForm.url,\n                      callback: function($$v) {\n                        _vm.$set(_vm.editFuncForm, \"url\", $$v)\n                      },\n                      expression: \"editFuncForm.url\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"请求方法\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\n                    \"el-select\",\n                    {\n                      attrs: {\n                        prop: \"httpMethod\",\n                        placeholder: \"是否有下级菜单\"\n                      },\n                      model: {\n                        value: _vm.editFuncForm.httpMethod,\n                        callback: function($$v) {\n                          _vm.$set(_vm.editFuncForm, \"httpMethod\", $$v)\n                        },\n                        expression: \"editFuncForm.httpMethod\"\n                      }\n                    },\n                    _vm._l(_vm.httpMethodOptions, function(item) {\n                      return _c(\"el-option\", {\n                        key: item.value,\n                        attrs: { label: item.label, value: item.value }\n                      })\n                    }),\n                    1\n                  )\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"功能编号\",\n                    prop: \"functionCode\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { disabled: true, \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.editFuncForm.functionCode,\n                      callback: function($$v) {\n                        _vm.$set(_vm.editFuncForm, \"functionCode\", $$v)\n                      },\n                      expression: \"editFuncForm.functionCode\"\n                    }\n                  })\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  on: {\n                    click: function($event) {\n                      _vm.editFuncFormVisible = false\n                    }\n                  }\n                },\n                [_vm._v(\"取 消\")]\n              ),\n              _c(\n                \"el-button\",\n                {\n                  attrs: { loading: _vm.saveLoading, type: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.editFuncSave(\"editFuncFormVisible\")\n                    }\n                  }\n                },\n                [_vm._v(\"确 定\")]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          directives: [{ name: \"dialogDrag\", rawName: \"v-dialogDrag\" }],\n          attrs: {\n            title: \"新增菜单\",\n            center: \"\",\n            visible: _vm.addFormVisible,\n            width: \"500px\"\n          },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.addFormVisible = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              ref: \"addForm\",\n              attrs: {\n                size: \"small\",\n                model: _vm.addForm,\n                rules: _vm.addFormRules\n              }\n            },\n            [\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"菜单名称\",\n                    prop: \"menuName\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.addForm.menuName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addForm, \"menuName\", $$v)\n                      },\n                      expression: \"addForm.menuName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"菜单编号\",\n                    prop: \"menuCode\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.addForm.menuCode,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addForm, \"menuCode\", $$v)\n                      },\n                      expression: \"addForm.menuCode\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"是否有下级菜单\" } },\n                [\n                  _c(\"el-switch\", {\n                    attrs: {\n                      \"active-value\": \"TRUE\",\n                      \"inactive-value\": \"FALSE\",\n                      \"active-text\": \"是\",\n                      \"inactive-text\": \"否\"\n                    },\n                    model: {\n                      value: _vm.addForm.isParent,\n                      callback: function($$v) {\n                        _vm.$set(_vm.addForm, \"isParent\", $$v)\n                      },\n                      expression: \"addForm.isParent\"\n                    }\n                  })\n                ],\n                1\n              ),\n              (_vm.addForm.isParent == \"TRUE\"\n              ? false\n              : true)\n                ? _c(\n                    \"el-form-item\",\n                    {\n                      attrs: {\n                        label: \"菜单url\",\n                        prop: \"url\",\n                        \"label-width\": _vm.formLabelWidth\n                      }\n                    },\n                    [\n                      _c(\"el-input\", {\n                        attrs: { \"auto-complete\": \"off\" },\n                        model: {\n                          value: _vm.addForm.url,\n                          callback: function($$v) {\n                            _vm.$set(_vm.addForm, \"url\", $$v)\n                          },\n                          expression: \"addForm.url\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e()\n            ],\n            1\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  on: {\n                    click: function($event) {\n                      _vm.addFormVisible = false\n                    }\n                  }\n                },\n                [_vm._v(\"取 消\")]\n              ),\n              _c(\n                \"el-button\",\n                {\n                  attrs: { loading: _vm.saveLoading, type: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.addSave(\"addForm\")\n                    }\n                  }\n                },\n                [_vm._v(\"确 定\")]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      ),\n      _c(\n        \"el-dialog\",\n        {\n          directives: [{ name: \"dialogDrag\", rawName: \"v-dialogDrag\" }],\n          attrs: {\n            title: \"修改菜单\",\n            center: \"\",\n            visible: _vm.editFormVisible,\n            width: \"500px\"\n          },\n          on: {\n            \"update:visible\": function($event) {\n              _vm.editFormVisible = $event\n            }\n          }\n        },\n        [\n          _c(\n            \"el-form\",\n            {\n              ref: \"editForm\",\n              attrs: {\n                size: \"small\",\n                model: _vm.editForm,\n                rules: _vm.addFormRules\n              }\n            },\n            [\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"菜单名称\",\n                    prop: \"menuName\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.editForm.menuName,\n                      callback: function($$v) {\n                        _vm.$set(_vm.editForm, \"menuName\", $$v)\n                      },\n                      expression: \"editForm.menuName\"\n                    }\n                  })\n                ],\n                1\n              ),\n              _c(\n                \"el-form-item\",\n                {\n                  attrs: {\n                    label: \"菜单编号\",\n                    prop: \"menuCode\",\n                    \"label-width\": _vm.formLabelWidth\n                  }\n                },\n                [\n                  _c(\"el-input\", {\n                    attrs: { disabled: true, \"auto-complete\": \"off\" },\n                    model: {\n                      value: _vm.editForm.menuCode,\n                      callback: function($$v) {\n                        _vm.$set(_vm.editForm, \"menuCode\", $$v)\n                      },\n                      expression: \"editForm.menuCode\"\n                    }\n                  })\n                ],\n                1\n              ),\n              !_vm.editForm.isParent\n                ? _c(\n                    \"el-form-item\",\n                    {\n                      attrs: {\n                        label: \"菜单url\",\n                        prop: \"url\",\n                        \"label-width\": _vm.formLabelWidth\n                      }\n                    },\n                    [\n                      _c(\"el-input\", {\n                        attrs: { \"auto-complete\": \"off\" },\n                        model: {\n                          value: _vm.editForm.url,\n                          callback: function($$v) {\n                            _vm.$set(_vm.editForm, \"url\", $$v)\n                          },\n                          expression: \"editForm.url\"\n                        }\n                      })\n                    ],\n                    1\n                  )\n                : _vm._e(),\n              _c(\n                \"el-form-item\",\n                { attrs: { label: \"是否有下级菜单\" } },\n                [\n                  _c(\n                    \"el-select\",\n                    {\n                      attrs: {\n                        disabled: true,\n                        prop: \"isParent\",\n                        placeholder: \"是否有下级菜单\"\n                      },\n                      model: {\n                        value: _vm.editForm.isParent,\n                        callback: function($$v) {\n                          _vm.$set(_vm.editForm, \"isParent\", $$v)\n                        },\n                        expression: \"editForm.isParent\"\n                      }\n                    },\n                    _vm._l(_vm.editOptionsResult, function(item) {\n                      return _c(\"el-option\", {\n                        key: item.value,\n                        attrs: { label: item.label, value: item.value }\n                      })\n                    }),\n                    1\n                  )\n                ],\n                1\n              )\n            ],\n            1\n          ),\n          _c(\n            \"div\",\n            {\n              staticClass: \"dialog-footer\",\n              attrs: { slot: \"footer\" },\n              slot: \"footer\"\n            },\n            [\n              _c(\n                \"el-button\",\n                {\n                  on: {\n                    click: function($event) {\n                      _vm.editFormVisible = false\n                    }\n                  }\n                },\n                [_vm._v(\"取 消\")]\n              ),\n              _c(\n                \"el-button\",\n                {\n                  attrs: { loading: _vm.saveLoading, type: \"primary\" },\n                  on: {\n                    click: function($event) {\n                      return _vm.editSave(\"editForm\")\n                    }\n                  }\n                },\n                [_vm._v(\"确 定\")]\n              )\n            ],\n            1\n          )\n        ],\n        1\n      )\n    ],\n    1\n  )\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"tree-box\" }, [\n      _c(\"div\", { staticClass: \"zTreeDemoBackground left\" }, [\n        _c(\"ul\", { staticClass: \"ztree\", attrs: { id: \"rootTreeNenu\" } })\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/cache-loader/dist/cjs.js?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"5354fe5c-vue-loader-template\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&\n");

/***/ }),

/***/ "./src/common/zTree/js/jquery.ztree.all.js":
/*!*************************************************!*\
  !*** ./src/common/zTree/js/jquery.ztree.all.js ***!
  \*************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* WEBPACK VAR INJECTION */(function(jQuery) {/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es6.array.find */ \"./node_modules/core-js/modules/es6.array.find.js\");\n/* harmony import */ var core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_array_find__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es6.regexp.replace */ \"./node_modules/core-js/modules/es6.regexp.replace.js\");\n/* harmony import */ var core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_replace__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! core-js/modules/es6.regexp.split */ \"./node_modules/core-js/modules/es6.regexp.split.js\");\n/* harmony import */ var core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_split__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! core-js/modules/es6.regexp.to-string */ \"./node_modules/core-js/modules/es6.regexp.to-string.js\");\n/* harmony import */ var core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_regexp_to_string__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _Users_apple_WORK_SPACE_20190724user_serve_perge_user_server_page_node_modules_babel_runtime_corejs2_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./node_modules/@babel/runtime-corejs2/helpers/esm/typeof */ \"./node_modules/@babel/runtime-corejs2/helpers/esm/typeof.js\");\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! core-js/modules/es6.function.name */ \"./node_modules/core-js/modules/es6.function.name.js\");\n/* harmony import */ var core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es6_function_name__WEBPACK_IMPORTED_MODULE_5__);\n\n\n\n\n\n\n\n/*\n * JQuery zTree core v3.5.29\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2017-06-19\n */\n(function (_$) {\n  var settings = {},\n      roots = {},\n      caches = {},\n      //default consts of core\n  _consts = {\n    className: {\n      BUTTON: \"button\",\n      LEVEL: \"level\",\n      ICO_LOADING: \"ico_loading\",\n      SWITCH: \"switch\",\n      NAME: 'node_name'\n    },\n    event: {\n      NODECREATED: \"ztree_nodeCreated\",\n      CLICK: \"ztree_click\",\n      EXPAND: \"ztree_expand\",\n      COLLAPSE: \"ztree_collapse\",\n      ASYNC_SUCCESS: \"ztree_async_success\",\n      ASYNC_ERROR: \"ztree_async_error\",\n      REMOVE: \"ztree_remove\",\n      SELECTED: \"ztree_selected\",\n      UNSELECTED: \"ztree_unselected\"\n    },\n    id: {\n      A: \"_a\",\n      ICON: \"_ico\",\n      SPAN: \"_span\",\n      SWITCH: \"_switch\",\n      UL: \"_ul\"\n    },\n    line: {\n      ROOT: \"root\",\n      ROOTS: \"roots\",\n      CENTER: \"center\",\n      BOTTOM: \"bottom\",\n      NOLINE: \"noline\",\n      LINE: \"line\"\n    },\n    folder: {\n      OPEN: \"open\",\n      CLOSE: \"close\",\n      DOCU: \"docu\"\n    },\n    node: {\n      CURSELECTED: \"curSelectedNode\"\n    }\n  },\n      //default setting of core\n  _setting = {\n    treeId: \"\",\n    treeObj: null,\n    view: {\n      addDiyDom: null,\n      autoCancelSelected: true,\n      dblClickExpand: true,\n      expandSpeed: \"fast\",\n      fontCss: {},\n      nameIsHTML: false,\n      selectedMulti: true,\n      showIcon: true,\n      showLine: true,\n      showTitle: true,\n      txtSelectedEnable: false\n    },\n    data: {\n      key: {\n        children: \"children\",\n        name: \"name\",\n        title: \"\",\n        url: \"url\",\n        icon: \"icon\"\n      },\n      simpleData: {\n        enable: false,\n        idKey: \"id\",\n        pIdKey: \"pId\",\n        rootPId: null\n      },\n      keep: {\n        parent: false,\n        leaf: false\n      }\n    },\n    async: {\n      enable: false,\n      contentType: \"application/x-www-form-urlencoded\",\n      type: \"post\",\n      dataType: \"text\",\n      url: \"\",\n      autoParam: [],\n      otherParam: [],\n      dataFilter: null\n    },\n    callback: {\n      beforeAsync: null,\n      beforeClick: null,\n      beforeDblClick: null,\n      beforeRightClick: null,\n      beforeMouseDown: null,\n      beforeMouseUp: null,\n      beforeExpand: null,\n      beforeCollapse: null,\n      beforeRemove: null,\n      onAsyncError: null,\n      onAsyncSuccess: null,\n      onNodeCreated: null,\n      onClick: null,\n      onDblClick: null,\n      onRightClick: null,\n      onMouseDown: null,\n      onMouseUp: null,\n      onExpand: null,\n      onCollapse: null,\n      onRemove: null\n    }\n  },\n      //default root of core\n  //zTree use root to save full data\n  _initRoot = function _initRoot(setting) {\n    var r = data.getRoot(setting);\n\n    if (!r) {\n      r = {};\n      data.setRoot(setting, r);\n    }\n\n    r[setting.data.key.children] = [];\n    r.expandTriggerFlag = false;\n    r.curSelectedList = [];\n    r.noSelection = true;\n    r.createdNodes = [];\n    r.zId = 0;\n    r._ver = new Date().getTime();\n  },\n      //default cache of core\n  _initCache = function _initCache(setting) {\n    var c = data.getCache(setting);\n\n    if (!c) {\n      c = {};\n      data.setCache(setting, c);\n    }\n\n    c.nodes = [];\n    c.doms = [];\n  },\n      //default bindEvent of core\n  _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.bind(c.NODECREATED, function (event, treeId, node) {\n      tools.apply(setting.callback.onNodeCreated, [event, treeId, node]);\n    });\n    o.bind(c.CLICK, function (event, srcEvent, treeId, node, clickFlag) {\n      tools.apply(setting.callback.onClick, [srcEvent, treeId, node, clickFlag]);\n    });\n    o.bind(c.EXPAND, function (event, treeId, node) {\n      tools.apply(setting.callback.onExpand, [event, treeId, node]);\n    });\n    o.bind(c.COLLAPSE, function (event, treeId, node) {\n      tools.apply(setting.callback.onCollapse, [event, treeId, node]);\n    });\n    o.bind(c.ASYNC_SUCCESS, function (event, treeId, node, msg) {\n      tools.apply(setting.callback.onAsyncSuccess, [event, treeId, node, msg]);\n    });\n    o.bind(c.ASYNC_ERROR, function (event, treeId, node, XMLHttpRequest, textStatus, errorThrown) {\n      tools.apply(setting.callback.onAsyncError, [event, treeId, node, XMLHttpRequest, textStatus, errorThrown]);\n    });\n    o.bind(c.REMOVE, function (event, treeId, treeNode) {\n      tools.apply(setting.callback.onRemove, [event, treeId, treeNode]);\n    });\n    o.bind(c.SELECTED, function (event, treeId, node) {\n      tools.apply(setting.callback.onSelected, [treeId, node]);\n    });\n    o.bind(c.UNSELECTED, function (event, treeId, node) {\n      tools.apply(setting.callback.onUnSelected, [treeId, node]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.unbind(c.NODECREATED).unbind(c.CLICK).unbind(c.EXPAND).unbind(c.COLLAPSE).unbind(c.ASYNC_SUCCESS).unbind(c.ASYNC_ERROR).unbind(c.REMOVE).unbind(c.SELECTED).unbind(c.UNSELECTED);\n  },\n      //default event proxy of core\n  _eventProxy = function _eventProxy(event) {\n    var target = event.target,\n        setting = data.getSetting(event.data.treeId),\n        tId = \"\",\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null,\n        tmp = null;\n\n    if (tools.eqs(event.type, \"mousedown\")) {\n      treeEventType = \"mousedown\";\n    } else if (tools.eqs(event.type, \"mouseup\")) {\n      treeEventType = \"mouseup\";\n    } else if (tools.eqs(event.type, \"contextmenu\")) {\n      treeEventType = \"contextmenu\";\n    } else if (tools.eqs(event.type, \"click\")) {\n      if (tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.SWITCH) !== null) {\n        tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"switchNode\";\n      } else {\n        tmp = tools.getMDom(setting, target, [{\n          tagName: \"a\",\n          attrName: \"treeNode\" + consts.id.A\n        }]);\n\n        if (tmp) {\n          tId = tools.getNodeMainDom(tmp).id;\n          nodeEventType = \"clickNode\";\n        }\n      }\n    } else if (tools.eqs(event.type, \"dblclick\")) {\n      treeEventType = \"dblclick\";\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n        nodeEventType = \"switchNode\";\n      }\n    }\n\n    if (treeEventType.length > 0 && tId.length == 0) {\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n      }\n    } // event to node\n\n\n    if (tId.length > 0) {\n      node = data.getNodeCache(setting, tId);\n\n      switch (nodeEventType) {\n        case \"switchNode\":\n          if (!node.isParent) {\n            nodeEventType = \"\";\n          } else if (tools.eqs(event.type, \"click\") || tools.eqs(event.type, \"dblclick\") && tools.apply(setting.view.dblClickExpand, [setting.treeId, node], setting.view.dblClickExpand)) {\n            nodeEventCallback = handler.onSwitchNode;\n          } else {\n            nodeEventType = \"\";\n          }\n\n          break;\n\n        case \"clickNode\":\n          nodeEventCallback = handler.onClickNode;\n          break;\n      }\n    } // event to zTree\n\n\n    switch (treeEventType) {\n      case \"mousedown\":\n        treeEventCallback = handler.onZTreeMousedown;\n        break;\n\n      case \"mouseup\":\n        treeEventCallback = handler.onZTreeMouseup;\n        break;\n\n      case \"dblclick\":\n        treeEventCallback = handler.onZTreeDblclick;\n        break;\n\n      case \"contextmenu\":\n        treeEventCallback = handler.onZTreeContextmenu;\n        break;\n    }\n\n    var proxyResult = {\n      stop: false,\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      //default init node of core\n  _initNode = function _initNode(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\n    if (!n) return;\n    var r = data.getRoot(setting),\n        childKey = setting.data.key.children;\n    n.level = level;\n    n.tId = setting.treeId + \"_\" + ++r.zId;\n    n.parentTId = parentNode ? parentNode.tId : null;\n    n.open = typeof n.open == \"string\" ? tools.eqs(n.open, \"true\") : !!n.open;\n\n    if (n[childKey] && n[childKey].length > 0) {\n      n.isParent = true;\n      n.zAsync = true;\n    } else {\n      n.isParent = typeof n.isParent == \"string\" ? tools.eqs(n.isParent, \"true\") : !!n.isParent;\n      n.open = n.isParent && !setting.async.enable ? n.open : false;\n      n.zAsync = !n.isParent;\n    }\n\n    n.isFirstNode = isFirstNode;\n    n.isLastNode = isLastNode;\n\n    n.getParentNode = function () {\n      return data.getNodeCache(setting, n.parentTId);\n    };\n\n    n.getPreNode = function () {\n      return data.getPreNode(setting, n);\n    };\n\n    n.getNextNode = function () {\n      return data.getNextNode(setting, n);\n    };\n\n    n.getIndex = function () {\n      return data.getNodeIndex(setting, n);\n    };\n\n    n.getPath = function () {\n      return data.getNodePath(setting, n);\n    };\n\n    n.isAjaxing = false;\n    data.fixPIdKeyValue(setting, n);\n  },\n      _init = {\n    bind: [_bindEvent],\n    unbind: [_unbindEvent],\n    caches: [_initCache],\n    nodes: [_initNode],\n    proxys: [_eventProxy],\n    roots: [_initRoot],\n    beforeA: [],\n    afterA: [],\n    innerBeforeA: [],\n    innerAfterA: [],\n    zTreeTools: []\n  },\n      //method of operate data\n  data = {\n    addNodeCache: function addNodeCache(setting, node) {\n      data.getCache(setting).nodes[data.getNodeCacheId(node.tId)] = node;\n    },\n    getNodeCacheId: function getNodeCacheId(tId) {\n      return tId.substring(tId.lastIndexOf(\"_\") + 1);\n    },\n    addAfterA: function addAfterA(afterA) {\n      _init.afterA.push(afterA);\n    },\n    addBeforeA: function addBeforeA(beforeA) {\n      _init.beforeA.push(beforeA);\n    },\n    addInnerAfterA: function addInnerAfterA(innerAfterA) {\n      _init.innerAfterA.push(innerAfterA);\n    },\n    addInnerBeforeA: function addInnerBeforeA(innerBeforeA) {\n      _init.innerBeforeA.push(innerBeforeA);\n    },\n    addInitBind: function addInitBind(bindEvent) {\n      _init.bind.push(bindEvent);\n    },\n    addInitUnBind: function addInitUnBind(unbindEvent) {\n      _init.unbind.push(unbindEvent);\n    },\n    addInitCache: function addInitCache(initCache) {\n      _init.caches.push(initCache);\n    },\n    addInitNode: function addInitNode(initNode) {\n      _init.nodes.push(initNode);\n    },\n    addInitProxy: function addInitProxy(initProxy, isFirst) {\n      if (!!isFirst) {\n        _init.proxys.splice(0, 0, initProxy);\n      } else {\n        _init.proxys.push(initProxy);\n      }\n    },\n    addInitRoot: function addInitRoot(initRoot) {\n      _init.roots.push(initRoot);\n    },\n    addNodesData: function addNodesData(setting, parentNode, index, nodes) {\n      var childKey = setting.data.key.children,\n          params;\n\n      if (!parentNode[childKey]) {\n        parentNode[childKey] = [];\n        index = -1;\n      } else if (index >= parentNode[childKey].length) {\n        index = -1;\n      }\n\n      if (parentNode[childKey].length > 0 && index === 0) {\n        parentNode[childKey][0].isFirstNode = false;\n        view.setNodeLineIcos(setting, parentNode[childKey][0]);\n      } else if (parentNode[childKey].length > 0 && index < 0) {\n        parentNode[childKey][parentNode[childKey].length - 1].isLastNode = false;\n        view.setNodeLineIcos(setting, parentNode[childKey][parentNode[childKey].length - 1]);\n      }\n\n      parentNode.isParent = true;\n\n      if (index < 0) {\n        parentNode[childKey] = parentNode[childKey].concat(nodes);\n      } else {\n        params = [index, 0].concat(nodes);\n        parentNode[childKey].splice.apply(parentNode[childKey], params);\n      }\n    },\n    addSelectedNode: function addSelectedNode(setting, node) {\n      var root = data.getRoot(setting);\n\n      if (!data.isSelectedNode(setting, node)) {\n        root.curSelectedList.push(node);\n      }\n    },\n    addCreatedNode: function addCreatedNode(setting, node) {\n      if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {\n        var root = data.getRoot(setting);\n        root.createdNodes.push(node);\n      }\n    },\n    addZTreeTools: function addZTreeTools(zTreeTools) {\n      _init.zTreeTools.push(zTreeTools);\n    },\n    exSetting: function exSetting(s) {\n      _$.extend(true, _setting, s);\n    },\n    fixPIdKeyValue: function fixPIdKeyValue(setting, node) {\n      if (setting.data.simpleData.enable) {\n        node[setting.data.simpleData.pIdKey] = node.parentTId ? node.getParentNode()[setting.data.simpleData.idKey] : setting.data.simpleData.rootPId;\n      }\n    },\n    getAfterA: function getAfterA(setting, node, array) {\n      for (var i = 0, j = _init.afterA.length; i < j; i++) {\n        _init.afterA[i].apply(this, arguments);\n      }\n    },\n    getBeforeA: function getBeforeA(setting, node, array) {\n      for (var i = 0, j = _init.beforeA.length; i < j; i++) {\n        _init.beforeA[i].apply(this, arguments);\n      }\n    },\n    getInnerAfterA: function getInnerAfterA(setting, node, array) {\n      for (var i = 0, j = _init.innerAfterA.length; i < j; i++) {\n        _init.innerAfterA[i].apply(this, arguments);\n      }\n    },\n    getInnerBeforeA: function getInnerBeforeA(setting, node, array) {\n      for (var i = 0, j = _init.innerBeforeA.length; i < j; i++) {\n        _init.innerBeforeA[i].apply(this, arguments);\n      }\n    },\n    getCache: function getCache(setting) {\n      return caches[setting.treeId];\n    },\n    getNodeIndex: function getNodeIndex(setting, node) {\n      if (!node) return null;\n      var childKey = setting.data.key.children,\n          p = node.parentTId ? node.getParentNode() : data.getRoot(setting);\n\n      for (var i = 0, l = p[childKey].length - 1; i <= l; i++) {\n        if (p[childKey][i] === node) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n    getNextNode: function getNextNode(setting, node) {\n      if (!node) return null;\n      var childKey = setting.data.key.children,\n          p = node.parentTId ? node.getParentNode() : data.getRoot(setting);\n\n      for (var i = 0, l = p[childKey].length - 1; i <= l; i++) {\n        if (p[childKey][i] === node) {\n          return i == l ? null : p[childKey][i + 1];\n        }\n      }\n\n      return null;\n    },\n    getNodeByParam: function getNodeByParam(setting, nodes, key, value) {\n      if (!nodes || !key) return null;\n      var childKey = setting.data.key.children;\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        if (nodes[i][key] == value) {\n          return nodes[i];\n        }\n\n        var tmp = data.getNodeByParam(setting, nodes[i][childKey], key, value);\n        if (tmp) return tmp;\n      }\n\n      return null;\n    },\n    getNodeCache: function getNodeCache(setting, tId) {\n      if (!tId) return null;\n      var n = caches[setting.treeId].nodes[data.getNodeCacheId(tId)];\n      return n ? n : null;\n    },\n    getNodeName: function getNodeName(setting, node) {\n      var nameKey = setting.data.key.name;\n      return \"\" + node[nameKey];\n    },\n    getNodePath: function getNodePath(setting, node) {\n      if (!node) return null;\n      var path;\n\n      if (node.parentTId) {\n        path = node.getParentNode().getPath();\n      } else {\n        path = [];\n      }\n\n      if (path) {\n        path.push(node);\n      }\n\n      return path;\n    },\n    getNodeTitle: function getNodeTitle(setting, node) {\n      var t = setting.data.key.title === \"\" ? setting.data.key.name : setting.data.key.title;\n      return \"\" + node[t];\n    },\n    getNodes: function getNodes(setting) {\n      return data.getRoot(setting)[setting.data.key.children];\n    },\n    getNodesByParam: function getNodesByParam(setting, nodes, key, value) {\n      if (!nodes || !key) return [];\n      var childKey = setting.data.key.children,\n          result = [];\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        if (nodes[i][key] == value) {\n          result.push(nodes[i]);\n        }\n\n        result = result.concat(data.getNodesByParam(setting, nodes[i][childKey], key, value));\n      }\n\n      return result;\n    },\n    getNodesByParamFuzzy: function getNodesByParamFuzzy(setting, nodes, key, value) {\n      if (!nodes || !key) return [];\n      var childKey = setting.data.key.children,\n          result = [];\n      value = value.toLowerCase();\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        if (typeof nodes[i][key] == \"string\" && nodes[i][key].toLowerCase().indexOf(value) > -1) {\n          result.push(nodes[i]);\n        }\n\n        result = result.concat(data.getNodesByParamFuzzy(setting, nodes[i][childKey], key, value));\n      }\n\n      return result;\n    },\n    getNodesByFilter: function getNodesByFilter(setting, nodes, filter, isSingle, invokeParam) {\n      if (!nodes) return isSingle ? null : [];\n      var childKey = setting.data.key.children,\n          result = isSingle ? null : [];\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        if (tools.apply(filter, [nodes[i], invokeParam], false)) {\n          if (isSingle) {\n            return nodes[i];\n          }\n\n          result.push(nodes[i]);\n        }\n\n        var tmpResult = data.getNodesByFilter(setting, nodes[i][childKey], filter, isSingle, invokeParam);\n\n        if (isSingle && !!tmpResult) {\n          return tmpResult;\n        }\n\n        result = isSingle ? tmpResult : result.concat(tmpResult);\n      }\n\n      return result;\n    },\n    getPreNode: function getPreNode(setting, node) {\n      if (!node) return null;\n      var childKey = setting.data.key.children,\n          p = node.parentTId ? node.getParentNode() : data.getRoot(setting);\n\n      for (var i = 0, l = p[childKey].length; i < l; i++) {\n        if (p[childKey][i] === node) {\n          return i == 0 ? null : p[childKey][i - 1];\n        }\n      }\n\n      return null;\n    },\n    getRoot: function getRoot(setting) {\n      return setting ? roots[setting.treeId] : null;\n    },\n    getRoots: function getRoots() {\n      return roots;\n    },\n    getSetting: function getSetting(treeId) {\n      return settings[treeId];\n    },\n    getSettings: function getSettings() {\n      return settings;\n    },\n    getZTreeTools: function getZTreeTools(treeId) {\n      var r = this.getRoot(this.getSetting(treeId));\n      return r ? r.treeTools : null;\n    },\n    initCache: function initCache(setting) {\n      for (var i = 0, j = _init.caches.length; i < j; i++) {\n        _init.caches[i].apply(this, arguments);\n      }\n    },\n    initNode: function initNode(setting, level, node, parentNode, preNode, nextNode) {\n      for (var i = 0, j = _init.nodes.length; i < j; i++) {\n        _init.nodes[i].apply(this, arguments);\n      }\n    },\n    initRoot: function initRoot(setting) {\n      for (var i = 0, j = _init.roots.length; i < j; i++) {\n        _init.roots[i].apply(this, arguments);\n      }\n    },\n    isSelectedNode: function isSelectedNode(setting, node) {\n      var root = data.getRoot(setting);\n\n      for (var i = 0, j = root.curSelectedList.length; i < j; i++) {\n        if (node === root.curSelectedList[i]) return true;\n      }\n\n      return false;\n    },\n    removeNodeCache: function removeNodeCache(setting, node) {\n      var childKey = setting.data.key.children;\n\n      if (node[childKey]) {\n        for (var i = 0, l = node[childKey].length; i < l; i++) {\n          data.removeNodeCache(setting, node[childKey][i]);\n        }\n      }\n\n      data.getCache(setting).nodes[data.getNodeCacheId(node.tId)] = null;\n    },\n    removeSelectedNode: function removeSelectedNode(setting, node) {\n      var root = data.getRoot(setting);\n\n      for (var i = 0, j = root.curSelectedList.length; i < j; i++) {\n        if (node === root.curSelectedList[i] || !data.getNodeCache(setting, root.curSelectedList[i].tId)) {\n          root.curSelectedList.splice(i, 1);\n          setting.treeObj.trigger(consts.event.UNSELECTED, [setting.treeId, node]);\n          i--;\n          j--;\n        }\n      }\n    },\n    setCache: function setCache(setting, cache) {\n      caches[setting.treeId] = cache;\n    },\n    setRoot: function setRoot(setting, root) {\n      roots[setting.treeId] = root;\n    },\n    setZTreeTools: function setZTreeTools(setting, zTreeTools) {\n      for (var i = 0, j = _init.zTreeTools.length; i < j; i++) {\n        _init.zTreeTools[i].apply(this, arguments);\n      }\n    },\n    transformToArrayFormat: function transformToArrayFormat(setting, nodes) {\n      if (!nodes) return [];\n      var childKey = setting.data.key.children,\n          r = [];\n\n      if (tools.isArray(nodes)) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          r.push(nodes[i]);\n          if (nodes[i][childKey]) r = r.concat(data.transformToArrayFormat(setting, nodes[i][childKey]));\n        }\n      } else {\n        r.push(nodes);\n        if (nodes[childKey]) r = r.concat(data.transformToArrayFormat(setting, nodes[childKey]));\n      }\n\n      return r;\n    },\n    transformTozTreeFormat: function transformTozTreeFormat(setting, sNodes) {\n      var i,\n          l,\n          key = setting.data.simpleData.idKey,\n          parentKey = setting.data.simpleData.pIdKey,\n          childKey = setting.data.key.children;\n      if (!key || key == \"\" || !sNodes) return [];\n\n      if (tools.isArray(sNodes)) {\n        var r = [];\n        var tmpMap = {};\n\n        for (i = 0, l = sNodes.length; i < l; i++) {\n          tmpMap[sNodes[i][key]] = sNodes[i];\n        }\n\n        for (i = 0, l = sNodes.length; i < l; i++) {\n          if (tmpMap[sNodes[i][parentKey]] && sNodes[i][key] != sNodes[i][parentKey]) {\n            if (!tmpMap[sNodes[i][parentKey]][childKey]) tmpMap[sNodes[i][parentKey]][childKey] = [];\n            tmpMap[sNodes[i][parentKey]][childKey].push(sNodes[i]);\n          } else {\n            r.push(sNodes[i]);\n          }\n        }\n\n        return r;\n      } else {\n        return [sNodes];\n      }\n    }\n  },\n      //method of event proxy\n  event = {\n    bindEvent: function bindEvent(setting) {\n      for (var i = 0, j = _init.bind.length; i < j; i++) {\n        _init.bind[i].apply(this, arguments);\n      }\n    },\n    unbindEvent: function unbindEvent(setting) {\n      for (var i = 0, j = _init.unbind.length; i < j; i++) {\n        _init.unbind[i].apply(this, arguments);\n      }\n    },\n    bindTree: function bindTree(setting) {\n      var eventParam = {\n        treeId: setting.treeId\n      },\n          o = setting.treeObj;\n\n      if (!setting.view.txtSelectedEnable) {\n        // for can't select text\n        o.bind('selectstart', handler.onSelectStart).css({\n          \"-moz-user-select\": \"-moz-none\"\n        });\n      }\n\n      o.bind('click', eventParam, event.proxy);\n      o.bind('dblclick', eventParam, event.proxy);\n      o.bind('mouseover', eventParam, event.proxy);\n      o.bind('mouseout', eventParam, event.proxy);\n      o.bind('mousedown', eventParam, event.proxy);\n      o.bind('mouseup', eventParam, event.proxy);\n      o.bind('contextmenu', eventParam, event.proxy);\n    },\n    unbindTree: function unbindTree(setting) {\n      var o = setting.treeObj;\n      o.unbind('selectstart', handler.onSelectStart).unbind('click', event.proxy).unbind('dblclick', event.proxy).unbind('mouseover', event.proxy).unbind('mouseout', event.proxy).unbind('mousedown', event.proxy).unbind('mouseup', event.proxy).unbind('contextmenu', event.proxy);\n    },\n    doProxy: function doProxy(e) {\n      var results = [];\n\n      for (var i = 0, j = _init.proxys.length; i < j; i++) {\n        var proxyResult = _init.proxys[i].apply(this, arguments);\n\n        results.push(proxyResult);\n\n        if (proxyResult.stop) {\n          break;\n        }\n      }\n\n      return results;\n    },\n    proxy: function proxy(e) {\n      var setting = data.getSetting(e.data.treeId);\n      if (!tools.uCanDo(setting, e)) return true;\n      var results = event.doProxy(e),\n          r = true,\n          x = false;\n\n      for (var i = 0, l = results.length; i < l; i++) {\n        var proxyResult = results[i];\n\n        if (proxyResult.nodeEventCallback) {\n          x = true;\n          r = proxyResult.nodeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;\n        }\n\n        if (proxyResult.treeEventCallback) {\n          x = true;\n          r = proxyResult.treeEventCallback.apply(proxyResult, [e, proxyResult.node]) && r;\n        }\n      }\n\n      return r;\n    }\n  },\n      //method of event handler\n  handler = {\n    onSwitchNode: function onSwitchNode(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (node.open) {\n        if (tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false) return true;\n        data.getRoot(setting).expandTriggerFlag = true;\n        view.switchNode(setting, node);\n      } else {\n        if (tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false) return true;\n        data.getRoot(setting).expandTriggerFlag = true;\n        view.switchNode(setting, node);\n      }\n\n      return true;\n    },\n    onClickNode: function onClickNode(event, node) {\n      var setting = data.getSetting(event.data.treeId),\n          clickFlag = setting.view.autoCancelSelected && (event.ctrlKey || event.metaKey) && data.isSelectedNode(setting, node) ? 0 : setting.view.autoCancelSelected && (event.ctrlKey || event.metaKey) && setting.view.selectedMulti ? 2 : 1;\n      if (tools.apply(setting.callback.beforeClick, [setting.treeId, node, clickFlag], true) == false) return true;\n\n      if (clickFlag === 0) {\n        view.cancelPreSelectedNode(setting, node);\n      } else {\n        view.selectNode(setting, node, clickFlag === 2);\n      }\n\n      setting.treeObj.trigger(consts.event.CLICK, [event, setting.treeId, node, clickFlag]);\n      return true;\n    },\n    onZTreeMousedown: function onZTreeMousedown(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeMouseDown, [setting.treeId, node], true)) {\n        tools.apply(setting.callback.onMouseDown, [event, setting.treeId, node]);\n      }\n\n      return true;\n    },\n    onZTreeMouseup: function onZTreeMouseup(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeMouseUp, [setting.treeId, node], true)) {\n        tools.apply(setting.callback.onMouseUp, [event, setting.treeId, node]);\n      }\n\n      return true;\n    },\n    onZTreeDblclick: function onZTreeDblclick(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeDblClick, [setting.treeId, node], true)) {\n        tools.apply(setting.callback.onDblClick, [event, setting.treeId, node]);\n      }\n\n      return true;\n    },\n    onZTreeContextmenu: function onZTreeContextmenu(event, node) {\n      var setting = data.getSetting(event.data.treeId);\n\n      if (tools.apply(setting.callback.beforeRightClick, [setting.treeId, node], true)) {\n        tools.apply(setting.callback.onRightClick, [event, setting.treeId, node]);\n      }\n\n      return typeof setting.callback.onRightClick != \"function\";\n    },\n    onSelectStart: function onSelectStart(e) {\n      var n = e.originalEvent.srcElement.nodeName.toLowerCase();\n      return n === \"input\" || n === \"textarea\";\n    }\n  },\n      //method of tools for zTree\n  tools = {\n    apply: function apply(fun, param, defaultValue) {\n      if (typeof fun == \"function\") {\n        return fun.apply(zt, param ? param : []);\n      }\n\n      return defaultValue;\n    },\n    canAsync: function canAsync(setting, node) {\n      var childKey = setting.data.key.children;\n      return setting.async.enable && node && node.isParent && !(node.zAsync || node[childKey] && node[childKey].length > 0);\n    },\n    clone: function clone(obj) {\n      if (obj === null) return null;\n      var o = tools.isArray(obj) ? [] : {};\n\n      for (var i in obj) {\n        o[i] = obj[i] instanceof Date ? new Date(obj[i].getTime()) : Object(_Users_apple_WORK_SPACE_20190724user_serve_perge_user_server_page_node_modules_babel_runtime_corejs2_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(obj[i]) === \"object\" ? tools.clone(obj[i]) : obj[i];\n      }\n\n      return o;\n    },\n    eqs: function eqs(str1, str2) {\n      return str1.toLowerCase() === str2.toLowerCase();\n    },\n    isArray: function isArray(arr) {\n      return Object.prototype.toString.apply(arr) === \"[object Array]\";\n    },\n    isElement: function isElement(o) {\n      return (typeof HTMLElement === \"undefined\" ? \"undefined\" : Object(_Users_apple_WORK_SPACE_20190724user_serve_perge_user_server_page_node_modules_babel_runtime_corejs2_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(HTMLElement)) === \"object\" ? o instanceof HTMLElement : //DOM2\n      o && Object(_Users_apple_WORK_SPACE_20190724user_serve_perge_user_server_page_node_modules_babel_runtime_corejs2_helpers_esm_typeof__WEBPACK_IMPORTED_MODULE_4__[\"default\"])(o) === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName === \"string\";\n    },\n    $: function $(node, exp, setting) {\n      if (!!exp && typeof exp != \"string\") {\n        setting = exp;\n        exp = \"\";\n      }\n\n      if (typeof node == \"string\") {\n        return _$(node, setting ? setting.treeObj.get(0).ownerDocument : null);\n      } else {\n        return _$(\"#\" + node.tId + exp, setting ? setting.treeObj : null);\n      }\n    },\n    getMDom: function getMDom(setting, curDom, targetExpr) {\n      if (!curDom) return null;\n\n      while (curDom && curDom.id !== setting.treeId) {\n        for (var i = 0, l = targetExpr.length; curDom.tagName && i < l; i++) {\n          if (tools.eqs(curDom.tagName, targetExpr[i].tagName) && curDom.getAttribute(targetExpr[i].attrName) !== null) {\n            return curDom;\n          }\n        }\n\n        curDom = curDom.parentNode;\n      }\n\n      return null;\n    },\n    getNodeMainDom: function getNodeMainDom(target) {\n      return _$(target).parent(\"li\").get(0) || _$(target).parentsUntil(\"li\").parent().get(0);\n    },\n    isChildOrSelf: function isChildOrSelf(dom, parentId) {\n      return _$(dom).closest(\"#\" + parentId).length > 0;\n    },\n    uCanDo: function uCanDo(setting, e) {\n      return true;\n    }\n  },\n      //method of operate ztree dom\n  view = {\n    addNodes: function addNodes(setting, parentNode, index, newNodes, isSilent) {\n      if (setting.data.keep.leaf && parentNode && !parentNode.isParent) {\n        return;\n      }\n\n      if (!tools.isArray(newNodes)) {\n        newNodes = [newNodes];\n      }\n\n      if (setting.data.simpleData.enable) {\n        newNodes = data.transformTozTreeFormat(setting, newNodes);\n      }\n\n      if (parentNode) {\n        var target_switchObj = $$(parentNode, consts.id.SWITCH, setting),\n            target_icoObj = $$(parentNode, consts.id.ICON, setting),\n            target_ulObj = $$(parentNode, consts.id.UL, setting);\n\n        if (!parentNode.open) {\n          view.replaceSwitchClass(parentNode, target_switchObj, consts.folder.CLOSE);\n          view.replaceIcoClass(parentNode, target_icoObj, consts.folder.CLOSE);\n          parentNode.open = false;\n          target_ulObj.css({\n            \"display\": \"none\"\n          });\n        }\n\n        data.addNodesData(setting, parentNode, index, newNodes);\n        view.createNodes(setting, parentNode.level + 1, newNodes, parentNode, index);\n\n        if (!isSilent) {\n          view.expandCollapseParentNode(setting, parentNode, true);\n        }\n      } else {\n        data.addNodesData(setting, data.getRoot(setting), index, newNodes);\n        view.createNodes(setting, 0, newNodes, null, index);\n      }\n    },\n    appendNodes: function appendNodes(setting, level, nodes, parentNode, index, initFlag, openFlag) {\n      if (!nodes) return [];\n      var html = [],\n          childKey = setting.data.key.children;\n      var tmpPNode = parentNode ? parentNode : data.getRoot(setting),\n          tmpPChild = tmpPNode[childKey],\n          isFirstNode,\n          isLastNode;\n\n      if (!tmpPChild || index >= tmpPChild.length - nodes.length) {\n        index = -1;\n      }\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        var node = nodes[i];\n\n        if (initFlag) {\n          isFirstNode = (index === 0 || tmpPChild.length == nodes.length) && i == 0;\n          isLastNode = index < 0 && i == nodes.length - 1;\n          data.initNode(setting, level, node, parentNode, isFirstNode, isLastNode, openFlag);\n          data.addNodeCache(setting, node);\n        }\n\n        var childHtml = [];\n\n        if (node[childKey] && node[childKey].length > 0) {\n          //make child html first, because checkType\n          childHtml = view.appendNodes(setting, level + 1, node[childKey], node, -1, initFlag, openFlag && node.open);\n        }\n\n        if (openFlag) {\n          view.makeDOMNodeMainBefore(html, setting, node);\n          view.makeDOMNodeLine(html, setting, node);\n          data.getBeforeA(setting, node, html);\n          view.makeDOMNodeNameBefore(html, setting, node);\n          data.getInnerBeforeA(setting, node, html);\n          view.makeDOMNodeIcon(html, setting, node);\n          data.getInnerAfterA(setting, node, html);\n          view.makeDOMNodeNameAfter(html, setting, node);\n          data.getAfterA(setting, node, html);\n\n          if (node.isParent && node.open) {\n            view.makeUlHtml(setting, node, html, childHtml.join(''));\n          }\n\n          view.makeDOMNodeMainAfter(html, setting, node);\n          data.addCreatedNode(setting, node);\n        }\n      }\n\n      return html;\n    },\n    appendParentULDom: function appendParentULDom(setting, node) {\n      var html = [],\n          nObj = $$(node, setting);\n\n      if (!nObj.get(0) && !!node.parentTId) {\n        view.appendParentULDom(setting, node.getParentNode());\n        nObj = $$(node, setting);\n      }\n\n      var ulObj = $$(node, consts.id.UL, setting);\n\n      if (ulObj.get(0)) {\n        ulObj.remove();\n      }\n\n      var childKey = setting.data.key.children,\n          childHtml = view.appendNodes(setting, node.level + 1, node[childKey], node, -1, false, true);\n      view.makeUlHtml(setting, node, html, childHtml.join(''));\n      nObj.append(html.join(''));\n    },\n    asyncNode: function asyncNode(setting, node, isSilent, callback) {\n      var i, l;\n\n      if (node && !node.isParent) {\n        tools.apply(callback);\n        return false;\n      } else if (node && node.isAjaxing) {\n        return false;\n      } else if (tools.apply(setting.callback.beforeAsync, [setting.treeId, node], true) == false) {\n        tools.apply(callback);\n        return false;\n      }\n\n      if (node) {\n        node.isAjaxing = true;\n        var icoObj = $$(node, consts.id.ICON, setting);\n        icoObj.attr({\n          \"style\": \"\",\n          \"class\": consts.className.BUTTON + \" \" + consts.className.ICO_LOADING\n        });\n      }\n\n      var tmpParam = {};\n\n      for (i = 0, l = setting.async.autoParam.length; node && i < l; i++) {\n        var pKey = setting.async.autoParam[i].split(\"=\"),\n            spKey = pKey;\n\n        if (pKey.length > 1) {\n          spKey = pKey[1];\n          pKey = pKey[0];\n        }\n\n        tmpParam[spKey] = node[pKey];\n      }\n\n      if (tools.isArray(setting.async.otherParam)) {\n        for (i = 0, l = setting.async.otherParam.length; i < l; i += 2) {\n          tmpParam[setting.async.otherParam[i]] = setting.async.otherParam[i + 1];\n        }\n      } else {\n        for (var p in setting.async.otherParam) {\n          tmpParam[p] = setting.async.otherParam[p];\n        }\n      }\n\n      var _tmpV = data.getRoot(setting)._ver;\n\n      _$.ajax({\n        contentType: setting.async.contentType,\n        cache: false,\n        type: setting.async.type,\n        xhrFields: {\n          withCredentials: true\n        },\n        url: tools.apply(setting.async.url, [setting.treeId, node], setting.async.url),\n        data: setting.async.contentType.indexOf('application/json') > -1 ? JSON.stringify(tmpParam) : tmpParam,\n        dataType: setting.async.dataType,\n        success: function success(msg) {\n          if (_tmpV != data.getRoot(setting)._ver) {\n            return;\n          }\n\n          var newNodes = [];\n\n          try {\n            if (!msg || msg.length == 0) {\n              newNodes = [];\n            } else if (typeof msg == \"string\") {\n              newNodes = eval(\"(\" + msg + \")\");\n            } else {\n              newNodes = msg;\n            }\n          } catch (err) {\n            newNodes = msg;\n          }\n\n          if (node) {\n            node.isAjaxing = null;\n            node.zAsync = true;\n          }\n\n          view.setNodeLineIcos(setting, node);\n\n          if (newNodes && newNodes !== \"\") {\n            newNodes = tools.apply(setting.async.dataFilter, [setting.treeId, node, newNodes], newNodes);\n            view.addNodes(setting, node, -1, !!newNodes ? tools.clone(newNodes) : [], !!isSilent);\n          } else {\n            view.addNodes(setting, node, -1, [], !!isSilent);\n          }\n\n          setting.treeObj.trigger(consts.event.ASYNC_SUCCESS, [setting.treeId, node, msg]);\n          tools.apply(callback);\n        },\n        error: function error(XMLHttpRequest, textStatus, errorThrown) {\n          if (_tmpV != data.getRoot(setting)._ver) {\n            return;\n          }\n\n          if (node) node.isAjaxing = null;\n          view.setNodeLineIcos(setting, node);\n          setting.treeObj.trigger(consts.event.ASYNC_ERROR, [setting.treeId, node, XMLHttpRequest, textStatus, errorThrown]);\n        }\n      });\n\n      return true;\n    },\n    cancelPreSelectedNode: function cancelPreSelectedNode(setting, node, excludeNode) {\n      var list = data.getRoot(setting).curSelectedList,\n          i,\n          n;\n\n      for (i = list.length - 1; i >= 0; i--) {\n        n = list[i];\n\n        if (node === n || !node && (!excludeNode || excludeNode !== n)) {\n          $$(n, consts.id.A, setting).removeClass(consts.node.CURSELECTED);\n\n          if (node) {\n            data.removeSelectedNode(setting, node);\n            break;\n          } else {\n            list.splice(i, 1);\n            setting.treeObj.trigger(consts.event.UNSELECTED, [setting.treeId, n]);\n          }\n        }\n      }\n    },\n    createNodeCallback: function createNodeCallback(setting) {\n      if (!!setting.callback.onNodeCreated || !!setting.view.addDiyDom) {\n        var root = data.getRoot(setting);\n\n        while (root.createdNodes.length > 0) {\n          var node = root.createdNodes.shift();\n          tools.apply(setting.view.addDiyDom, [setting.treeId, node]);\n\n          if (!!setting.callback.onNodeCreated) {\n            setting.treeObj.trigger(consts.event.NODECREATED, [setting.treeId, node]);\n          }\n        }\n      }\n    },\n    createNodes: function createNodes(setting, level, nodes, parentNode, index) {\n      if (!nodes || nodes.length == 0) return;\n      var root = data.getRoot(setting),\n          childKey = setting.data.key.children,\n          openFlag = !parentNode || parentNode.open || !!$$(parentNode[childKey][0], setting).get(0);\n      root.createdNodes = [];\n      var zTreeHtml = view.appendNodes(setting, level, nodes, parentNode, index, true, openFlag),\n          parentObj,\n          nextObj;\n\n      if (!parentNode) {\n        parentObj = setting.treeObj; //setting.treeObj.append(zTreeHtml.join(''));\n      } else {\n        var ulObj = $$(parentNode, consts.id.UL, setting);\n\n        if (ulObj.get(0)) {\n          parentObj = ulObj; //ulObj.append(zTreeHtml.join(''));\n        }\n      }\n\n      if (parentObj) {\n        if (index >= 0) {\n          nextObj = parentObj.children()[index];\n        }\n\n        if (index >= 0 && nextObj) {\n          _$(nextObj).before(zTreeHtml.join(''));\n        } else {\n          parentObj.append(zTreeHtml.join(''));\n        }\n      }\n\n      view.createNodeCallback(setting);\n    },\n    destroy: function destroy(setting) {\n      if (!setting) return;\n      data.initCache(setting);\n      data.initRoot(setting);\n      event.unbindTree(setting);\n      event.unbindEvent(setting);\n      setting.treeObj.empty();\n      delete settings[setting.treeId];\n    },\n    expandCollapseNode: function expandCollapseNode(setting, node, expandFlag, animateFlag, callback) {\n      var root = data.getRoot(setting),\n          childKey = setting.data.key.children;\n\n      var tmpCb, _callback;\n\n      if (!node) {\n        tools.apply(callback, []);\n        return;\n      }\n\n      if (root.expandTriggerFlag) {\n        _callback = callback;\n\n        tmpCb = function tmpCb() {\n          if (_callback) _callback();\n\n          if (node.open) {\n            setting.treeObj.trigger(consts.event.EXPAND, [setting.treeId, node]);\n          } else {\n            setting.treeObj.trigger(consts.event.COLLAPSE, [setting.treeId, node]);\n          }\n        };\n\n        callback = tmpCb;\n        root.expandTriggerFlag = false;\n      }\n\n      if (!node.open && node.isParent && (!$$(node, consts.id.UL, setting).get(0) || node[childKey] && node[childKey].length > 0 && !$$(node[childKey][0], setting).get(0))) {\n        view.appendParentULDom(setting, node);\n        view.createNodeCallback(setting);\n      }\n\n      if (node.open == expandFlag) {\n        tools.apply(callback, []);\n        return;\n      }\n\n      var ulObj = $$(node, consts.id.UL, setting),\n          switchObj = $$(node, consts.id.SWITCH, setting),\n          icoObj = $$(node, consts.id.ICON, setting);\n\n      if (node.isParent) {\n        node.open = !node.open;\n\n        if (node.iconOpen && node.iconClose) {\n          icoObj.attr(\"style\", view.makeNodeIcoStyle(setting, node));\n        }\n\n        if (node.open) {\n          view.replaceSwitchClass(node, switchObj, consts.folder.OPEN);\n          view.replaceIcoClass(node, icoObj, consts.folder.OPEN);\n\n          if (animateFlag == false || setting.view.expandSpeed == \"\") {\n            ulObj.show();\n            tools.apply(callback, []);\n          } else {\n            if (node[childKey] && node[childKey].length > 0) {\n              ulObj.slideDown(setting.view.expandSpeed, callback);\n            } else {\n              ulObj.show();\n              tools.apply(callback, []);\n            }\n          }\n        } else {\n          view.replaceSwitchClass(node, switchObj, consts.folder.CLOSE);\n          view.replaceIcoClass(node, icoObj, consts.folder.CLOSE);\n\n          if (animateFlag == false || setting.view.expandSpeed == \"\" || !(node[childKey] && node[childKey].length > 0)) {\n            ulObj.hide();\n            tools.apply(callback, []);\n          } else {\n            ulObj.slideUp(setting.view.expandSpeed, callback);\n          }\n        }\n      } else {\n        tools.apply(callback, []);\n      }\n    },\n    expandCollapseParentNode: function expandCollapseParentNode(setting, node, expandFlag, animateFlag, callback) {\n      if (!node) return;\n\n      if (!node.parentTId) {\n        view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);\n        return;\n      } else {\n        view.expandCollapseNode(setting, node, expandFlag, animateFlag);\n      }\n\n      if (node.parentTId) {\n        view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, animateFlag, callback);\n      }\n    },\n    expandCollapseSonNode: function expandCollapseSonNode(setting, node, expandFlag, animateFlag, callback) {\n      var root = data.getRoot(setting),\n          childKey = setting.data.key.children,\n          treeNodes = node ? node[childKey] : root[childKey],\n          selfAnimateSign = node ? false : animateFlag,\n          expandTriggerFlag = data.getRoot(setting).expandTriggerFlag;\n      data.getRoot(setting).expandTriggerFlag = false;\n\n      if (treeNodes) {\n        for (var i = 0, l = treeNodes.length; i < l; i++) {\n          if (treeNodes[i]) view.expandCollapseSonNode(setting, treeNodes[i], expandFlag, selfAnimateSign);\n        }\n      }\n\n      data.getRoot(setting).expandTriggerFlag = expandTriggerFlag;\n      view.expandCollapseNode(setting, node, expandFlag, animateFlag, callback);\n    },\n    isSelectedNode: function isSelectedNode(setting, node) {\n      if (!node) {\n        return false;\n      }\n\n      var list = data.getRoot(setting).curSelectedList,\n          i;\n\n      for (i = list.length - 1; i >= 0; i--) {\n        if (node === list[i]) {\n          return true;\n        }\n      }\n\n      return false;\n    },\n    makeDOMNodeIcon: function makeDOMNodeIcon(html, setting, node) {\n      var nameStr = data.getNodeName(setting, node),\n          name = setting.view.nameIsHTML ? nameStr : nameStr.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');\n      html.push(\"<span id='\", node.tId, consts.id.ICON, \"' title='' treeNode\", consts.id.ICON, \" class='\", view.makeNodeIcoClass(setting, node), \"' style='\", view.makeNodeIcoStyle(setting, node), \"'></span><span id='\", node.tId, consts.id.SPAN, \"' class='\", consts.className.NAME, \"'>\", name, \"</span>\");\n    },\n    makeDOMNodeLine: function makeDOMNodeLine(html, setting, node) {\n      html.push(\"<span id='\", node.tId, consts.id.SWITCH, \"' title='' class='\", view.makeNodeLineClass(setting, node), \"' treeNode\", consts.id.SWITCH, \"></span>\");\n    },\n    makeDOMNodeMainAfter: function makeDOMNodeMainAfter(html, setting, node) {\n      html.push(\"</li>\");\n    },\n    makeDOMNodeMainBefore: function makeDOMNodeMainBefore(html, setting, node) {\n      html.push(\"<li id='\", node.tId, \"' class='\", consts.className.LEVEL, node.level, \"' tabindex='0' hidefocus='true' treenode>\");\n    },\n    makeDOMNodeNameAfter: function makeDOMNodeNameAfter(html, setting, node) {\n      html.push(\"</a>\");\n    },\n    makeDOMNodeNameBefore: function makeDOMNodeNameBefore(html, setting, node) {\n      var title = data.getNodeTitle(setting, node),\n          url = view.makeNodeUrl(setting, node),\n          fontcss = view.makeNodeFontCss(setting, node),\n          fontStyle = [];\n\n      for (var f in fontcss) {\n        fontStyle.push(f, \":\", fontcss[f], \";\");\n      }\n\n      html.push(\"<a id='\", node.tId, consts.id.A, \"' class='\", consts.className.LEVEL, node.level, \"' treeNode\", consts.id.A, \" onclick=\\\"\", node.click || '', \"\\\" \", url != null && url.length > 0 ? \"href='\" + url + \"'\" : \"\", \" target='\", view.makeNodeTarget(node), \"' style='\", fontStyle.join(''), \"'\");\n\n      if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle) && title) {\n        html.push(\"title='\", title.replace(/'/g, \"&#39;\").replace(/</g, '&lt;').replace(/>/g, '&gt;'), \"'\");\n      }\n\n      html.push(\">\");\n    },\n    makeNodeFontCss: function makeNodeFontCss(setting, node) {\n      var fontCss = tools.apply(setting.view.fontCss, [setting.treeId, node], setting.view.fontCss);\n      return fontCss && typeof fontCss != \"function\" ? fontCss : {};\n    },\n    makeNodeIcoClass: function makeNodeIcoClass(setting, node) {\n      var icoCss = [\"ico\"];\n\n      if (!node.isAjaxing) {\n        icoCss[0] = (node.iconSkin ? node.iconSkin + \"_\" : \"\") + icoCss[0];\n\n        if (node.isParent) {\n          icoCss.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);\n        } else {\n          icoCss.push(consts.folder.DOCU);\n        }\n      }\n\n      return consts.className.BUTTON + \" \" + icoCss.join('_');\n    },\n    makeNodeIcoStyle: function makeNodeIcoStyle(setting, node) {\n      var icoStyle = [];\n\n      if (!node.isAjaxing) {\n        var icon = node.isParent && node.iconOpen && node.iconClose ? node.open ? node.iconOpen : node.iconClose : node[setting.data.key.icon];\n        if (icon) icoStyle.push(\"background:url(\", icon, \") 0 0 no-repeat;\");\n\n        if (setting.view.showIcon == false || !tools.apply(setting.view.showIcon, [setting.treeId, node], true)) {\n          icoStyle.push(\"width:0px;height:0px;\");\n        }\n      }\n\n      return icoStyle.join('');\n    },\n    makeNodeLineClass: function makeNodeLineClass(setting, node) {\n      var lineClass = [];\n\n      if (setting.view.showLine) {\n        if (node.level == 0 && node.isFirstNode && node.isLastNode) {\n          lineClass.push(consts.line.ROOT);\n        } else if (node.level == 0 && node.isFirstNode) {\n          lineClass.push(consts.line.ROOTS);\n        } else if (node.isLastNode) {\n          lineClass.push(consts.line.BOTTOM);\n        } else {\n          lineClass.push(consts.line.CENTER);\n        }\n      } else {\n        lineClass.push(consts.line.NOLINE);\n      }\n\n      if (node.isParent) {\n        lineClass.push(node.open ? consts.folder.OPEN : consts.folder.CLOSE);\n      } else {\n        lineClass.push(consts.folder.DOCU);\n      }\n\n      return view.makeNodeLineClassEx(node) + lineClass.join('_');\n    },\n    makeNodeLineClassEx: function makeNodeLineClassEx(node) {\n      return consts.className.BUTTON + \" \" + consts.className.LEVEL + node.level + \" \" + consts.className.SWITCH + \" \";\n    },\n    makeNodeTarget: function makeNodeTarget(node) {\n      return node.target || \"_blank\";\n    },\n    makeNodeUrl: function makeNodeUrl(setting, node) {\n      var urlKey = setting.data.key.url;\n      return node[urlKey] ? node[urlKey] : null;\n    },\n    makeUlHtml: function makeUlHtml(setting, node, html, content) {\n      html.push(\"<ul id='\", node.tId, consts.id.UL, \"' class='\", consts.className.LEVEL, node.level, \" \", view.makeUlLineClass(setting, node), \"' style='display:\", node.open ? \"block\" : \"none\", \"'>\");\n      html.push(content);\n      html.push(\"</ul>\");\n    },\n    makeUlLineClass: function makeUlLineClass(setting, node) {\n      return setting.view.showLine && !node.isLastNode ? consts.line.LINE : \"\";\n    },\n    removeChildNodes: function removeChildNodes(setting, node) {\n      if (!node) return;\n      var childKey = setting.data.key.children,\n          nodes = node[childKey];\n      if (!nodes) return;\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        data.removeNodeCache(setting, nodes[i]);\n      }\n\n      data.removeSelectedNode(setting);\n      delete node[childKey];\n\n      if (!setting.data.keep.parent) {\n        node.isParent = false;\n        node.open = false;\n        var tmp_switchObj = $$(node, consts.id.SWITCH, setting),\n            tmp_icoObj = $$(node, consts.id.ICON, setting);\n        view.replaceSwitchClass(node, tmp_switchObj, consts.folder.DOCU);\n        view.replaceIcoClass(node, tmp_icoObj, consts.folder.DOCU);\n        $$(node, consts.id.UL, setting).remove();\n      } else {\n        $$(node, consts.id.UL, setting).empty();\n      }\n    },\n    scrollIntoView: function scrollIntoView(dom) {\n      if (!dom) {\n        return;\n      } // code src: http://jsfiddle.net/08u6cxwj/\n\n\n      if (!Element.prototype.scrollIntoViewIfNeeded) {\n        Element.prototype.scrollIntoViewIfNeeded = function (centerIfNeeded) {\n          function withinBounds(value, min, max, extent) {\n            if (false === centerIfNeeded || max <= value + extent && value <= min + extent) {\n              return Math.min(max, Math.max(min, value));\n            } else {\n              return (min + max) / 2;\n            }\n          }\n\n          function makeArea(left, top, width, height) {\n            return {\n              \"left\": left,\n              \"top\": top,\n              \"width\": width,\n              \"height\": height,\n              \"right\": left + width,\n              \"bottom\": top + height,\n              \"translate\": function translate(x, y) {\n                return makeArea(x + left, y + top, width, height);\n              },\n              \"relativeFromTo\": function relativeFromTo(lhs, rhs) {\n                var newLeft = left,\n                    newTop = top;\n                lhs = lhs.offsetParent;\n                rhs = rhs.offsetParent;\n\n                if (lhs === rhs) {\n                  return area;\n                }\n\n                for (; lhs; lhs = lhs.offsetParent) {\n                  newLeft += lhs.offsetLeft + lhs.clientLeft;\n                  newTop += lhs.offsetTop + lhs.clientTop;\n                }\n\n                for (; rhs; rhs = rhs.offsetParent) {\n                  newLeft -= rhs.offsetLeft + rhs.clientLeft;\n                  newTop -= rhs.offsetTop + rhs.clientTop;\n                }\n\n                return makeArea(newLeft, newTop, width, height);\n              }\n            };\n          }\n\n          var parent,\n              elem = this,\n              area = makeArea(this.offsetLeft, this.offsetTop, this.offsetWidth, this.offsetHeight);\n\n          while (tools.isElement(parent = elem.parentNode)) {\n            var clientLeft = parent.offsetLeft + parent.clientLeft;\n            var clientTop = parent.offsetTop + parent.clientTop; // Make area relative to parent's client area.\n\n            area = area.relativeFromTo(elem, parent).translate(-clientLeft, -clientTop);\n            parent.scrollLeft = withinBounds(parent.scrollLeft, area.right - parent.clientWidth, area.left, parent.clientWidth);\n            parent.scrollTop = withinBounds(parent.scrollTop, area.bottom - parent.clientHeight, area.top, parent.clientHeight); // Determine actual scroll amount by reading back scroll properties.\n\n            area = area.translate(clientLeft - parent.scrollLeft, clientTop - parent.scrollTop);\n            elem = parent;\n          }\n        };\n      }\n\n      dom.scrollIntoViewIfNeeded();\n    },\n    setFirstNode: function setFirstNode(setting, parentNode) {\n      var childKey = setting.data.key.children,\n          childLength = parentNode[childKey].length;\n\n      if (childLength > 0) {\n        parentNode[childKey][0].isFirstNode = true;\n      }\n    },\n    setLastNode: function setLastNode(setting, parentNode) {\n      var childKey = setting.data.key.children,\n          childLength = parentNode[childKey].length;\n\n      if (childLength > 0) {\n        parentNode[childKey][childLength - 1].isLastNode = true;\n      }\n    },\n    removeNode: function removeNode(setting, node) {\n      var root = data.getRoot(setting),\n          childKey = setting.data.key.children,\n          parentNode = node.parentTId ? node.getParentNode() : root;\n      node.isFirstNode = false;\n      node.isLastNode = false;\n\n      node.getPreNode = function () {\n        return null;\n      };\n\n      node.getNextNode = function () {\n        return null;\n      };\n\n      if (!data.getNodeCache(setting, node.tId)) {\n        return;\n      }\n\n      $$(node, setting).remove();\n      data.removeNodeCache(setting, node);\n      data.removeSelectedNode(setting, node);\n\n      for (var i = 0, l = parentNode[childKey].length; i < l; i++) {\n        if (parentNode[childKey][i].tId == node.tId) {\n          parentNode[childKey].splice(i, 1);\n          break;\n        }\n      }\n\n      view.setFirstNode(setting, parentNode);\n      view.setLastNode(setting, parentNode);\n      var tmp_ulObj,\n          tmp_switchObj,\n          tmp_icoObj,\n          childLength = parentNode[childKey].length; //repair nodes old parent\n\n      if (!setting.data.keep.parent && childLength == 0) {\n        //old parentNode has no child nodes\n        parentNode.isParent = false;\n        parentNode.open = false;\n        tmp_ulObj = $$(parentNode, consts.id.UL, setting);\n        tmp_switchObj = $$(parentNode, consts.id.SWITCH, setting);\n        tmp_icoObj = $$(parentNode, consts.id.ICON, setting);\n        view.replaceSwitchClass(parentNode, tmp_switchObj, consts.folder.DOCU);\n        view.replaceIcoClass(parentNode, tmp_icoObj, consts.folder.DOCU);\n        tmp_ulObj.css(\"display\", \"none\");\n      } else if (setting.view.showLine && childLength > 0) {\n        //old parentNode has child nodes\n        var newLast = parentNode[childKey][childLength - 1];\n        tmp_ulObj = $$(newLast, consts.id.UL, setting);\n        tmp_switchObj = $$(newLast, consts.id.SWITCH, setting);\n        tmp_icoObj = $$(newLast, consts.id.ICON, setting);\n\n        if (parentNode == root) {\n          if (parentNode[childKey].length == 1) {\n            //node was root, and ztree has only one root after move node\n            view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.ROOT);\n          } else {\n            var tmp_first_switchObj = $$(parentNode[childKey][0], consts.id.SWITCH, setting);\n            view.replaceSwitchClass(parentNode[childKey][0], tmp_first_switchObj, consts.line.ROOTS);\n            view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);\n          }\n        } else {\n          view.replaceSwitchClass(newLast, tmp_switchObj, consts.line.BOTTOM);\n        }\n\n        tmp_ulObj.removeClass(consts.line.LINE);\n      }\n    },\n    replaceIcoClass: function replaceIcoClass(node, obj, newName) {\n      if (!obj || node.isAjaxing) return;\n      var tmpName = obj.attr(\"class\");\n      if (tmpName == undefined) return;\n      var tmpList = tmpName.split(\"_\");\n\n      switch (newName) {\n        case consts.folder.OPEN:\n        case consts.folder.CLOSE:\n        case consts.folder.DOCU:\n          tmpList[tmpList.length - 1] = newName;\n          break;\n      }\n\n      obj.attr(\"class\", tmpList.join(\"_\"));\n    },\n    replaceSwitchClass: function replaceSwitchClass(node, obj, newName) {\n      if (!obj) return;\n      var tmpName = obj.attr(\"class\");\n      if (tmpName == undefined) return;\n      var tmpList = tmpName.split(\"_\");\n\n      switch (newName) {\n        case consts.line.ROOT:\n        case consts.line.ROOTS:\n        case consts.line.CENTER:\n        case consts.line.BOTTOM:\n        case consts.line.NOLINE:\n          tmpList[0] = view.makeNodeLineClassEx(node) + newName;\n          break;\n\n        case consts.folder.OPEN:\n        case consts.folder.CLOSE:\n        case consts.folder.DOCU:\n          tmpList[1] = newName;\n          break;\n      }\n\n      obj.attr(\"class\", tmpList.join(\"_\"));\n\n      if (newName !== consts.folder.DOCU) {\n        obj.removeAttr(\"disabled\");\n      } else {\n        obj.attr(\"disabled\", \"disabled\");\n      }\n    },\n    selectNode: function selectNode(setting, node, addFlag) {\n      if (!addFlag) {\n        view.cancelPreSelectedNode(setting, null, node);\n      }\n\n      $$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED);\n      data.addSelectedNode(setting, node);\n      setting.treeObj.trigger(consts.event.SELECTED, [setting.treeId, node]);\n    },\n    setNodeFontCss: function setNodeFontCss(setting, treeNode) {\n      var aObj = $$(treeNode, consts.id.A, setting),\n          fontCss = view.makeNodeFontCss(setting, treeNode);\n\n      if (fontCss) {\n        aObj.css(fontCss);\n      }\n    },\n    setNodeLineIcos: function setNodeLineIcos(setting, node) {\n      if (!node) return;\n      var switchObj = $$(node, consts.id.SWITCH, setting),\n          ulObj = $$(node, consts.id.UL, setting),\n          icoObj = $$(node, consts.id.ICON, setting),\n          ulLine = view.makeUlLineClass(setting, node);\n\n      if (ulLine.length == 0) {\n        ulObj.removeClass(consts.line.LINE);\n      } else {\n        ulObj.addClass(ulLine);\n      }\n\n      switchObj.attr(\"class\", view.makeNodeLineClass(setting, node));\n\n      if (node.isParent) {\n        switchObj.removeAttr(\"disabled\");\n      } else {\n        switchObj.attr(\"disabled\", \"disabled\");\n      }\n\n      icoObj.removeAttr(\"style\");\n      icoObj.attr(\"style\", view.makeNodeIcoStyle(setting, node));\n      icoObj.attr(\"class\", view.makeNodeIcoClass(setting, node));\n    },\n    setNodeName: function setNodeName(setting, node) {\n      var title = data.getNodeTitle(setting, node),\n          nObj = $$(node, consts.id.SPAN, setting);\n      nObj.empty();\n\n      if (setting.view.nameIsHTML) {\n        nObj.html(data.getNodeName(setting, node));\n      } else {\n        nObj.text(data.getNodeName(setting, node));\n      }\n\n      if (tools.apply(setting.view.showTitle, [setting.treeId, node], setting.view.showTitle)) {\n        var aObj = $$(node, consts.id.A, setting);\n        aObj.attr(\"title\", !title ? \"\" : title);\n      }\n    },\n    setNodeTarget: function setNodeTarget(setting, node) {\n      var aObj = $$(node, consts.id.A, setting);\n      aObj.attr(\"target\", view.makeNodeTarget(node));\n    },\n    setNodeUrl: function setNodeUrl(setting, node) {\n      var aObj = $$(node, consts.id.A, setting),\n          url = view.makeNodeUrl(setting, node);\n\n      if (url == null || url.length == 0) {\n        aObj.removeAttr(\"href\");\n      } else {\n        aObj.attr(\"href\", url);\n      }\n    },\n    switchNode: function switchNode(setting, node) {\n      if (node.open || !tools.canAsync(setting, node)) {\n        view.expandCollapseNode(setting, node, !node.open);\n      } else if (setting.async.enable) {\n        if (!view.asyncNode(setting, node)) {\n          view.expandCollapseNode(setting, node, !node.open);\n          return;\n        }\n      } else if (node) {\n        view.expandCollapseNode(setting, node, !node.open);\n      }\n    }\n  }; // zTree defind\n\n\n  _$.fn.zTree = {\n    consts: _consts,\n    _z: {\n      tools: tools,\n      view: view,\n      event: event,\n      data: data\n    },\n    getZTreeObj: function getZTreeObj(treeId) {\n      var o = data.getZTreeTools(treeId);\n      return o ? o : null;\n    },\n    destroy: function destroy(treeId) {\n      if (!!treeId && treeId.length > 0) {\n        view.destroy(data.getSetting(treeId));\n      } else {\n        for (var s in settings) {\n          view.destroy(settings[s]);\n        }\n      }\n    },\n    init: function init(obj, zSetting, zNodes) {\n      var setting = tools.clone(_setting);\n\n      _$.extend(true, setting, zSetting);\n\n      setting.treeId = obj.attr(\"id\");\n      setting.treeObj = obj;\n      setting.treeObj.empty();\n      settings[setting.treeId] = setting; //For some older browser,(e.g., ie6)\n\n      if (typeof document.body.style.maxHeight === \"undefined\") {\n        setting.view.expandSpeed = \"\";\n      }\n\n      data.initRoot(setting);\n      var root = data.getRoot(setting),\n          childKey = setting.data.key.children;\n      zNodes = zNodes ? tools.clone(tools.isArray(zNodes) ? zNodes : [zNodes]) : [];\n\n      if (setting.data.simpleData.enable) {\n        root[childKey] = data.transformTozTreeFormat(setting, zNodes);\n      } else {\n        root[childKey] = zNodes;\n      }\n\n      data.initCache(setting);\n      event.unbindTree(setting);\n      event.bindTree(setting);\n      event.unbindEvent(setting);\n      event.bindEvent(setting);\n      var zTreeTools = {\n        setting: setting,\n        addNodes: function addNodes(parentNode, index, newNodes, isSilent) {\n          if (!parentNode) parentNode = null;\n          if (parentNode && !parentNode.isParent && setting.data.keep.leaf) return null;\n          var i = parseInt(index, 10);\n\n          if (isNaN(i)) {\n            isSilent = !!newNodes;\n            newNodes = index;\n            index = -1;\n          } else {\n            index = i;\n          }\n\n          if (!newNodes) return null;\n          var xNewNodes = tools.clone(tools.isArray(newNodes) ? newNodes : [newNodes]);\n\n          function addCallback() {\n            view.addNodes(setting, parentNode, index, xNewNodes, isSilent == true);\n          }\n\n          if (tools.canAsync(setting, parentNode)) {\n            view.asyncNode(setting, parentNode, isSilent, addCallback);\n          } else {\n            addCallback();\n          }\n\n          return xNewNodes;\n        },\n        cancelSelectedNode: function cancelSelectedNode(node) {\n          view.cancelPreSelectedNode(setting, node);\n        },\n        destroy: function destroy() {\n          view.destroy(setting);\n        },\n        expandAll: function expandAll(expandFlag) {\n          expandFlag = !!expandFlag;\n          view.expandCollapseSonNode(setting, null, expandFlag, true);\n          return expandFlag;\n        },\n        expandNode: function expandNode(node, expandFlag, sonSign, focus, callbackFlag) {\n          if (!node || !node.isParent) return null;\n\n          if (expandFlag !== true && expandFlag !== false) {\n            expandFlag = !node.open;\n          }\n\n          callbackFlag = !!callbackFlag;\n\n          if (callbackFlag && expandFlag && tools.apply(setting.callback.beforeExpand, [setting.treeId, node], true) == false) {\n            return null;\n          } else if (callbackFlag && !expandFlag && tools.apply(setting.callback.beforeCollapse, [setting.treeId, node], true) == false) {\n            return null;\n          }\n\n          if (expandFlag && node.parentTId) {\n            view.expandCollapseParentNode(setting, node.getParentNode(), expandFlag, false);\n          }\n\n          if (expandFlag === node.open && !sonSign) {\n            return null;\n          }\n\n          data.getRoot(setting).expandTriggerFlag = callbackFlag;\n\n          if (!tools.canAsync(setting, node) && sonSign) {\n            view.expandCollapseSonNode(setting, node, expandFlag, true, showNodeFocus);\n          } else {\n            node.open = !expandFlag;\n            view.switchNode(this.setting, node);\n            showNodeFocus();\n          }\n\n          return expandFlag;\n\n          function showNodeFocus() {\n            var a = $$(node, setting).get(0);\n\n            if (a && focus !== false) {\n              view.scrollIntoView(a);\n            }\n          }\n        },\n        getNodes: function getNodes() {\n          return data.getNodes(setting);\n        },\n        getNodeByParam: function getNodeByParam(key, value, parentNode) {\n          if (!key) return null;\n          return data.getNodeByParam(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n        },\n        getNodeByTId: function getNodeByTId(tId) {\n          return data.getNodeCache(setting, tId);\n        },\n        getNodesByParam: function getNodesByParam(key, value, parentNode) {\n          if (!key) return null;\n          return data.getNodesByParam(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n        },\n        getNodesByParamFuzzy: function getNodesByParamFuzzy(key, value, parentNode) {\n          if (!key) return null;\n          return data.getNodesByParamFuzzy(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), key, value);\n        },\n        getNodesByFilter: function getNodesByFilter(filter, isSingle, parentNode, invokeParam) {\n          isSingle = !!isSingle;\n          if (!filter || typeof filter != \"function\") return isSingle ? null : [];\n          return data.getNodesByFilter(setting, parentNode ? parentNode[setting.data.key.children] : data.getNodes(setting), filter, isSingle, invokeParam);\n        },\n        getNodeIndex: function getNodeIndex(node) {\n          if (!node) return null;\n          var childKey = setting.data.key.children,\n              parentNode = node.parentTId ? node.getParentNode() : data.getRoot(setting);\n\n          for (var i = 0, l = parentNode[childKey].length; i < l; i++) {\n            if (parentNode[childKey][i] == node) return i;\n          }\n\n          return -1;\n        },\n        getSelectedNodes: function getSelectedNodes() {\n          var r = [],\n              list = data.getRoot(setting).curSelectedList;\n\n          for (var i = 0, l = list.length; i < l; i++) {\n            r.push(list[i]);\n          }\n\n          return r;\n        },\n        isSelectedNode: function isSelectedNode(node) {\n          return data.isSelectedNode(setting, node);\n        },\n        reAsyncChildNodesPromise: function reAsyncChildNodesPromise(parentNode, reloadType, isSilent) {\n          var promise = new Promise(function (resolve, reject) {\n            try {\n              zTreeTools.reAsyncChildNodes(parentNode, reloadType, isSilent, function () {\n                resolve(parentNode);\n              });\n            } catch (e) {\n              reject(e);\n            }\n          });\n          return promise;\n        },\n        reAsyncChildNodes: function reAsyncChildNodes(parentNode, reloadType, isSilent, callback) {\n          if (!this.setting.async.enable) return;\n          var isRoot = !parentNode;\n\n          if (isRoot) {\n            parentNode = data.getRoot(setting);\n          }\n\n          if (reloadType == \"refresh\") {\n            var childKey = this.setting.data.key.children;\n\n            for (var i = 0, l = parentNode[childKey] ? parentNode[childKey].length : 0; i < l; i++) {\n              data.removeNodeCache(setting, parentNode[childKey][i]);\n            }\n\n            data.removeSelectedNode(setting);\n            parentNode[childKey] = [];\n\n            if (isRoot) {\n              this.setting.treeObj.empty();\n            } else {\n              var ulObj = $$(parentNode, consts.id.UL, setting);\n              ulObj.empty();\n            }\n          }\n\n          view.asyncNode(this.setting, isRoot ? null : parentNode, !!isSilent, callback);\n        },\n        refresh: function refresh() {\n          this.setting.treeObj.empty();\n          var root = data.getRoot(setting),\n              nodes = root[setting.data.key.children];\n          data.initRoot(setting);\n          root[setting.data.key.children] = nodes;\n          data.initCache(setting);\n          view.createNodes(setting, 0, root[setting.data.key.children], null, -1);\n        },\n        removeChildNodes: function removeChildNodes(node) {\n          if (!node) return null;\n          var childKey = setting.data.key.children,\n              nodes = node[childKey];\n          view.removeChildNodes(setting, node);\n          return nodes ? nodes : null;\n        },\n        removeNode: function removeNode(node, callbackFlag) {\n          if (!node) return;\n          callbackFlag = !!callbackFlag;\n          if (callbackFlag && tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return;\n          view.removeNode(setting, node);\n\n          if (callbackFlag) {\n            this.setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);\n          }\n        },\n        selectNode: function selectNode(node, addFlag, isSilent) {\n          if (!node) return;\n\n          if (tools.uCanDo(setting)) {\n            addFlag = setting.view.selectedMulti && addFlag;\n\n            if (node.parentTId) {\n              view.expandCollapseParentNode(setting, node.getParentNode(), true, false, showNodeFocus);\n            } else if (!isSilent) {\n              try {\n                $$(node, setting).focus().blur();\n              } catch (e) {}\n            }\n\n            view.selectNode(setting, node, addFlag);\n          }\n\n          function showNodeFocus() {\n            if (isSilent) {\n              return;\n            }\n\n            var a = $$(node, setting).get(0);\n            view.scrollIntoView(a);\n          }\n        },\n        transformTozTreeNodes: function transformTozTreeNodes(simpleNodes) {\n          return data.transformTozTreeFormat(setting, simpleNodes);\n        },\n        transformToArray: function transformToArray(nodes) {\n          return data.transformToArrayFormat(setting, nodes);\n        },\n        updateNode: function updateNode(node, checkTypeFlag) {\n          if (!node) return;\n          var nObj = $$(node, setting);\n\n          if (nObj.get(0) && tools.uCanDo(setting)) {\n            view.setNodeName(setting, node);\n            view.setNodeTarget(setting, node);\n            view.setNodeUrl(setting, node);\n            view.setNodeLineIcos(setting, node);\n            view.setNodeFontCss(setting, node);\n          }\n        }\n      };\n      root.treeTools = zTreeTools;\n      data.setZTreeTools(setting, zTreeTools);\n\n      if (root[childKey] && root[childKey].length > 0) {\n        view.createNodes(setting, 0, root[childKey], null, -1);\n      } else if (setting.async.enable && setting.async.url && setting.async.url !== '') {\n        view.asyncNode(setting);\n      }\n\n      return zTreeTools;\n    }\n  };\n  var zt = _$.fn.zTree,\n      $$ = tools.$,\n      consts = zt.consts;\n})(jQuery);\n/*\n * JQuery zTree excheck v3.5.29\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2017-06-19\n */\n\n\n(function ($) {\n  //default consts of excheck\n  var _consts = {\n    event: {\n      CHECK: \"ztree_check\"\n    },\n    id: {\n      CHECK: \"_check\"\n    },\n    checkbox: {\n      STYLE: \"checkbox\",\n      DEFAULT: \"chk\",\n      DISABLED: \"disable\",\n      FALSE: \"false\",\n      TRUE: \"true\",\n      FULL: \"full\",\n      PART: \"part\",\n      FOCUS: \"focus\"\n    },\n    radio: {\n      STYLE: \"radio\",\n      TYPE_ALL: \"all\",\n      TYPE_LEVEL: \"level\"\n    }\n  },\n      //default setting of excheck\n  _setting = {\n    check: {\n      enable: false,\n      autoCheckTrigger: false,\n      chkStyle: _consts.checkbox.STYLE,\n      nocheckInherit: false,\n      chkDisabledInherit: false,\n      radioType: _consts.radio.TYPE_LEVEL,\n      chkboxType: {\n        \"Y\": \"ps\",\n        \"N\": \"ps\"\n      }\n    },\n    data: {\n      key: {\n        checked: \"checked\"\n      }\n    },\n    callback: {\n      beforeCheck: null,\n      onCheck: null\n    }\n  },\n      //default root of excheck\n  _initRoot = function _initRoot(setting) {\n    var r = data.getRoot(setting);\n    r.radioCheckedList = [];\n  },\n      //default cache of excheck\n  _initCache = function _initCache(treeId) {},\n      //default bind event of excheck\n  _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.bind(c.CHECK, function (event, srcEvent, treeId, node) {\n      event.srcEvent = srcEvent;\n      tools.apply(setting.callback.onCheck, [event, treeId, node]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    var o = setting.treeObj,\n        c = consts.event;\n    o.unbind(c.CHECK);\n  },\n      //default event proxy of excheck\n  _eventProxy = function _eventProxy(e) {\n    var target = e.target,\n        setting = data.getSetting(e.data.treeId),\n        tId = \"\",\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null;\n\n    if (tools.eqs(e.type, \"mouseover\")) {\n      if (setting.check.enable && tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.CHECK) !== null) {\n        tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"mouseoverCheck\";\n      }\n    } else if (tools.eqs(e.type, \"mouseout\")) {\n      if (setting.check.enable && tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.CHECK) !== null) {\n        tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"mouseoutCheck\";\n      }\n    } else if (tools.eqs(e.type, \"click\")) {\n      if (setting.check.enable && tools.eqs(target.tagName, \"span\") && target.getAttribute(\"treeNode\" + consts.id.CHECK) !== null) {\n        tId = tools.getNodeMainDom(target).id;\n        nodeEventType = \"checkNode\";\n      }\n    }\n\n    if (tId.length > 0) {\n      node = data.getNodeCache(setting, tId);\n\n      switch (nodeEventType) {\n        case \"checkNode\":\n          nodeEventCallback = _handler.onCheckNode;\n          break;\n\n        case \"mouseoverCheck\":\n          nodeEventCallback = _handler.onMouseoverCheck;\n          break;\n\n        case \"mouseoutCheck\":\n          nodeEventCallback = _handler.onMouseoutCheck;\n          break;\n      }\n    }\n\n    var proxyResult = {\n      stop: nodeEventType === \"checkNode\",\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      //default init node of excheck\n  _initNode = function _initNode(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\n    if (!n) return;\n    var checkedKey = setting.data.key.checked;\n    if (typeof n[checkedKey] == \"string\") n[checkedKey] = tools.eqs(n[checkedKey], \"true\");\n    n[checkedKey] = !!n[checkedKey];\n    n.checkedOld = n[checkedKey];\n    if (typeof n.nocheck == \"string\") n.nocheck = tools.eqs(n.nocheck, \"true\");\n    n.nocheck = !!n.nocheck || setting.check.nocheckInherit && parentNode && !!parentNode.nocheck;\n    if (typeof n.chkDisabled == \"string\") n.chkDisabled = tools.eqs(n.chkDisabled, \"true\");\n    n.chkDisabled = !!n.chkDisabled || setting.check.chkDisabledInherit && parentNode && !!parentNode.chkDisabled;\n    if (typeof n.halfCheck == \"string\") n.halfCheck = tools.eqs(n.halfCheck, \"true\");\n    n.halfCheck = !!n.halfCheck;\n    n.check_Child_State = -1;\n    n.check_Focus = false;\n\n    n.getCheckStatus = function () {\n      return data.getCheckStatus(setting, n);\n    };\n\n    if (setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL && n[checkedKey]) {\n      var r = data.getRoot(setting);\n      r.radioCheckedList.push(n);\n    }\n  },\n      //add dom for check\n  _beforeA = function _beforeA(setting, node, html) {\n    var checkedKey = setting.data.key.checked;\n\n    if (setting.check.enable) {\n      data.makeChkFlag(setting, node);\n      html.push(\"<span ID='\", node.tId, consts.id.CHECK, \"' class='\", view.makeChkClass(setting, node), \"' treeNode\", consts.id.CHECK, node.nocheck === true ? \" style='display:none;'\" : \"\", \"></span>\");\n    }\n  },\n      //update zTreeObj, add method of check\n  _zTreeTools = function _zTreeTools(setting, zTreeTools) {\n    zTreeTools.checkNode = function (node, checked, checkTypeFlag, callbackFlag) {\n      var checkedKey = this.setting.data.key.checked;\n      if (node.chkDisabled === true) return;\n\n      if (checked !== true && checked !== false) {\n        checked = !node[checkedKey];\n      }\n\n      callbackFlag = !!callbackFlag;\n\n      if (node[checkedKey] === checked && !checkTypeFlag) {\n        return;\n      } else if (callbackFlag && tools.apply(this.setting.callback.beforeCheck, [this.setting.treeId, node], true) == false) {\n        return;\n      }\n\n      if (tools.uCanDo(this.setting) && this.setting.check.enable && node.nocheck !== true) {\n        node[checkedKey] = checked;\n        var checkObj = $$(node, consts.id.CHECK, this.setting);\n        if (checkTypeFlag || this.setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(this.setting, node);\n        view.setChkClass(this.setting, checkObj, node);\n        view.repairParentChkClassWithSelf(this.setting, node);\n\n        if (callbackFlag) {\n          this.setting.treeObj.trigger(consts.event.CHECK, [null, this.setting.treeId, node]);\n        }\n      }\n    };\n\n    zTreeTools.checkAllNodes = function (checked) {\n      view.repairAllChk(this.setting, !!checked);\n    };\n\n    zTreeTools.getCheckedNodes = function (checked) {\n      var childKey = this.setting.data.key.children;\n      checked = checked !== false;\n      return data.getTreeCheckedNodes(this.setting, data.getRoot(this.setting)[childKey], checked);\n    };\n\n    zTreeTools.getChangeCheckedNodes = function () {\n      var childKey = this.setting.data.key.children;\n      return data.getTreeChangeCheckedNodes(this.setting, data.getRoot(this.setting)[childKey]);\n    };\n\n    zTreeTools.setChkDisabled = function (node, disabled, inheritParent, inheritChildren) {\n      disabled = !!disabled;\n      inheritParent = !!inheritParent;\n      inheritChildren = !!inheritChildren;\n      view.repairSonChkDisabled(this.setting, node, disabled, inheritChildren);\n      view.repairParentChkDisabled(this.setting, node.getParentNode(), disabled, inheritParent);\n    };\n\n    var _updateNode = zTreeTools.updateNode;\n\n    zTreeTools.updateNode = function (node, checkTypeFlag) {\n      if (_updateNode) _updateNode.apply(zTreeTools, arguments);\n      if (!node || !this.setting.check.enable) return;\n      var nObj = $$(node, this.setting);\n\n      if (nObj.get(0) && tools.uCanDo(this.setting)) {\n        var checkObj = $$(node, consts.id.CHECK, this.setting);\n        if (checkTypeFlag == true || this.setting.check.chkStyle === consts.radio.STYLE) view.checkNodeRelation(this.setting, node);\n        view.setChkClass(this.setting, checkObj, node);\n        view.repairParentChkClassWithSelf(this.setting, node);\n      }\n    };\n  },\n      //method of operate data\n  _data = {\n    getRadioCheckedList: function getRadioCheckedList(setting) {\n      var checkedList = data.getRoot(setting).radioCheckedList;\n\n      for (var i = 0, j = checkedList.length; i < j; i++) {\n        if (!data.getNodeCache(setting, checkedList[i].tId)) {\n          checkedList.splice(i, 1);\n          i--;\n          j--;\n        }\n      }\n\n      return checkedList;\n    },\n    getCheckStatus: function getCheckStatus(setting, node) {\n      if (!setting.check.enable || node.nocheck || node.chkDisabled) return null;\n      var checkedKey = setting.data.key.checked,\n          r = {\n        checked: node[checkedKey],\n        half: node.halfCheck ? node.halfCheck : setting.check.chkStyle == consts.radio.STYLE ? node.check_Child_State === 2 : node[checkedKey] ? node.check_Child_State > -1 && node.check_Child_State < 2 : node.check_Child_State > 0\n      };\n      return r;\n    },\n    getTreeCheckedNodes: function getTreeCheckedNodes(setting, nodes, checked, results) {\n      if (!nodes) return [];\n      var childKey = setting.data.key.children,\n          checkedKey = setting.data.key.checked,\n          onlyOne = checked && setting.check.chkStyle == consts.radio.STYLE && setting.check.radioType == consts.radio.TYPE_ALL;\n      results = !results ? [] : results;\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] == checked) {\n          results.push(nodes[i]);\n\n          if (onlyOne) {\n            break;\n          }\n        }\n\n        data.getTreeCheckedNodes(setting, nodes[i][childKey], checked, results);\n\n        if (onlyOne && results.length > 0) {\n          break;\n        }\n      }\n\n      return results;\n    },\n    getTreeChangeCheckedNodes: function getTreeChangeCheckedNodes(setting, nodes, results) {\n      if (!nodes) return [];\n      var childKey = setting.data.key.children,\n          checkedKey = setting.data.key.checked;\n      results = !results ? [] : results;\n\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        if (nodes[i].nocheck !== true && nodes[i].chkDisabled !== true && nodes[i][checkedKey] != nodes[i].checkedOld) {\n          results.push(nodes[i]);\n        }\n\n        data.getTreeChangeCheckedNodes(setting, nodes[i][childKey], results);\n      }\n\n      return results;\n    },\n    makeChkFlag: function makeChkFlag(setting, node) {\n      if (!node) return;\n      var childKey = setting.data.key.children,\n          checkedKey = setting.data.key.checked,\n          chkFlag = -1;\n\n      if (node[childKey]) {\n        for (var i = 0, l = node[childKey].length; i < l; i++) {\n          var cNode = node[childKey][i];\n          var tmp = -1;\n\n          if (setting.check.chkStyle == consts.radio.STYLE) {\n            if (cNode.nocheck === true || cNode.chkDisabled === true) {\n              tmp = cNode.check_Child_State;\n            } else if (cNode.halfCheck === true) {\n              tmp = 2;\n            } else if (cNode[checkedKey]) {\n              tmp = 2;\n            } else {\n              tmp = cNode.check_Child_State > 0 ? 2 : 0;\n            }\n\n            if (tmp == 2) {\n              chkFlag = 2;\n              break;\n            } else if (tmp == 0) {\n              chkFlag = 0;\n            }\n          } else if (setting.check.chkStyle == consts.checkbox.STYLE) {\n            if (cNode.nocheck === true || cNode.chkDisabled === true) {\n              tmp = cNode.check_Child_State;\n            } else if (cNode.halfCheck === true) {\n              tmp = 1;\n            } else if (cNode[checkedKey]) {\n              tmp = cNode.check_Child_State === -1 || cNode.check_Child_State === 2 ? 2 : 1;\n            } else {\n              tmp = cNode.check_Child_State > 0 ? 1 : 0;\n            }\n\n            if (tmp === 1) {\n              chkFlag = 1;\n              break;\n            } else if (tmp === 2 && chkFlag > -1 && i > 0 && tmp !== chkFlag) {\n              chkFlag = 1;\n              break;\n            } else if (chkFlag === 2 && tmp > -1 && tmp < 2) {\n              chkFlag = 1;\n              break;\n            } else if (tmp > -1) {\n              chkFlag = tmp;\n            }\n          }\n        }\n      }\n\n      node.check_Child_State = chkFlag;\n    }\n  },\n      //method of event proxy\n  _event = {},\n      //method of event handler\n  _handler = {\n    onCheckNode: function onCheckNode(event, node) {\n      if (node.chkDisabled === true) return false;\n      var setting = data.getSetting(event.data.treeId),\n          checkedKey = setting.data.key.checked;\n      if (tools.apply(setting.callback.beforeCheck, [setting.treeId, node], true) == false) return true;\n      node[checkedKey] = !node[checkedKey];\n      view.checkNodeRelation(setting, node);\n      var checkObj = $$(node, consts.id.CHECK, setting);\n      view.setChkClass(setting, checkObj, node);\n      view.repairParentChkClassWithSelf(setting, node);\n      setting.treeObj.trigger(consts.event.CHECK, [event, setting.treeId, node]);\n      return true;\n    },\n    onMouseoverCheck: function onMouseoverCheck(event, node) {\n      if (node.chkDisabled === true) return false;\n      var setting = data.getSetting(event.data.treeId),\n          checkObj = $$(node, consts.id.CHECK, setting);\n      node.check_Focus = true;\n      view.setChkClass(setting, checkObj, node);\n      return true;\n    },\n    onMouseoutCheck: function onMouseoutCheck(event, node) {\n      if (node.chkDisabled === true) return false;\n      var setting = data.getSetting(event.data.treeId),\n          checkObj = $$(node, consts.id.CHECK, setting);\n      node.check_Focus = false;\n      view.setChkClass(setting, checkObj, node);\n      return true;\n    }\n  },\n      //method of tools for zTree\n  _tools = {},\n      //method of operate ztree dom\n  _view = {\n    checkNodeRelation: function checkNodeRelation(setting, node) {\n      var pNode,\n          i,\n          l,\n          childKey = setting.data.key.children,\n          checkedKey = setting.data.key.checked,\n          r = consts.radio;\n\n      if (setting.check.chkStyle == r.STYLE) {\n        var checkedList = data.getRadioCheckedList(setting);\n\n        if (node[checkedKey]) {\n          if (setting.check.radioType == r.TYPE_ALL) {\n            for (i = checkedList.length - 1; i >= 0; i--) {\n              pNode = checkedList[i];\n\n              if (pNode[checkedKey] && pNode != node) {\n                pNode[checkedKey] = false;\n                checkedList.splice(i, 1);\n                view.setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);\n\n                if (pNode.parentTId != node.parentTId) {\n                  view.repairParentChkClassWithSelf(setting, pNode);\n                }\n              }\n            }\n\n            checkedList.push(node);\n          } else {\n            var parentNode = node.parentTId ? node.getParentNode() : data.getRoot(setting);\n\n            for (i = 0, l = parentNode[childKey].length; i < l; i++) {\n              pNode = parentNode[childKey][i];\n\n              if (pNode[checkedKey] && pNode != node) {\n                pNode[checkedKey] = false;\n                view.setChkClass(setting, $$(pNode, consts.id.CHECK, setting), pNode);\n              }\n            }\n          }\n        } else if (setting.check.radioType == r.TYPE_ALL) {\n          for (i = 0, l = checkedList.length; i < l; i++) {\n            if (node == checkedList[i]) {\n              checkedList.splice(i, 1);\n              break;\n            }\n          }\n        }\n      } else {\n        if (node[checkedKey] && (!node[childKey] || node[childKey].length == 0 || setting.check.chkboxType.Y.indexOf(\"s\") > -1)) {\n          view.setSonNodeCheckBox(setting, node, true);\n        }\n\n        if (!node[checkedKey] && (!node[childKey] || node[childKey].length == 0 || setting.check.chkboxType.N.indexOf(\"s\") > -1)) {\n          view.setSonNodeCheckBox(setting, node, false);\n        }\n\n        if (node[checkedKey] && setting.check.chkboxType.Y.indexOf(\"p\") > -1) {\n          view.setParentNodeCheckBox(setting, node, true);\n        }\n\n        if (!node[checkedKey] && setting.check.chkboxType.N.indexOf(\"p\") > -1) {\n          view.setParentNodeCheckBox(setting, node, false);\n        }\n      }\n    },\n    makeChkClass: function makeChkClass(setting, node) {\n      var checkedKey = setting.data.key.checked,\n          c = consts.checkbox,\n          r = consts.radio,\n          fullStyle = \"\";\n\n      if (node.chkDisabled === true) {\n        fullStyle = c.DISABLED;\n      } else if (node.halfCheck) {\n        fullStyle = c.PART;\n      } else if (setting.check.chkStyle == r.STYLE) {\n        fullStyle = node.check_Child_State < 1 ? c.FULL : c.PART;\n      } else {\n        fullStyle = node[checkedKey] ? node.check_Child_State === 2 || node.check_Child_State === -1 ? c.FULL : c.PART : node.check_Child_State < 1 ? c.FULL : c.PART;\n      }\n\n      var chkName = setting.check.chkStyle + \"_\" + (node[checkedKey] ? c.TRUE : c.FALSE) + \"_\" + fullStyle;\n      chkName = node.check_Focus && node.chkDisabled !== true ? chkName + \"_\" + c.FOCUS : chkName;\n      return consts.className.BUTTON + \" \" + c.DEFAULT + \" \" + chkName;\n    },\n    repairAllChk: function repairAllChk(setting, checked) {\n      if (setting.check.enable && setting.check.chkStyle === consts.checkbox.STYLE) {\n        var checkedKey = setting.data.key.checked,\n            childKey = setting.data.key.children,\n            root = data.getRoot(setting);\n\n        for (var i = 0, l = root[childKey].length; i < l; i++) {\n          var node = root[childKey][i];\n\n          if (node.nocheck !== true && node.chkDisabled !== true) {\n            node[checkedKey] = checked;\n          }\n\n          view.setSonNodeCheckBox(setting, node, checked);\n        }\n      }\n    },\n    repairChkClass: function repairChkClass(setting, node) {\n      if (!node) return;\n      data.makeChkFlag(setting, node);\n\n      if (node.nocheck !== true) {\n        var checkObj = $$(node, consts.id.CHECK, setting);\n        view.setChkClass(setting, checkObj, node);\n      }\n    },\n    repairParentChkClass: function repairParentChkClass(setting, node) {\n      if (!node || !node.parentTId) return;\n      var pNode = node.getParentNode();\n      view.repairChkClass(setting, pNode);\n      view.repairParentChkClass(setting, pNode);\n    },\n    repairParentChkClassWithSelf: function repairParentChkClassWithSelf(setting, node) {\n      if (!node) return;\n      var childKey = setting.data.key.children;\n\n      if (node[childKey] && node[childKey].length > 0) {\n        view.repairParentChkClass(setting, node[childKey][0]);\n      } else {\n        view.repairParentChkClass(setting, node);\n      }\n    },\n    repairSonChkDisabled: function repairSonChkDisabled(setting, node, chkDisabled, inherit) {\n      if (!node) return;\n      var childKey = setting.data.key.children;\n\n      if (node.chkDisabled != chkDisabled) {\n        node.chkDisabled = chkDisabled;\n      }\n\n      view.repairChkClass(setting, node);\n\n      if (node[childKey] && inherit) {\n        for (var i = 0, l = node[childKey].length; i < l; i++) {\n          var sNode = node[childKey][i];\n          view.repairSonChkDisabled(setting, sNode, chkDisabled, inherit);\n        }\n      }\n    },\n    repairParentChkDisabled: function repairParentChkDisabled(setting, node, chkDisabled, inherit) {\n      if (!node) return;\n\n      if (node.chkDisabled != chkDisabled && inherit) {\n        node.chkDisabled = chkDisabled;\n      }\n\n      view.repairChkClass(setting, node);\n      view.repairParentChkDisabled(setting, node.getParentNode(), chkDisabled, inherit);\n    },\n    setChkClass: function setChkClass(setting, obj, node) {\n      if (!obj) return;\n\n      if (node.nocheck === true) {\n        obj.hide();\n      } else {\n        obj.show();\n      }\n\n      obj.attr('class', view.makeChkClass(setting, node));\n    },\n    setParentNodeCheckBox: function setParentNodeCheckBox(setting, node, value, srcNode) {\n      var childKey = setting.data.key.children,\n          checkedKey = setting.data.key.checked,\n          checkObj = $$(node, consts.id.CHECK, setting);\n      if (!srcNode) srcNode = node;\n      data.makeChkFlag(setting, node);\n\n      if (node.nocheck !== true && node.chkDisabled !== true) {\n        node[checkedKey] = value;\n        view.setChkClass(setting, checkObj, node);\n\n        if (setting.check.autoCheckTrigger && node != srcNode) {\n          setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);\n        }\n      }\n\n      if (node.parentTId) {\n        var pSign = true;\n\n        if (!value) {\n          var pNodes = node.getParentNode()[childKey];\n\n          for (var i = 0, l = pNodes.length; i < l; i++) {\n            if (pNodes[i].nocheck !== true && pNodes[i].chkDisabled !== true && pNodes[i][checkedKey] || (pNodes[i].nocheck === true || pNodes[i].chkDisabled === true) && pNodes[i].check_Child_State > 0) {\n              pSign = false;\n              break;\n            }\n          }\n        }\n\n        if (pSign) {\n          view.setParentNodeCheckBox(setting, node.getParentNode(), value, srcNode);\n        }\n      }\n    },\n    setSonNodeCheckBox: function setSonNodeCheckBox(setting, node, value, srcNode) {\n      if (!node) return;\n      var childKey = setting.data.key.children,\n          checkedKey = setting.data.key.checked,\n          checkObj = $$(node, consts.id.CHECK, setting);\n      if (!srcNode) srcNode = node;\n      var hasDisable = false;\n\n      if (node[childKey]) {\n        for (var i = 0, l = node[childKey].length; i < l; i++) {\n          var sNode = node[childKey][i];\n          view.setSonNodeCheckBox(setting, sNode, value, srcNode);\n          if (sNode.chkDisabled === true) hasDisable = true;\n        }\n      }\n\n      if (node != data.getRoot(setting) && node.chkDisabled !== true) {\n        if (hasDisable && node.nocheck !== true) {\n          data.makeChkFlag(setting, node);\n        }\n\n        if (node.nocheck !== true && node.chkDisabled !== true) {\n          node[checkedKey] = value;\n          if (!hasDisable) node.check_Child_State = node[childKey] && node[childKey].length > 0 ? value ? 2 : 0 : -1;\n        } else {\n          node.check_Child_State = -1;\n        }\n\n        view.setChkClass(setting, checkObj, node);\n\n        if (setting.check.autoCheckTrigger && node != srcNode && node.nocheck !== true && node.chkDisabled !== true) {\n          setting.treeObj.trigger(consts.event.CHECK, [null, setting.treeId, node]);\n        }\n      }\n    }\n  },\n      _z = {\n    tools: _tools,\n    view: _view,\n    event: _event,\n    data: _data\n  };\n\n  $.extend(true, $.fn.zTree.consts, _consts);\n  $.extend(true, $.fn.zTree._z, _z);\n  var zt = $.fn.zTree,\n      tools = zt._z.tools,\n      consts = zt.consts,\n      view = zt._z.view,\n      data = zt._z.data,\n      event = zt._z.event,\n      $$ = tools.$;\n  data.exSetting(_setting);\n  data.addInitBind(_bindEvent);\n  data.addInitUnBind(_unbindEvent);\n  data.addInitCache(_initCache);\n  data.addInitNode(_initNode);\n  data.addInitProxy(_eventProxy, true);\n  data.addInitRoot(_initRoot);\n  data.addBeforeA(_beforeA);\n  data.addZTreeTools(_zTreeTools);\n  var _createNodes = view.createNodes;\n\n  view.createNodes = function (setting, level, nodes, parentNode, index) {\n    if (_createNodes) _createNodes.apply(view, arguments);\n    if (!nodes) return;\n    view.repairParentChkClassWithSelf(setting, parentNode);\n  };\n\n  var _removeNode = view.removeNode;\n\n  view.removeNode = function (setting, node) {\n    var parentNode = node.getParentNode();\n    if (_removeNode) _removeNode.apply(view, arguments);\n    if (!node || !parentNode) return;\n    view.repairChkClass(setting, parentNode);\n    view.repairParentChkClass(setting, parentNode);\n  };\n\n  var _appendNodes = view.appendNodes;\n\n  view.appendNodes = function (setting, level, nodes, parentNode, index, initFlag, openFlag) {\n    var html = \"\";\n\n    if (_appendNodes) {\n      html = _appendNodes.apply(view, arguments);\n    }\n\n    if (parentNode) {\n      data.makeChkFlag(setting, parentNode);\n    }\n\n    return html;\n  };\n})(jQuery);\n/*\n * JQuery zTree exedit v3.5.29\n * http://treejs.cn/\n *\n * Copyright (c) 2010 Hunter.z\n *\n * Licensed same as jquery - MIT License\n * http://www.opensource.org/licenses/mit-license.php\n *\n * email: hunter.z@263.net\n * Date: 2017-06-19\n */\n\n\n(function ($) {\n  //default consts of exedit\n  var _consts = {\n    event: {\n      DRAG: \"ztree_drag\",\n      DROP: \"ztree_drop\",\n      RENAME: \"ztree_rename\",\n      DRAGMOVE: \"ztree_dragmove\"\n    },\n    id: {\n      EDIT: \"_edit\",\n      INPUT: \"_input\",\n      REMOVE: \"_remove\"\n    },\n    move: {\n      TYPE_INNER: \"inner\",\n      TYPE_PREV: \"prev\",\n      TYPE_NEXT: \"next\"\n    },\n    node: {\n      CURSELECTED_EDIT: \"curSelectedNode_Edit\",\n      TMPTARGET_TREE: \"tmpTargetzTree\",\n      TMPTARGET_NODE: \"tmpTargetNode\"\n    }\n  },\n      //default setting of exedit\n  _setting = {\n    edit: {\n      enable: false,\n      editNameSelectAll: false,\n      showRemoveBtn: true,\n      showRenameBtn: true,\n      removeTitle: \"remove\",\n      renameTitle: \"rename\",\n      drag: {\n        autoExpandTrigger: false,\n        isCopy: true,\n        isMove: true,\n        prev: true,\n        next: true,\n        inner: true,\n        minMoveSize: 5,\n        borderMax: 10,\n        borderMin: -5,\n        maxShowNodeNum: 5,\n        autoOpenTime: 500\n      }\n    },\n    view: {\n      addHoverDom: null,\n      removeHoverDom: null\n    },\n    callback: {\n      beforeDrag: null,\n      beforeDragOpen: null,\n      beforeDrop: null,\n      beforeEditName: null,\n      beforeRename: null,\n      onDrag: null,\n      onDragMove: null,\n      onDrop: null,\n      onRename: null\n    }\n  },\n      //default root of exedit\n  _initRoot = function _initRoot(setting) {\n    var r = data.getRoot(setting),\n        rs = data.getRoots();\n    r.curEditNode = null;\n    r.curEditInput = null;\n    r.curHoverNode = null;\n    r.dragFlag = 0;\n    r.dragNodeShowBefore = [];\n    r.dragMaskList = new Array();\n    rs.showHoverDom = true;\n  },\n      //default cache of exedit\n  _initCache = function _initCache(treeId) {},\n      //default bind event of exedit\n  _bindEvent = function _bindEvent(setting) {\n    var o = setting.treeObj;\n    var c = consts.event;\n    o.bind(c.RENAME, function (event, treeId, treeNode, isCancel) {\n      tools.apply(setting.callback.onRename, [event, treeId, treeNode, isCancel]);\n    });\n    o.bind(c.DRAG, function (event, srcEvent, treeId, treeNodes) {\n      tools.apply(setting.callback.onDrag, [srcEvent, treeId, treeNodes]);\n    });\n    o.bind(c.DRAGMOVE, function (event, srcEvent, treeId, treeNodes) {\n      tools.apply(setting.callback.onDragMove, [srcEvent, treeId, treeNodes]);\n    });\n    o.bind(c.DROP, function (event, srcEvent, treeId, treeNodes, targetNode, moveType, isCopy) {\n      tools.apply(setting.callback.onDrop, [srcEvent, treeId, treeNodes, targetNode, moveType, isCopy]);\n    });\n  },\n      _unbindEvent = function _unbindEvent(setting) {\n    var o = setting.treeObj;\n    var c = consts.event;\n    o.unbind(c.RENAME);\n    o.unbind(c.DRAG);\n    o.unbind(c.DRAGMOVE);\n    o.unbind(c.DROP);\n  },\n      //default event proxy of exedit\n  _eventProxy = function _eventProxy(e) {\n    var target = e.target,\n        setting = data.getSetting(e.data.treeId),\n        relatedTarget = e.relatedTarget,\n        tId = \"\",\n        node = null,\n        nodeEventType = \"\",\n        treeEventType = \"\",\n        nodeEventCallback = null,\n        treeEventCallback = null,\n        tmp = null;\n\n    if (tools.eqs(e.type, \"mouseover\")) {\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n        nodeEventType = \"hoverOverNode\";\n      }\n    } else if (tools.eqs(e.type, \"mouseout\")) {\n      tmp = tools.getMDom(setting, relatedTarget, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (!tmp) {\n        tId = \"remove\";\n        nodeEventType = \"hoverOutNode\";\n      }\n    } else if (tools.eqs(e.type, \"mousedown\")) {\n      tmp = tools.getMDom(setting, target, [{\n        tagName: \"a\",\n        attrName: \"treeNode\" + consts.id.A\n      }]);\n\n      if (tmp) {\n        tId = tools.getNodeMainDom(tmp).id;\n        nodeEventType = \"mousedownNode\";\n      }\n    }\n\n    if (tId.length > 0) {\n      node = data.getNodeCache(setting, tId);\n\n      switch (nodeEventType) {\n        case \"mousedownNode\":\n          nodeEventCallback = _handler.onMousedownNode;\n          break;\n\n        case \"hoverOverNode\":\n          nodeEventCallback = _handler.onHoverOverNode;\n          break;\n\n        case \"hoverOutNode\":\n          nodeEventCallback = _handler.onHoverOutNode;\n          break;\n      }\n    }\n\n    var proxyResult = {\n      stop: false,\n      node: node,\n      nodeEventType: nodeEventType,\n      nodeEventCallback: nodeEventCallback,\n      treeEventType: treeEventType,\n      treeEventCallback: treeEventCallback\n    };\n    return proxyResult;\n  },\n      //default init node of exedit\n  _initNode = function _initNode(setting, level, n, parentNode, isFirstNode, isLastNode, openFlag) {\n    if (!n) return;\n    n.isHover = false;\n    n.editNameFlag = false;\n  },\n      //update zTreeObj, add method of edit\n  _zTreeTools = function _zTreeTools(setting, zTreeTools) {\n    zTreeTools.cancelEditName = function (newName) {\n      var root = data.getRoot(this.setting);\n      if (!root.curEditNode) return;\n      view.cancelCurEditNode(this.setting, newName ? newName : null, true);\n    };\n\n    zTreeTools.copyNode = function (targetNode, node, moveType, isSilent) {\n      if (!node) return null;\n      if (targetNode && !targetNode.isParent && this.setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) return null;\n\n      var _this = this,\n          newNode = tools.clone(node);\n\n      if (!targetNode) {\n        targetNode = null;\n        moveType = consts.move.TYPE_INNER;\n      }\n\n      if (moveType == consts.move.TYPE_INNER) {\n        var copyCallback = function copyCallback() {\n          view.addNodes(_this.setting, targetNode, -1, [newNode], isSilent);\n        };\n\n        if (tools.canAsync(this.setting, targetNode)) {\n          view.asyncNode(this.setting, targetNode, isSilent, copyCallback);\n        } else {\n          copyCallback();\n        }\n      } else {\n        view.addNodes(this.setting, targetNode.parentNode, -1, [newNode], isSilent);\n        view.moveNode(this.setting, targetNode, newNode, moveType, false, isSilent);\n      }\n\n      return newNode;\n    };\n\n    zTreeTools.editName = function (node) {\n      if (!node || !node.tId || node !== data.getNodeCache(this.setting, node.tId)) return;\n      if (node.parentTId) view.expandCollapseParentNode(this.setting, node.getParentNode(), true);\n      view.editNode(this.setting, node);\n    };\n\n    zTreeTools.moveNode = function (targetNode, node, moveType, isSilent) {\n      if (!node) return node;\n\n      if (targetNode && !targetNode.isParent && this.setting.data.keep.leaf && moveType === consts.move.TYPE_INNER) {\n        return null;\n      } else if (targetNode && (node.parentTId == targetNode.tId && moveType == consts.move.TYPE_INNER || $$(node, this.setting).find(\"#\" + targetNode.tId).length > 0)) {\n        return null;\n      } else if (!targetNode) {\n        targetNode = null;\n      }\n\n      var _this = this;\n\n      function moveCallback() {\n        view.moveNode(_this.setting, targetNode, node, moveType, false, isSilent);\n      }\n\n      if (tools.canAsync(this.setting, targetNode) && moveType === consts.move.TYPE_INNER) {\n        view.asyncNode(this.setting, targetNode, isSilent, moveCallback);\n      } else {\n        moveCallback();\n      }\n\n      return node;\n    };\n\n    zTreeTools.setEditable = function (editable) {\n      this.setting.edit.enable = editable;\n      return this.refresh();\n    };\n  },\n      //method of operate data\n  _data = {\n    setSonNodeLevel: function setSonNodeLevel(setting, parentNode, node) {\n      if (!node) return;\n      var childKey = setting.data.key.children;\n      node.level = parentNode ? parentNode.level + 1 : 0;\n      if (!node[childKey]) return;\n\n      for (var i = 0, l = node[childKey].length; i < l; i++) {\n        if (node[childKey][i]) data.setSonNodeLevel(setting, node, node[childKey][i]);\n      }\n    }\n  },\n      //method of event proxy\n  _event = {},\n      //method of event handler\n  _handler = {\n    onHoverOverNode: function onHoverOverNode(event, node) {\n      var setting = data.getSetting(event.data.treeId),\n          root = data.getRoot(setting);\n\n      if (root.curHoverNode != node) {\n        _handler.onHoverOutNode(event);\n      }\n\n      root.curHoverNode = node;\n      view.addHoverDom(setting, node);\n    },\n    onHoverOutNode: function onHoverOutNode(event, node) {\n      var setting = data.getSetting(event.data.treeId),\n          root = data.getRoot(setting);\n\n      if (root.curHoverNode && !data.isSelectedNode(setting, root.curHoverNode)) {\n        view.removeTreeDom(setting, root.curHoverNode);\n        root.curHoverNode = null;\n      }\n    },\n    onMousedownNode: function onMousedownNode(eventMouseDown, _node) {\n      var i,\n          l,\n          setting = data.getSetting(eventMouseDown.data.treeId),\n          root = data.getRoot(setting),\n          roots = data.getRoots(); //right click can't drag & drop\n\n      if (eventMouseDown.button == 2 || !setting.edit.enable || !setting.edit.drag.isCopy && !setting.edit.drag.isMove) return true; //input of edit node name can't drag & drop\n\n      var target = eventMouseDown.target,\n          _nodes = data.getRoot(setting).curSelectedList,\n          nodes = [];\n\n      if (!data.isSelectedNode(setting, _node)) {\n        nodes = [_node];\n      } else {\n        for (i = 0, l = _nodes.length; i < l; i++) {\n          if (_nodes[i].editNameFlag && tools.eqs(target.tagName, \"input\") && target.getAttribute(\"treeNode\" + consts.id.INPUT) !== null) {\n            return true;\n          }\n\n          nodes.push(_nodes[i]);\n\n          if (nodes[0].parentTId !== _nodes[i].parentTId) {\n            nodes = [_node];\n            break;\n          }\n        }\n      }\n\n      view.editNodeBlur = true;\n      view.cancelCurEditNode(setting);\n      var doc = $(setting.treeObj.get(0).ownerDocument),\n          body = $(setting.treeObj.get(0).ownerDocument.body),\n          curNode,\n          tmpArrow,\n          tmpTarget,\n          isOtherTree = false,\n          targetSetting = setting,\n          sourceSetting = setting,\n          preNode,\n          nextNode,\n          preTmpTargetNodeId = null,\n          preTmpMoveType = null,\n          tmpTargetNodeId = null,\n          moveType = consts.move.TYPE_INNER,\n          mouseDownX = eventMouseDown.clientX,\n          mouseDownY = eventMouseDown.clientY,\n          startTime = new Date().getTime();\n\n      if (tools.uCanDo(setting)) {\n        doc.bind(\"mousemove\", _docMouseMove);\n      }\n\n      function _docMouseMove(event) {\n        //avoid start drag after click node\n        if (root.dragFlag == 0 && Math.abs(mouseDownX - event.clientX) < setting.edit.drag.minMoveSize && Math.abs(mouseDownY - event.clientY) < setting.edit.drag.minMoveSize) {\n          return true;\n        }\n\n        var i,\n            l,\n            tmpNode,\n            tmpDom,\n            tmpNodes,\n            childKey = setting.data.key.children;\n        body.css(\"cursor\", \"pointer\");\n\n        if (root.dragFlag == 0) {\n          if (tools.apply(setting.callback.beforeDrag, [setting.treeId, nodes], true) == false) {\n            _docMouseUp(event);\n\n            return true;\n          }\n\n          for (i = 0, l = nodes.length; i < l; i++) {\n            if (i == 0) {\n              root.dragNodeShowBefore = [];\n            }\n\n            tmpNode = nodes[i];\n\n            if (tmpNode.isParent && tmpNode.open) {\n              view.expandCollapseNode(setting, tmpNode, !tmpNode.open);\n              root.dragNodeShowBefore[tmpNode.tId] = true;\n            } else {\n              root.dragNodeShowBefore[tmpNode.tId] = false;\n            }\n          }\n\n          root.dragFlag = 1;\n          roots.showHoverDom = false;\n          tools.showIfameMask(setting, true); //sort\n\n          var isOrder = true,\n              lastIndex = -1;\n\n          if (nodes.length > 1) {\n            var pNodes = nodes[0].parentTId ? nodes[0].getParentNode()[childKey] : data.getNodes(setting);\n            tmpNodes = [];\n\n            for (i = 0, l = pNodes.length; i < l; i++) {\n              if (root.dragNodeShowBefore[pNodes[i].tId] !== undefined) {\n                if (isOrder && lastIndex > -1 && lastIndex + 1 !== i) {\n                  isOrder = false;\n                }\n\n                tmpNodes.push(pNodes[i]);\n                lastIndex = i;\n              }\n\n              if (nodes.length === tmpNodes.length) {\n                nodes = tmpNodes;\n                break;\n              }\n            }\n          }\n\n          if (isOrder) {\n            preNode = nodes[0].getPreNode();\n            nextNode = nodes[nodes.length - 1].getNextNode();\n          } //set node in selected\n\n\n          curNode = $$(\"<ul class='zTreeDragUL'></ul>\", setting);\n\n          for (i = 0, l = nodes.length; i < l; i++) {\n            tmpNode = nodes[i];\n            tmpNode.editNameFlag = false;\n            view.selectNode(setting, tmpNode, i > 0);\n            view.removeTreeDom(setting, tmpNode);\n\n            if (i > setting.edit.drag.maxShowNodeNum - 1) {\n              continue;\n            }\n\n            tmpDom = $$(\"<li id='\" + tmpNode.tId + \"_tmp'></li>\", setting);\n            tmpDom.append($$(tmpNode, consts.id.A, setting).clone());\n            tmpDom.css(\"padding\", \"0\");\n            tmpDom.children(\"#\" + tmpNode.tId + consts.id.A).removeClass(consts.node.CURSELECTED);\n            curNode.append(tmpDom);\n\n            if (i == setting.edit.drag.maxShowNodeNum - 1) {\n              tmpDom = $$(\"<li id='\" + tmpNode.tId + \"_moretmp'><a>  ...  </a></li>\", setting);\n              curNode.append(tmpDom);\n            }\n          }\n\n          curNode.attr(\"id\", nodes[0].tId + consts.id.UL + \"_tmp\");\n          curNode.addClass(setting.treeObj.attr(\"class\"));\n          curNode.appendTo(body);\n          tmpArrow = $$(\"<span class='tmpzTreeMove_arrow'></span>\", setting);\n          tmpArrow.attr(\"id\", \"zTreeMove_arrow_tmp\");\n          tmpArrow.appendTo(body);\n          setting.treeObj.trigger(consts.event.DRAG, [event, setting.treeId, nodes]);\n        }\n\n        if (root.dragFlag == 1) {\n          if (tmpTarget && tmpArrow.attr(\"id\") == event.target.id && tmpTargetNodeId && event.clientX + doc.scrollLeft() + 2 > $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).offset().left) {\n            var xT = $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget);\n            event.target = xT.length > 0 ? xT.get(0) : event.target;\n          } else if (tmpTarget) {\n            tmpTarget.removeClass(consts.node.TMPTARGET_TREE);\n            if (tmpTargetNodeId) $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + \"_\" + consts.move.TYPE_PREV).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_INNER);\n          }\n\n          tmpTarget = null;\n          tmpTargetNodeId = null; //judge drag & drop in multi ztree\n\n          isOtherTree = false;\n          targetSetting = setting;\n          var settings = data.getSettings();\n\n          for (var s in settings) {\n            if (settings[s].treeId && settings[s].edit.enable && settings[s].treeId != setting.treeId && (event.target.id == settings[s].treeId || $(event.target).parents(\"#\" + settings[s].treeId).length > 0)) {\n              isOtherTree = true;\n              targetSetting = settings[s];\n            }\n          }\n\n          var docScrollTop = doc.scrollTop(),\n              docScrollLeft = doc.scrollLeft(),\n              treeOffset = targetSetting.treeObj.offset(),\n              scrollHeight = targetSetting.treeObj.get(0).scrollHeight,\n              scrollWidth = targetSetting.treeObj.get(0).scrollWidth,\n              dTop = event.clientY + docScrollTop - treeOffset.top,\n              dBottom = targetSetting.treeObj.height() + treeOffset.top - event.clientY - docScrollTop,\n              dLeft = event.clientX + docScrollLeft - treeOffset.left,\n              dRight = targetSetting.treeObj.width() + treeOffset.left - event.clientX - docScrollLeft,\n              isTop = dTop < setting.edit.drag.borderMax && dTop > setting.edit.drag.borderMin,\n              isBottom = dBottom < setting.edit.drag.borderMax && dBottom > setting.edit.drag.borderMin,\n              isLeft = dLeft < setting.edit.drag.borderMax && dLeft > setting.edit.drag.borderMin,\n              isRight = dRight < setting.edit.drag.borderMax && dRight > setting.edit.drag.borderMin,\n              isTreeInner = dTop > setting.edit.drag.borderMin && dBottom > setting.edit.drag.borderMin && dLeft > setting.edit.drag.borderMin && dRight > setting.edit.drag.borderMin,\n              isTreeTop = isTop && targetSetting.treeObj.scrollTop() <= 0,\n              isTreeBottom = isBottom && targetSetting.treeObj.scrollTop() + targetSetting.treeObj.height() + 10 >= scrollHeight,\n              isTreeLeft = isLeft && targetSetting.treeObj.scrollLeft() <= 0,\n              isTreeRight = isRight && targetSetting.treeObj.scrollLeft() + targetSetting.treeObj.width() + 10 >= scrollWidth;\n\n          if (event.target && tools.isChildOrSelf(event.target, targetSetting.treeId)) {\n            //get node <li> dom\n            var targetObj = event.target;\n\n            while (targetObj && targetObj.tagName && !tools.eqs(targetObj.tagName, \"li\") && targetObj.id != targetSetting.treeId) {\n              targetObj = targetObj.parentNode;\n            }\n\n            var canMove = true; //don't move to self or children of self\n\n            for (i = 0, l = nodes.length; i < l; i++) {\n              tmpNode = nodes[i];\n\n              if (targetObj.id === tmpNode.tId) {\n                canMove = false;\n                break;\n              } else if ($$(tmpNode, setting).find(\"#\" + targetObj.id).length > 0) {\n                canMove = false;\n                break;\n              }\n            }\n\n            if (canMove && event.target && tools.isChildOrSelf(event.target, targetObj.id + consts.id.A)) {\n              tmpTarget = $(targetObj);\n              tmpTargetNodeId = targetObj.id;\n            }\n          } //the mouse must be in zTree\n\n\n          tmpNode = nodes[0];\n\n          if (isTreeInner && tools.isChildOrSelf(event.target, targetSetting.treeId)) {\n            //judge mouse move in root of ztree\n            if (!tmpTarget && (event.target.id == targetSetting.treeId || isTreeTop || isTreeBottom || isTreeLeft || isTreeRight) && (isOtherTree || !isOtherTree && tmpNode.parentTId)) {\n              tmpTarget = targetSetting.treeObj;\n            } //auto scroll top\n\n\n            if (isTop) {\n              targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() - 10);\n            } else if (isBottom) {\n              targetSetting.treeObj.scrollTop(targetSetting.treeObj.scrollTop() + 10);\n            }\n\n            if (isLeft) {\n              targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() - 10);\n            } else if (isRight) {\n              targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + 10);\n            } //auto scroll left\n\n\n            if (tmpTarget && tmpTarget != targetSetting.treeObj && tmpTarget.offset().left < targetSetting.treeObj.offset().left) {\n              targetSetting.treeObj.scrollLeft(targetSetting.treeObj.scrollLeft() + tmpTarget.offset().left - targetSetting.treeObj.offset().left);\n            }\n          }\n\n          curNode.css({\n            \"top\": event.clientY + docScrollTop + 3 + \"px\",\n            \"left\": event.clientX + docScrollLeft + 3 + \"px\"\n          });\n          var dX = 0;\n          var dY = 0;\n\n          if (tmpTarget && tmpTarget.attr(\"id\") != targetSetting.treeId) {\n            var clearMove = function clearMove() {\n              tmpTarget = null;\n              tmpTargetNodeId = \"\";\n              moveType = consts.move.TYPE_INNER;\n              tmpArrow.css({\n                \"display\": \"none\"\n              });\n\n              if (window.zTreeMoveTimer) {\n                clearTimeout(window.zTreeMoveTimer);\n                window.zTreeMoveTargetNodeTId = null;\n              }\n            };\n\n            var tmpTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId),\n                isCopy = (event.ctrlKey || event.metaKey) && setting.edit.drag.isMove && setting.edit.drag.isCopy || !setting.edit.drag.isMove && setting.edit.drag.isCopy,\n                isPrev = !!(preNode && tmpTargetNodeId === preNode.tId),\n                isNext = !!(nextNode && tmpTargetNodeId === nextNode.tId),\n                isInner = tmpNode.parentTId && tmpNode.parentTId == tmpTargetNodeId,\n                canPrev = (isCopy || !isNext) && tools.apply(targetSetting.edit.drag.prev, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.prev),\n                canNext = (isCopy || !isPrev) && tools.apply(targetSetting.edit.drag.next, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.next),\n                canInner = (isCopy || !isInner) && !(targetSetting.data.keep.leaf && !tmpTargetNode.isParent) && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, tmpTargetNode], !!targetSetting.edit.drag.inner);\n\n            if (!canPrev && !canNext && !canInner) {\n              clearMove();\n            } else {\n              var tmpTargetA = $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget),\n                  tmpNextA = tmpTargetNode.isLastNode ? null : $(\"#\" + tmpTargetNode.getNextNode().tId + consts.id.A, tmpTarget.next()),\n                  tmpTop = tmpTargetA.offset().top,\n                  tmpLeft = tmpTargetA.offset().left,\n                  prevPercent = canPrev ? canInner ? 0.25 : canNext ? 0.5 : 1 : -1,\n                  nextPercent = canNext ? canInner ? 0.75 : canPrev ? 0.5 : 0 : -1,\n                  dY_percent = (event.clientY + docScrollTop - tmpTop) / tmpTargetA.height();\n\n              if ((prevPercent == 1 || dY_percent <= prevPercent && dY_percent >= -.2) && canPrev) {\n                dX = 1 - tmpArrow.width();\n                dY = tmpTop - tmpArrow.height() / 2;\n                moveType = consts.move.TYPE_PREV;\n              } else if ((nextPercent == 0 || dY_percent >= nextPercent && dY_percent <= 1.2) && canNext) {\n                dX = 1 - tmpArrow.width();\n                dY = tmpNextA == null || tmpTargetNode.isParent && tmpTargetNode.open ? tmpTop + tmpTargetA.height() - tmpArrow.height() / 2 : tmpNextA.offset().top - tmpArrow.height() / 2;\n                moveType = consts.move.TYPE_NEXT;\n              } else if (canInner) {\n                dX = 5 - tmpArrow.width();\n                dY = tmpTop;\n                moveType = consts.move.TYPE_INNER;\n              } else {\n                clearMove();\n              }\n\n              if (tmpTarget) {\n                tmpArrow.css({\n                  \"display\": \"block\",\n                  \"top\": dY + \"px\",\n                  \"left\": tmpLeft + dX + \"px\"\n                });\n                tmpTargetA.addClass(consts.node.TMPTARGET_NODE + \"_\" + moveType);\n\n                if (preTmpTargetNodeId != tmpTargetNodeId || preTmpMoveType != moveType) {\n                  startTime = new Date().getTime();\n                }\n\n                if (tmpTargetNode && tmpTargetNode.isParent && moveType == consts.move.TYPE_INNER) {\n                  var startTimer = true;\n\n                  if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId !== tmpTargetNode.tId) {\n                    clearTimeout(window.zTreeMoveTimer);\n                    window.zTreeMoveTargetNodeTId = null;\n                  } else if (window.zTreeMoveTimer && window.zTreeMoveTargetNodeTId === tmpTargetNode.tId) {\n                    startTimer = false;\n                  }\n\n                  if (startTimer) {\n                    window.zTreeMoveTimer = setTimeout(function () {\n                      if (moveType != consts.move.TYPE_INNER) return;\n\n                      if (tmpTargetNode && tmpTargetNode.isParent && !tmpTargetNode.open && new Date().getTime() - startTime > targetSetting.edit.drag.autoOpenTime && tools.apply(targetSetting.callback.beforeDragOpen, [targetSetting.treeId, tmpTargetNode], true)) {\n                        view.switchNode(targetSetting, tmpTargetNode);\n\n                        if (targetSetting.edit.drag.autoExpandTrigger) {\n                          targetSetting.treeObj.trigger(consts.event.EXPAND, [targetSetting.treeId, tmpTargetNode]);\n                        }\n                      }\n                    }, targetSetting.edit.drag.autoOpenTime + 50);\n                    window.zTreeMoveTargetNodeTId = tmpTargetNode.tId;\n                  }\n                }\n              }\n            }\n          } else {\n            moveType = consts.move.TYPE_INNER;\n\n            if (tmpTarget && tools.apply(targetSetting.edit.drag.inner, [targetSetting.treeId, nodes, null], !!targetSetting.edit.drag.inner)) {\n              tmpTarget.addClass(consts.node.TMPTARGET_TREE);\n            } else {\n              tmpTarget = null;\n            }\n\n            tmpArrow.css({\n              \"display\": \"none\"\n            });\n\n            if (window.zTreeMoveTimer) {\n              clearTimeout(window.zTreeMoveTimer);\n              window.zTreeMoveTargetNodeTId = null;\n            }\n          }\n\n          preTmpTargetNodeId = tmpTargetNodeId;\n          preTmpMoveType = moveType;\n          setting.treeObj.trigger(consts.event.DRAGMOVE, [event, setting.treeId, nodes]);\n        }\n\n        return false;\n      }\n\n      doc.bind(\"mouseup\", _docMouseUp);\n\n      function _docMouseUp(event) {\n        if (window.zTreeMoveTimer) {\n          clearTimeout(window.zTreeMoveTimer);\n          window.zTreeMoveTargetNodeTId = null;\n        }\n\n        preTmpTargetNodeId = null;\n        preTmpMoveType = null;\n        doc.unbind(\"mousemove\", _docMouseMove);\n        doc.unbind(\"mouseup\", _docMouseUp);\n        doc.unbind(\"selectstart\", _docSelect);\n        body.css(\"cursor\", \"auto\");\n\n        if (tmpTarget) {\n          tmpTarget.removeClass(consts.node.TMPTARGET_TREE);\n          if (tmpTargetNodeId) $(\"#\" + tmpTargetNodeId + consts.id.A, tmpTarget).removeClass(consts.node.TMPTARGET_NODE + \"_\" + consts.move.TYPE_PREV).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_NEXT).removeClass(consts.node.TMPTARGET_NODE + \"_\" + _consts.move.TYPE_INNER);\n        }\n\n        tools.showIfameMask(setting, false);\n        roots.showHoverDom = true;\n        if (root.dragFlag == 0) return;\n        root.dragFlag = 0;\n        var i, l, tmpNode;\n\n        for (i = 0, l = nodes.length; i < l; i++) {\n          tmpNode = nodes[i];\n\n          if (tmpNode.isParent && root.dragNodeShowBefore[tmpNode.tId] && !tmpNode.open) {\n            view.expandCollapseNode(setting, tmpNode, !tmpNode.open);\n            delete root.dragNodeShowBefore[tmpNode.tId];\n          }\n        }\n\n        if (curNode) curNode.remove();\n        if (tmpArrow) tmpArrow.remove();\n        var isCopy = (event.ctrlKey || event.metaKey) && setting.edit.drag.isMove && setting.edit.drag.isCopy || !setting.edit.drag.isMove && setting.edit.drag.isCopy;\n\n        if (!isCopy && tmpTarget && tmpTargetNodeId && nodes[0].parentTId && tmpTargetNodeId == nodes[0].parentTId && moveType == consts.move.TYPE_INNER) {\n          tmpTarget = null;\n        }\n\n        if (tmpTarget) {\n          var dropCallback = function dropCallback() {\n            if (isOtherTree) {\n              if (!isCopy) {\n                for (var i = 0, l = nodes.length; i < l; i++) {\n                  view.removeNode(setting, nodes[i]);\n                }\n              }\n\n              if (moveType == consts.move.TYPE_INNER) {\n                view.addNodes(targetSetting, dragTargetNode, -1, newNodes);\n              } else {\n                view.addNodes(targetSetting, dragTargetNode.getParentNode(), moveType == consts.move.TYPE_PREV ? dragTargetNode.getIndex() : dragTargetNode.getIndex() + 1, newNodes);\n              }\n            } else {\n              if (isCopy && moveType == consts.move.TYPE_INNER) {\n                view.addNodes(targetSetting, dragTargetNode, -1, newNodes);\n              } else if (isCopy) {\n                view.addNodes(targetSetting, dragTargetNode.getParentNode(), moveType == consts.move.TYPE_PREV ? dragTargetNode.getIndex() : dragTargetNode.getIndex() + 1, newNodes);\n              } else {\n                if (moveType != consts.move.TYPE_NEXT) {\n                  for (i = 0, l = newNodes.length; i < l; i++) {\n                    view.moveNode(targetSetting, dragTargetNode, newNodes[i], moveType, false);\n                  }\n                } else {\n                  for (i = -1, l = newNodes.length - 1; i < l; l--) {\n                    view.moveNode(targetSetting, dragTargetNode, newNodes[l], moveType, false);\n                  }\n                }\n              }\n            }\n\n            view.selectNodes(targetSetting, newNodes);\n            var a = $$(newNodes[0], setting).get(0);\n            view.scrollIntoView(a);\n            setting.treeObj.trigger(consts.event.DROP, [event, targetSetting.treeId, newNodes, dragTargetNode, moveType, isCopy]);\n          };\n\n          var dragTargetNode = tmpTargetNodeId == null ? null : data.getNodeCache(targetSetting, tmpTargetNodeId);\n\n          if (tools.apply(setting.callback.beforeDrop, [targetSetting.treeId, nodes, dragTargetNode, moveType, isCopy], true) == false) {\n            view.selectNodes(sourceSetting, nodes);\n            return;\n          }\n\n          var newNodes = isCopy ? tools.clone(nodes) : nodes;\n\n          if (moveType == consts.move.TYPE_INNER && tools.canAsync(targetSetting, dragTargetNode)) {\n            view.asyncNode(targetSetting, dragTargetNode, false, dropCallback);\n          } else {\n            dropCallback();\n          }\n        } else {\n          view.selectNodes(sourceSetting, nodes);\n          setting.treeObj.trigger(consts.event.DROP, [event, setting.treeId, nodes, null, null, null]);\n        }\n      }\n\n      doc.bind(\"selectstart\", _docSelect);\n\n      function _docSelect() {\n        return false;\n      } //Avoid FireFox's Bug\n      //If zTree Div CSS set 'overflow', so drag node outside of zTree, and event.target is error.\n\n\n      if (eventMouseDown.preventDefault) {\n        eventMouseDown.preventDefault();\n      }\n\n      return true;\n    }\n  },\n      //method of tools for zTree\n  _tools = {\n    getAbs: function getAbs(obj) {\n      var oRect = obj.getBoundingClientRect(),\n          scrollTop = document.body.scrollTop + document.documentElement.scrollTop,\n          scrollLeft = document.body.scrollLeft + document.documentElement.scrollLeft;\n      return [oRect.left + scrollLeft, oRect.top + scrollTop];\n    },\n    inputFocus: function inputFocus(inputObj) {\n      if (inputObj.get(0)) {\n        inputObj.focus();\n        tools.setCursorPosition(inputObj.get(0), inputObj.val().length);\n      }\n    },\n    inputSelect: function inputSelect(inputObj) {\n      if (inputObj.get(0)) {\n        inputObj.focus();\n        inputObj.select();\n      }\n    },\n    setCursorPosition: function setCursorPosition(obj, pos) {\n      if (obj.setSelectionRange) {\n        obj.focus();\n        obj.setSelectionRange(pos, pos);\n      } else if (obj.createTextRange) {\n        var range = obj.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pos);\n        range.moveStart('character', pos);\n        range.select();\n      }\n    },\n    showIfameMask: function showIfameMask(setting, showSign) {\n      var root = data.getRoot(setting); //clear full mask\n\n      while (root.dragMaskList.length > 0) {\n        root.dragMaskList[0].remove();\n        root.dragMaskList.shift();\n      }\n\n      if (showSign) {\n        //show mask\n        var iframeList = $$(\"iframe\", setting);\n\n        for (var i = 0, l = iframeList.length; i < l; i++) {\n          var obj = iframeList.get(i),\n              r = tools.getAbs(obj),\n              dragMask = $$(\"<div id='zTreeMask_\" + i + \"' class='zTreeMask' style='top:\" + r[1] + \"px; left:\" + r[0] + \"px; width:\" + obj.offsetWidth + \"px; height:\" + obj.offsetHeight + \"px;'></div>\", setting);\n          dragMask.appendTo($$(\"body\", setting));\n          root.dragMaskList.push(dragMask);\n        }\n      }\n    }\n  },\n      //method of operate ztree dom\n  _view = {\n    addEditBtn: function addEditBtn(setting, node) {\n      if (node.editNameFlag || $$(node, consts.id.EDIT, setting).length > 0) {\n        return;\n      }\n\n      if (!tools.apply(setting.edit.showRenameBtn, [setting.treeId, node], setting.edit.showRenameBtn)) {\n        return;\n      }\n\n      var aObj = $$(node, consts.id.A, setting),\n          editStr = \"<span class='\" + consts.className.BUTTON + \" edit' id='\" + node.tId + consts.id.EDIT + \"' title='\" + tools.apply(setting.edit.renameTitle, [setting.treeId, node], setting.edit.renameTitle) + \"' treeNode\" + consts.id.EDIT + \" style='display:none;'></span>\";\n      aObj.append(editStr);\n      $$(node, consts.id.EDIT, setting).bind('click', function () {\n        if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeEditName, [setting.treeId, node], true) == false) return false;\n        view.editNode(setting, node);\n        return false;\n      }).show();\n    },\n    addRemoveBtn: function addRemoveBtn(setting, node) {\n      if (node.editNameFlag || $$(node, consts.id.REMOVE, setting).length > 0) {\n        return;\n      }\n\n      if (!tools.apply(setting.edit.showRemoveBtn, [setting.treeId, node], setting.edit.showRemoveBtn)) {\n        return;\n      }\n\n      var aObj = $$(node, consts.id.A, setting),\n          removeStr = \"<span class='\" + consts.className.BUTTON + \" remove' id='\" + node.tId + consts.id.REMOVE + \"' title='\" + tools.apply(setting.edit.removeTitle, [setting.treeId, node], setting.edit.removeTitle) + \"' treeNode\" + consts.id.REMOVE + \" style='display:none;'></span>\";\n      aObj.append(removeStr);\n      $$(node, consts.id.REMOVE, setting).bind('click', function () {\n        if (!tools.uCanDo(setting) || tools.apply(setting.callback.beforeRemove, [setting.treeId, node], true) == false) return false;\n        view.removeNode(setting, node);\n        setting.treeObj.trigger(consts.event.REMOVE, [setting.treeId, node]);\n        return false;\n      }).bind('mousedown', function (eventMouseDown) {\n        return true;\n      }).show();\n    },\n    addHoverDom: function addHoverDom(setting, node) {\n      if (data.getRoots().showHoverDom) {\n        node.isHover = true;\n\n        if (setting.edit.enable) {\n          view.addEditBtn(setting, node);\n          view.addRemoveBtn(setting, node);\n        }\n\n        tools.apply(setting.view.addHoverDom, [setting.treeId, node]);\n      }\n    },\n    cancelCurEditNode: function cancelCurEditNode(setting, forceName, isCancel) {\n      var root = data.getRoot(setting),\n          nameKey = setting.data.key.name,\n          node = root.curEditNode;\n\n      if (node) {\n        var inputObj = root.curEditInput,\n            newName = forceName ? forceName : isCancel ? node[nameKey] : inputObj.val();\n\n        if (tools.apply(setting.callback.beforeRename, [setting.treeId, node, newName, isCancel], true) === false) {\n          return false;\n        }\n\n        node[nameKey] = newName;\n        var aObj = $$(node, consts.id.A, setting);\n        aObj.removeClass(consts.node.CURSELECTED_EDIT);\n        inputObj.unbind();\n        view.setNodeName(setting, node);\n        node.editNameFlag = false;\n        root.curEditNode = null;\n        root.curEditInput = null;\n        view.selectNode(setting, node, false);\n        setting.treeObj.trigger(consts.event.RENAME, [setting.treeId, node, isCancel]);\n      }\n\n      root.noSelection = true;\n      return true;\n    },\n    editNode: function editNode(setting, node) {\n      var root = data.getRoot(setting);\n      view.editNodeBlur = false;\n\n      if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {\n        setTimeout(function () {\n          tools.inputFocus(root.curEditInput);\n        }, 0);\n        return;\n      }\n\n      var nameKey = setting.data.key.name;\n      node.editNameFlag = true;\n      view.removeTreeDom(setting, node);\n      view.cancelCurEditNode(setting);\n      view.selectNode(setting, node, false);\n      $$(node, consts.id.SPAN, setting).html(\"<input type=text class='rename' id='\" + node.tId + consts.id.INPUT + \"' treeNode\" + consts.id.INPUT + \" >\");\n      var inputObj = $$(node, consts.id.INPUT, setting);\n      inputObj.attr(\"value\", node[nameKey]);\n\n      if (setting.edit.editNameSelectAll) {\n        tools.inputSelect(inputObj);\n      } else {\n        tools.inputFocus(inputObj);\n      }\n\n      inputObj.bind('blur', function (event) {\n        if (!view.editNodeBlur) {\n          view.cancelCurEditNode(setting);\n        }\n      }).bind('keydown', function (event) {\n        if (event.keyCode == \"13\") {\n          view.editNodeBlur = true;\n          view.cancelCurEditNode(setting);\n        } else if (event.keyCode == \"27\") {\n          view.cancelCurEditNode(setting, null, true);\n        }\n      }).bind('click', function (event) {\n        return false;\n      }).bind('dblclick', function (event) {\n        return false;\n      });\n      $$(node, consts.id.A, setting).addClass(consts.node.CURSELECTED_EDIT);\n      root.curEditInput = inputObj;\n      root.noSelection = false;\n      root.curEditNode = node;\n    },\n    moveNode: function moveNode(setting, targetNode, node, moveType, animateFlag, isSilent) {\n      var root = data.getRoot(setting),\n          childKey = setting.data.key.children;\n      if (targetNode == node) return;\n      if (setting.data.keep.leaf && targetNode && !targetNode.isParent && moveType == consts.move.TYPE_INNER) return;\n      var oldParentNode = node.parentTId ? node.getParentNode() : root,\n          targetNodeIsRoot = targetNode === null || targetNode == root;\n      if (targetNodeIsRoot && targetNode === null) targetNode = root;\n      if (targetNodeIsRoot) moveType = consts.move.TYPE_INNER;\n      var targetParentNode = targetNode.parentTId ? targetNode.getParentNode() : root;\n\n      if (moveType != consts.move.TYPE_PREV && moveType != consts.move.TYPE_NEXT) {\n        moveType = consts.move.TYPE_INNER;\n      }\n\n      if (moveType == consts.move.TYPE_INNER) {\n        if (targetNodeIsRoot) {\n          //parentTId of root node is null\n          node.parentTId = null;\n        } else {\n          if (!targetNode.isParent) {\n            targetNode.isParent = true;\n            targetNode.open = !!targetNode.open;\n            view.setNodeLineIcos(setting, targetNode);\n          }\n\n          node.parentTId = targetNode.tId;\n        }\n      } //move node Dom\n\n\n      var targetObj, target_ulObj;\n\n      if (targetNodeIsRoot) {\n        targetObj = setting.treeObj;\n        target_ulObj = targetObj;\n      } else {\n        if (!isSilent && moveType == consts.move.TYPE_INNER) {\n          view.expandCollapseNode(setting, targetNode, true, false);\n        } else if (!isSilent) {\n          view.expandCollapseNode(setting, targetNode.getParentNode(), true, false);\n        }\n\n        targetObj = $$(targetNode, setting);\n        target_ulObj = $$(targetNode, consts.id.UL, setting);\n\n        if (!!targetObj.get(0) && !target_ulObj.get(0)) {\n          var ulstr = [];\n          view.makeUlHtml(setting, targetNode, ulstr, '');\n          targetObj.append(ulstr.join(''));\n        }\n\n        target_ulObj = $$(targetNode, consts.id.UL, setting);\n      }\n\n      var nodeDom = $$(node, setting);\n\n      if (!nodeDom.get(0)) {\n        nodeDom = view.appendNodes(setting, node.level, [node], null, -1, false, true).join('');\n      } else if (!targetObj.get(0)) {\n        nodeDom.remove();\n      }\n\n      if (target_ulObj.get(0) && moveType == consts.move.TYPE_INNER) {\n        target_ulObj.append(nodeDom);\n      } else if (targetObj.get(0) && moveType == consts.move.TYPE_PREV) {\n        targetObj.before(nodeDom);\n      } else if (targetObj.get(0) && moveType == consts.move.TYPE_NEXT) {\n        targetObj.after(nodeDom);\n      } //repair the data after move\n\n\n      var i,\n          l,\n          tmpSrcIndex = -1,\n          tmpTargetIndex = 0,\n          oldNeighbor = null,\n          newNeighbor = null,\n          oldLevel = node.level;\n\n      if (node.isFirstNode) {\n        tmpSrcIndex = 0;\n\n        if (oldParentNode[childKey].length > 1) {\n          oldNeighbor = oldParentNode[childKey][1];\n          oldNeighbor.isFirstNode = true;\n        }\n      } else if (node.isLastNode) {\n        tmpSrcIndex = oldParentNode[childKey].length - 1;\n        oldNeighbor = oldParentNode[childKey][tmpSrcIndex - 1];\n        oldNeighbor.isLastNode = true;\n      } else {\n        for (i = 0, l = oldParentNode[childKey].length; i < l; i++) {\n          if (oldParentNode[childKey][i].tId == node.tId) {\n            tmpSrcIndex = i;\n            break;\n          }\n        }\n      }\n\n      if (tmpSrcIndex >= 0) {\n        oldParentNode[childKey].splice(tmpSrcIndex, 1);\n      }\n\n      if (moveType != consts.move.TYPE_INNER) {\n        for (i = 0, l = targetParentNode[childKey].length; i < l; i++) {\n          if (targetParentNode[childKey][i].tId == targetNode.tId) tmpTargetIndex = i;\n        }\n      }\n\n      if (moveType == consts.move.TYPE_INNER) {\n        if (!targetNode[childKey]) targetNode[childKey] = new Array();\n\n        if (targetNode[childKey].length > 0) {\n          newNeighbor = targetNode[childKey][targetNode[childKey].length - 1];\n          newNeighbor.isLastNode = false;\n        }\n\n        targetNode[childKey].splice(targetNode[childKey].length, 0, node);\n        node.isLastNode = true;\n        node.isFirstNode = targetNode[childKey].length == 1;\n      } else if (targetNode.isFirstNode && moveType == consts.move.TYPE_PREV) {\n        targetParentNode[childKey].splice(tmpTargetIndex, 0, node);\n        newNeighbor = targetNode;\n        newNeighbor.isFirstNode = false;\n        node.parentTId = targetNode.parentTId;\n        node.isFirstNode = true;\n        node.isLastNode = false;\n      } else if (targetNode.isLastNode && moveType == consts.move.TYPE_NEXT) {\n        targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);\n        newNeighbor = targetNode;\n        newNeighbor.isLastNode = false;\n        node.parentTId = targetNode.parentTId;\n        node.isFirstNode = false;\n        node.isLastNode = true;\n      } else {\n        if (moveType == consts.move.TYPE_PREV) {\n          targetParentNode[childKey].splice(tmpTargetIndex, 0, node);\n        } else {\n          targetParentNode[childKey].splice(tmpTargetIndex + 1, 0, node);\n        }\n\n        node.parentTId = targetNode.parentTId;\n        node.isFirstNode = false;\n        node.isLastNode = false;\n      }\n\n      data.fixPIdKeyValue(setting, node);\n      data.setSonNodeLevel(setting, node.getParentNode(), node); //repair node what been moved\n\n      view.setNodeLineIcos(setting, node);\n      view.repairNodeLevelClass(setting, node, oldLevel); //repair node's old parentNode dom\n\n      if (!setting.data.keep.parent && oldParentNode[childKey].length < 1) {\n        //old parentNode has no child nodes\n        oldParentNode.isParent = false;\n        oldParentNode.open = false;\n        var tmp_ulObj = $$(oldParentNode, consts.id.UL, setting),\n            tmp_switchObj = $$(oldParentNode, consts.id.SWITCH, setting),\n            tmp_icoObj = $$(oldParentNode, consts.id.ICON, setting);\n        view.replaceSwitchClass(oldParentNode, tmp_switchObj, consts.folder.DOCU);\n        view.replaceIcoClass(oldParentNode, tmp_icoObj, consts.folder.DOCU);\n        tmp_ulObj.css(\"display\", \"none\");\n      } else if (oldNeighbor) {\n        //old neigbor node\n        view.setNodeLineIcos(setting, oldNeighbor);\n      } //new neigbor node\n\n\n      if (newNeighbor) {\n        view.setNodeLineIcos(setting, newNeighbor);\n      } //repair checkbox / radio\n\n\n      if (!!setting.check && setting.check.enable && view.repairChkClass) {\n        view.repairChkClass(setting, oldParentNode);\n        view.repairParentChkClassWithSelf(setting, oldParentNode);\n        if (oldParentNode != node.parent) view.repairParentChkClassWithSelf(setting, node);\n      } //expand parents after move\n\n\n      if (!isSilent) {\n        view.expandCollapseParentNode(setting, node.getParentNode(), true, animateFlag);\n      }\n    },\n    removeEditBtn: function removeEditBtn(setting, node) {\n      $$(node, consts.id.EDIT, setting).unbind().remove();\n    },\n    removeRemoveBtn: function removeRemoveBtn(setting, node) {\n      $$(node, consts.id.REMOVE, setting).unbind().remove();\n    },\n    removeTreeDom: function removeTreeDom(setting, node) {\n      node.isHover = false;\n      view.removeEditBtn(setting, node);\n      view.removeRemoveBtn(setting, node);\n      tools.apply(setting.view.removeHoverDom, [setting.treeId, node]);\n    },\n    repairNodeLevelClass: function repairNodeLevelClass(setting, node, oldLevel) {\n      if (oldLevel === node.level) return;\n      var liObj = $$(node, setting),\n          aObj = $$(node, consts.id.A, setting),\n          ulObj = $$(node, consts.id.UL, setting),\n          oldClass = consts.className.LEVEL + oldLevel,\n          newClass = consts.className.LEVEL + node.level;\n      liObj.removeClass(oldClass);\n      liObj.addClass(newClass);\n      aObj.removeClass(oldClass);\n      aObj.addClass(newClass);\n      ulObj.removeClass(oldClass);\n      ulObj.addClass(newClass);\n    },\n    selectNodes: function selectNodes(setting, nodes) {\n      for (var i = 0, l = nodes.length; i < l; i++) {\n        view.selectNode(setting, nodes[i], i > 0);\n      }\n    }\n  },\n      _z = {\n    tools: _tools,\n    view: _view,\n    event: _event,\n    data: _data\n  };\n\n  $.extend(true, $.fn.zTree.consts, _consts);\n  $.extend(true, $.fn.zTree._z, _z);\n  var zt = $.fn.zTree,\n      tools = zt._z.tools,\n      consts = zt.consts,\n      view = zt._z.view,\n      data = zt._z.data,\n      event = zt._z.event,\n      $$ = tools.$;\n  data.exSetting(_setting);\n  data.addInitBind(_bindEvent);\n  data.addInitUnBind(_unbindEvent);\n  data.addInitCache(_initCache);\n  data.addInitNode(_initNode);\n  data.addInitProxy(_eventProxy);\n  data.addInitRoot(_initRoot);\n  data.addZTreeTools(_zTreeTools);\n  var _cancelPreSelectedNode = view.cancelPreSelectedNode;\n\n  view.cancelPreSelectedNode = function (setting, node) {\n    var list = data.getRoot(setting).curSelectedList;\n\n    for (var i = 0, j = list.length; i < j; i++) {\n      if (!node || node === list[i]) {\n        view.removeTreeDom(setting, list[i]);\n        if (node) break;\n      }\n    }\n\n    if (_cancelPreSelectedNode) _cancelPreSelectedNode.apply(view, arguments);\n  };\n\n  var _createNodes = view.createNodes;\n\n  view.createNodes = function (setting, level, nodes, parentNode, index) {\n    if (_createNodes) {\n      _createNodes.apply(view, arguments);\n    }\n\n    if (!nodes) return;\n\n    if (view.repairParentChkClassWithSelf) {\n      view.repairParentChkClassWithSelf(setting, parentNode);\n    }\n  };\n\n  var _makeNodeUrl = view.makeNodeUrl;\n\n  view.makeNodeUrl = function (setting, node) {\n    return setting.edit.enable ? null : _makeNodeUrl.apply(view, arguments);\n  };\n\n  var _removeNode = view.removeNode;\n\n  view.removeNode = function (setting, node) {\n    var root = data.getRoot(setting);\n    if (root.curEditNode === node) root.curEditNode = null;\n\n    if (_removeNode) {\n      _removeNode.apply(view, arguments);\n    }\n  };\n\n  var _selectNode = view.selectNode;\n\n  view.selectNode = function (setting, node, addFlag) {\n    var root = data.getRoot(setting);\n\n    if (data.isSelectedNode(setting, node) && root.curEditNode == node && node.editNameFlag) {\n      return false;\n    }\n\n    if (_selectNode) _selectNode.apply(view, arguments);\n    view.addHoverDom(setting, node);\n    return true;\n  };\n\n  var _uCanDo = tools.uCanDo;\n\n  tools.uCanDo = function (setting, e) {\n    var root = data.getRoot(setting);\n\n    if (e && (tools.eqs(e.type, \"mouseover\") || tools.eqs(e.type, \"mouseout\") || tools.eqs(e.type, \"mousedown\") || tools.eqs(e.type, \"mouseup\"))) {\n      return true;\n    }\n\n    if (root.curEditNode) {\n      view.editNodeBlur = false;\n      root.curEditInput.focus();\n    }\n\n    return !root.curEditNode && (_uCanDo ? _uCanDo.apply(view, arguments) : true);\n  };\n})(jQuery);\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ \"./node_modules/jquery/dist/jquery.js\")))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/common/zTree/js/jquery.ztree.all.js\n");

/***/ }),

/***/ "./src/views/admin/userMenu.vue":
/*!**************************************!*\
  !*** ./src/views/admin/userMenu.vue ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userMenu.vue?vue&type=template&id=2ede03b8&scoped=true& */ \"./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&\");\n/* harmony import */ var _userMenu_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./userMenu.vue?vue&type=script&lang=js& */ \"./src/views/admin/userMenu.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport *//* harmony import */ var _userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true& */ \"./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true&\");\n/* harmony import */ var _node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js */ \"./node_modules/vue-loader/lib/runtime/componentNormalizer.js\");\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(_node_modules_vue_loader_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _userMenu_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n  _userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"],\n  false,\n  null,\n  \"2ede03b8\",\n  null\n  \n)\n\n/* hot reload */\nif (true) {\n  var api = __webpack_require__(/*! ./node_modules/vue-hot-reload-api/dist/index.js */ \"./node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(__webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\"))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2ede03b8')) {\n      api.createRecord('2ede03b8', component.options)\n    } else {\n      api.reload('2ede03b8', component.options)\n    }\n    module.hot.accept(/*! ./userMenu.vue?vue&type=template&id=2ede03b8&scoped=true& */ \"./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./userMenu.vue?vue&type=template&id=2ede03b8&scoped=true& */ \"./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&\");\n(function () {\n      api.rerender('2ede03b8', {\n        render: _userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"],\n        staticRenderFns: _userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]\n      })\n    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n  }\n}\ncomponent.options.__file = \"src/views/admin/userMenu.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdmlld3MvYWRtaW4vdXNlck1lbnUudnVlLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vc3JjL3ZpZXdzL2FkbWluL3VzZXJNZW51LnZ1ZT84NTdkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJlZGUwM2I4JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3VzZXJNZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL3VzZXJNZW51LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJlZGUwM2I4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMmVkZTAzYjhcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCIvVXNlcnMvYXBwbGUvV09SS19TUEFDRS8yMDE5MDcyNHVzZXItc2VydmUtcGVyZ2UvdXNlci1zZXJ2ZXItcGFnZS9ub2RlX21vZHVsZXMvdnVlLWhvdC1yZWxvYWQtYXBpL2Rpc3QvaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIWFwaS5pc1JlY29yZGVkKCcyZWRlMDNiOCcpKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcyZWRlMDNiOCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcyZWRlMDNiOCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJlZGUwM2I4JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzJlZGUwM2I4Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzcmMvdmlld3MvYWRtaW4vdXNlck1lbnUudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/views/admin/userMenu.vue\n");

/***/ }),

/***/ "./src/views/admin/userMenu.vue?vue&type=script&lang=js&":
/*!***************************************************************!*\
  !*** ./src/views/admin/userMenu.vue?vue&type=script&lang=js& ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_cache_loader_dist_cjs_js_ref_12_0_node_modules_babel_loader_lib_index_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../../node_modules/babel-loader/lib!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib??vue-loader-options!./userMenu.vue?vue&type=script&lang=js& */ \"./node_modules/cache-loader/dist/cjs.js?!./node_modules/babel-loader/lib/index.js!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=script&lang=js&\");\n/* empty/unused harmony star reexport */ /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_cache_loader_dist_cjs_js_ref_12_0_node_modules_babel_loader_lib_index_js_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdmlld3MvYWRtaW4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy92aWV3cy9hZG1pbi91c2VyTWVudS52dWU/ZmRiNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMTItMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3VzZXJNZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTEyLTAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi91c2VyTWVudS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/views/admin/userMenu.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true&":
/*!************************************************************************************************!*\
  !*** ./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true& ***!
  \************************************************************************************************/
/*! no static exports found */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_vue_cli_service_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/loader.js??ref--8-oneOf-1-0!../../../node_modules/css-loader??ref--8-oneOf-1-1!../../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/src??ref--8-oneOf-1-2!../../../node_modules/sass-loader/dist/cjs.js??ref--8-oneOf-1-3!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib??vue-loader-options!./userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true& */ \"./node_modules/@vue/cli-service/node_modules/mini-css-extract-plugin/dist/loader.js?!./node_modules/css-loader/index.js?!./node_modules/vue-loader/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/src/index.js?!./node_modules/sass-loader/dist/cjs.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true&\");\n/* harmony import */ var _node_modules_vue_cli_service_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_cli_service_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);\n/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_cli_service_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _node_modules_vue_cli_service_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_vue_cli_service_node_modules_mini_css_extract_plugin_dist_loader_js_ref_8_oneOf_1_0_node_modules_css_loader_index_js_ref_8_oneOf_1_1_node_modules_vue_loader_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_src_index_js_ref_8_oneOf_1_2_node_modules_sass_loader_dist_cjs_js_ref_8_oneOf_1_3_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_style_index_0_id_2ede03b8_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default.a); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdmlld3MvYWRtaW4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MmVkZTAzYjgmbGFuZz1zY3NzJnNjb3BlZD10cnVlJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy92aWV3cy9hZG1pbi91c2VyTWVudS52dWU/N2ExNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL2NsaS1zZXJ2aWNlL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcz8/cmVmLS04LW9uZU9mLTEtMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Bvc3Rjc3MtbG9hZGVyL3NyYy9pbmRleC5qcz8/cmVmLS04LW9uZU9mLTEtMiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tOC1vbmVPZi0xLTMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2NhY2hlLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS0wLTAhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi91c2VyTWVudS52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0yZWRlMDNiOCZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvY2xpLXNlcnZpY2Uvbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzPz9yZWYtLTgtb25lT2YtMS0wIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0xIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvc3JjL2luZGV4LmpzPz9yZWYtLTgtb25lT2YtMS0yIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/cmVmLS04LW9uZU9mLTEtMyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY2FjaGUtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTAtMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3VzZXJNZW51LnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTJlZGUwM2I4Jmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/views/admin/userMenu.vue?vue&type=style&index=0&id=2ede03b8&lang=scss&scoped=true&\n");

/***/ }),

/***/ "./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&":
/*!*********************************************************************************!*\
  !*** ./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true& ***!
  \*********************************************************************************/
/*! exports provided: render, staticRenderFns */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _cache_loader_cacheDirectory_node_modules_cache_vue_loader_cacheIdentifier_5354fe5c_vue_loader_template_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!cache-loader?{\"cacheDirectory\":\"node_modules/.cache/vue-loader\",\"cacheIdentifier\":\"5354fe5c-vue-loader-template\"}!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader/lib??vue-loader-options!./userMenu.vue?vue&type=template&id=2ede03b8&scoped=true& */ \"./node_modules/cache-loader/dist/cjs.js?{\\\"cacheDirectory\\\":\\\"node_modules/.cache/vue-loader\\\",\\\"cacheIdentifier\\\":\\\"5354fe5c-vue-loader-template\\\"}!./node_modules/vue-loader/lib/loaders/templateLoader.js?!./node_modules/cache-loader/dist/cjs.js?!./node_modules/vue-loader/lib/index.js?!./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"render\", function() { return _cache_loader_cacheDirectory_node_modules_cache_vue_loader_cacheIdentifier_5354fe5c_vue_loader_template_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"render\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"staticRenderFns\", function() { return _cache_loader_cacheDirectory_node_modules_cache_vue_loader_cacheIdentifier_5354fe5c_vue_loader_template_node_modules_vue_loader_lib_loaders_templateLoader_js_vue_loader_options_node_modules_cache_loader_dist_cjs_js_ref_0_0_node_modules_vue_loader_lib_index_js_vue_loader_options_userMenu_vue_vue_type_template_id_2ede03b8_scoped_true___WEBPACK_IMPORTED_MODULE_0__[\"staticRenderFns\"]; });\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdmlld3MvYWRtaW4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJlZGUwM2I4JnNjb3BlZD10cnVlJi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy92aWV3cy9hZG1pbi91c2VyTWVudS52dWU/YTRlNSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tIFwiLSFjYWNoZS1sb2FkZXI/e1xcXCJjYWNoZURpcmVjdG9yeVxcXCI6XFxcIm5vZGVfbW9kdWxlcy8uY2FjaGUvdnVlLWxvYWRlclxcXCIsXFxcImNhY2hlSWRlbnRpZmllclxcXCI6XFxcIjUzNTRmZTVjLXZ1ZS1sb2FkZXItdGVtcGxhdGVcXFwifSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9jYWNoZS1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMC0wIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vdXNlck1lbnUudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTJlZGUwM2I4JnNjb3BlZD10cnVlJlwiIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/views/admin/userMenu.vue?vue&type=template&id=2ede03b8&scoped=true&\n");

/***/ })

}]);